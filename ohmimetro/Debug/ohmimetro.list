
ohmimetro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000054e0  08002304  08002304  00012304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  20000000  080077ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000042c  200001d8  080079c4  000201d8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000604  080079c4  00020604  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012151  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d84  00000000  00000000  00032352  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b42  00000000  00000000  000350d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000848  00000000  00000000  00038c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c6c  00000000  00000000  00039d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000290e  00000000  00000000  0003ea04  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041312  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000198c  00000000  00000000  00041390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	080022ec 	.word	0x080022ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	080022ec 	.word	0x080022ec

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 fa44 	bl	80005e8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 fa0a 	bl	8000580 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000004 	.word	0x20000004

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f9eb 	bl	800055c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f001 faf2 	bl	8001774 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000208 	.word	0x20000208

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000208 	.word	0x20000208

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff6 	bl	80001a8 <HAL_GetTick>
 80001bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001c2:	bf18      	it	ne
 80001c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001c6:	f7ff ffef 	bl	80001a8 <HAL_GetTick>
 80001ca:	1b40      	subs	r0, r0, r5
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3fa      	bcc.n	80001c6 <HAL_Delay+0x12>
  {
  }
}
 80001d0:	b003      	add	sp, #12
 80001d2:	bd30      	pop	{r4, r5, pc}

080001d4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80001d4:	6803      	ldr	r3, [r0, #0]
 80001d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80001d8:	4770      	bx	lr
	...

080001dc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001dc:	2300      	movs	r3, #0
{ 
 80001de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d074      	beq.n	80002d4 <HAL_ADC_ConfigChannel+0xf8>
 80001ea:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001ec:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001f2:	2d06      	cmp	r5, #6
 80001f4:	6802      	ldr	r2, [r0, #0]
 80001f6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001fa:	680c      	ldr	r4, [r1, #0]
 80001fc:	d825      	bhi.n	800024a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001fe:	442b      	add	r3, r5
 8000200:	251f      	movs	r5, #31
 8000202:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000204:	3b05      	subs	r3, #5
 8000206:	409d      	lsls	r5, r3
 8000208:	ea26 0505 	bic.w	r5, r6, r5
 800020c:	fa04 f303 	lsl.w	r3, r4, r3
 8000210:	432b      	orrs	r3, r5
 8000212:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000214:	2c09      	cmp	r4, #9
 8000216:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800021a:	688d      	ldr	r5, [r1, #8]
 800021c:	d92f      	bls.n	800027e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800021e:	2607      	movs	r6, #7
 8000220:	4423      	add	r3, r4
 8000222:	68d1      	ldr	r1, [r2, #12]
 8000224:	3b1e      	subs	r3, #30
 8000226:	409e      	lsls	r6, r3
 8000228:	ea21 0106 	bic.w	r1, r1, r6
 800022c:	fa05 f303 	lsl.w	r3, r5, r3
 8000230:	430b      	orrs	r3, r1
 8000232:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000234:	f1a4 0310 	sub.w	r3, r4, #16
 8000238:	2b01      	cmp	r3, #1
 800023a:	d92b      	bls.n	8000294 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800023c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800023e:	2200      	movs	r2, #0
 8000240:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000244:	4618      	mov	r0, r3
 8000246:	b002      	add	sp, #8
 8000248:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800024a:	2d0c      	cmp	r5, #12
 800024c:	d80b      	bhi.n	8000266 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800024e:	442b      	add	r3, r5
 8000250:	251f      	movs	r5, #31
 8000252:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000254:	3b23      	subs	r3, #35	; 0x23
 8000256:	409d      	lsls	r5, r3
 8000258:	ea26 0505 	bic.w	r5, r6, r5
 800025c:	fa04 f303 	lsl.w	r3, r4, r3
 8000260:	432b      	orrs	r3, r5
 8000262:	6313      	str	r3, [r2, #48]	; 0x30
 8000264:	e7d6      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000266:	442b      	add	r3, r5
 8000268:	251f      	movs	r5, #31
 800026a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800026c:	3b41      	subs	r3, #65	; 0x41
 800026e:	409d      	lsls	r5, r3
 8000270:	ea26 0505 	bic.w	r5, r6, r5
 8000274:	fa04 f303 	lsl.w	r3, r4, r3
 8000278:	432b      	orrs	r3, r5
 800027a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800027c:	e7ca      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800027e:	2607      	movs	r6, #7
 8000280:	6911      	ldr	r1, [r2, #16]
 8000282:	4423      	add	r3, r4
 8000284:	409e      	lsls	r6, r3
 8000286:	ea21 0106 	bic.w	r1, r1, r6
 800028a:	fa05 f303 	lsl.w	r3, r5, r3
 800028e:	430b      	orrs	r3, r1
 8000290:	6113      	str	r3, [r2, #16]
 8000292:	e7cf      	b.n	8000234 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <HAL_ADC_ConfigChannel+0xfc>)
 8000296:	429a      	cmp	r2, r3
 8000298:	d116      	bne.n	80002c8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800029a:	6893      	ldr	r3, [r2, #8]
 800029c:	021b      	lsls	r3, r3, #8
 800029e:	d4cd      	bmi.n	800023c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002a2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002aa:	d1c7      	bne.n	800023c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <HAL_ADC_ConfigChannel+0x100>)
 80002ae:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <HAL_ADC_ConfigChannel+0x104>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80002b6:	230a      	movs	r3, #10
 80002b8:	4353      	muls	r3, r2
            wait_loop_index--;
 80002ba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002bc:	9b01      	ldr	r3, [sp, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0bc      	beq.n	800023c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	e7f8      	b.n	80002ba <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e7b4      	b.n	800023e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002d4:	2302      	movs	r3, #2
 80002d6:	e7b5      	b.n	8000244 <HAL_ADC_ConfigChannel+0x68>
 80002d8:	40012400 	.word	0x40012400
 80002dc:	20000004 	.word	0x20000004
 80002e0:	000f4240 	.word	0x000f4240

080002e4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80002e4:	2300      	movs	r3, #0
{
 80002e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80002e8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ea:	6803      	ldr	r3, [r0, #0]
{
 80002ec:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ee:	689a      	ldr	r2, [r3, #8]
 80002f0:	07d2      	lsls	r2, r2, #31
 80002f2:	d502      	bpl.n	80002fa <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002f4:	2000      	movs	r0, #0
}
 80002f6:	b002      	add	sp, #8
 80002f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	f042 0201 	orr.w	r2, r2, #1
 8000300:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <ADC_Enable+0x68>)
 8000304:	4a12      	ldr	r2, [pc, #72]	; (8000350 <ADC_Enable+0x6c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800030c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800030e:	9b01      	ldr	r3, [sp, #4]
 8000310:	b9c3      	cbnz	r3, 8000344 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000312:	f7ff ff49 	bl	80001a8 <HAL_GetTick>
 8000316:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000318:	6823      	ldr	r3, [r4, #0]
 800031a:	689d      	ldr	r5, [r3, #8]
 800031c:	f015 0501 	ands.w	r5, r5, #1
 8000320:	d1e8      	bne.n	80002f4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000322:	f7ff ff41 	bl	80001a8 <HAL_GetTick>
 8000326:	1b80      	subs	r0, r0, r6
 8000328:	2802      	cmp	r0, #2
 800032a:	d9f5      	bls.n	8000318 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800032c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800032e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800033a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000342:	e7d8      	b.n	80002f6 <ADC_Enable+0x12>
      wait_loop_index--;
 8000344:	9b01      	ldr	r3, [sp, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	e7e0      	b.n	800030c <ADC_Enable+0x28>
 800034a:	bf00      	nop
 800034c:	20000004 	.word	0x20000004
 8000350:	000f4240 	.word	0x000f4240

08000354 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000354:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000358:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800035a:	2b01      	cmp	r3, #1
{
 800035c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800035e:	d054      	beq.n	800040a <HAL_ADC_Start+0xb6>
 8000360:	2301      	movs	r3, #1
 8000362:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000366:	f7ff ffbd 	bl	80002e4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800036a:	2800      	cmp	r0, #0
 800036c:	d149      	bne.n	8000402 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800036e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000376:	f023 0301 	bic.w	r3, r3, #1
 800037a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000380:	6823      	ldr	r3, [r4, #0]
 8000382:	4293      	cmp	r3, r2
 8000384:	d104      	bne.n	8000390 <HAL_ADC_Start+0x3c>
 8000386:	4923      	ldr	r1, [pc, #140]	; (8000414 <HAL_ADC_Start+0xc0>)
 8000388:	684a      	ldr	r2, [r1, #4]
 800038a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800038e:	d12e      	bne.n	80003ee <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000390:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000392:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000396:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000398:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800039a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800039c:	bf41      	itttt	mi
 800039e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80003a0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80003a4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80003a8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80003b0:	bf1c      	itt	ne
 80003b2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80003b4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80003b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80003c0:	f06f 0202 	mvn.w	r2, #2
 80003c4:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80003cc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003d0:	d113      	bne.n	80003fa <HAL_ADC_Start+0xa6>
 80003d2:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <HAL_ADC_Start+0xbc>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d105      	bne.n	80003e4 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80003d8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80003dc:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80003de:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80003e2:	d10a      	bne.n	80003fa <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80003f4:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80003f6:	684a      	ldr	r2, [r1, #4]
 80003f8:	e7cf      	b.n	800039a <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80003fa:	689a      	ldr	r2, [r3, #8]
 80003fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000400:	e7f3      	b.n	80003ea <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000402:	2300      	movs	r3, #0
 8000404:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000408:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800040a:	2002      	movs	r0, #2
}
 800040c:	bd10      	pop	{r4, pc}
 800040e:	bf00      	nop
 8000410:	40012800 	.word	0x40012800
 8000414:	40012400 	.word	0x40012400

08000418 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000418:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800041a:	6803      	ldr	r3, [r0, #0]
{
 800041c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	07d2      	lsls	r2, r2, #31
 8000422:	d401      	bmi.n	8000428 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000424:	2000      	movs	r0, #0
 8000426:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f022 0201 	bic.w	r2, r2, #1
 800042e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000430:	f7ff feba 	bl	80001a8 <HAL_GetTick>
 8000434:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000436:	6823      	ldr	r3, [r4, #0]
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	07db      	lsls	r3, r3, #31
 800043c:	d5f2      	bpl.n	8000424 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800043e:	f7ff feb3 	bl	80001a8 <HAL_GetTick>
 8000442:	1b40      	subs	r0, r0, r5
 8000444:	2802      	cmp	r0, #2
 8000446:	d9f6      	bls.n	8000436 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800044a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800044c:	f043 0310 	orr.w	r3, r3, #16
 8000450:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800045a:	bd38      	pop	{r3, r4, r5, pc}

0800045c <HAL_ADC_Init>:
{
 800045c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800045e:	4604      	mov	r4, r0
 8000460:	2800      	cmp	r0, #0
 8000462:	d071      	beq.n	8000548 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000464:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000466:	b923      	cbnz	r3, 8000472 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000468:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800046a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800046e:	f000 fff7 	bl	8001460 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000472:	4620      	mov	r0, r4
 8000474:	f7ff ffd0 	bl	8000418 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000478:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800047a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800047e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000480:	d164      	bne.n	800054c <HAL_ADC_Init+0xf0>
 8000482:	2800      	cmp	r0, #0
 8000484:	d162      	bne.n	800054c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000486:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000488:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800048c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800048e:	f023 0302 	bic.w	r3, r3, #2
 8000492:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000496:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000498:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800049a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800049c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800049e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80004a2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004a6:	d038      	beq.n	800051a <HAL_ADC_Init+0xbe>
 80004a8:	2901      	cmp	r1, #1
 80004aa:	bf14      	ite	ne
 80004ac:	4606      	movne	r6, r0
 80004ae:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004b2:	6965      	ldr	r5, [r4, #20]
 80004b4:	2d01      	cmp	r5, #1
 80004b6:	d107      	bne.n	80004c8 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d130      	bne.n	800051e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80004bc:	69a3      	ldr	r3, [r4, #24]
 80004be:	3b01      	subs	r3, #1
 80004c0:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80004c4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80004c8:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80004ce:	685d      	ldr	r5, [r3, #4]
 80004d0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80004d4:	ea45 0506 	orr.w	r5, r5, r6
 80004d8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80004da:	689e      	ldr	r6, [r3, #8]
 80004dc:	4d1d      	ldr	r5, [pc, #116]	; (8000554 <HAL_ADC_Init+0xf8>)
 80004de:	ea05 0506 	and.w	r5, r5, r6
 80004e2:	ea45 0502 	orr.w	r5, r5, r2
 80004e6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004e8:	d001      	beq.n	80004ee <HAL_ADC_Init+0x92>
 80004ea:	2901      	cmp	r1, #1
 80004ec:	d120      	bne.n	8000530 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80004ee:	6921      	ldr	r1, [r4, #16]
 80004f0:	3901      	subs	r1, #1
 80004f2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80004f4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80004f6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80004fa:	4329      	orrs	r1, r5
 80004fc:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004fe:	6899      	ldr	r1, [r3, #8]
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_ADC_Init+0xfc>)
 8000502:	400b      	ands	r3, r1
 8000504:	429a      	cmp	r2, r3
 8000506:	d115      	bne.n	8000534 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000508:	2300      	movs	r3, #0
 800050a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800050c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800050e:	f023 0303 	bic.w	r3, r3, #3
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	62a3      	str	r3, [r4, #40]	; 0x28
 8000518:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800051a:	460e      	mov	r6, r1
 800051c:	e7c9      	b.n	80004b2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800051e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000520:	f043 0320 	orr.w	r3, r3, #32
 8000524:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000526:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800052e:	e7cb      	b.n	80004c8 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000530:	2100      	movs	r1, #0
 8000532:	e7df      	b.n	80004f4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000536:	f023 0312 	bic.w	r3, r3, #18
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000548:	2001      	movs	r0, #1
}
 800054a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054c:	f043 0310 	orr.w	r3, r3, #16
 8000550:	62a3      	str	r3, [r4, #40]	; 0x28
 8000552:	e7f9      	b.n	8000548 <HAL_ADC_Init+0xec>
 8000554:	ffe1f7fd 	.word	0xffe1f7fd
 8000558:	ff1f0efe 	.word	0xff1f0efe

0800055c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800055e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000562:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000566:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800056a:	041b      	lsls	r3, r3, #16
 800056c:	0c1b      	lsrs	r3, r3, #16
 800056e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000576:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000578:	60d3      	str	r3, [r2, #12]
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	68dc      	ldr	r4, [r3, #12]
 8000586:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	2b04      	cmp	r3, #4
 8000592:	bf28      	it	cs
 8000594:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000598:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059c:	bf98      	it	ls
 800059e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	fa05 f303 	lsl.w	r3, r5, r3
 80005a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	bf88      	it	hi
 80005aa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	4019      	ands	r1, r3
 80005ae:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b0:	fa05 f404 	lsl.w	r4, r5, r4
 80005b4:	3c01      	subs	r4, #1
 80005b6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005b8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ba:	ea42 0201 	orr.w	r2, r2, r1
 80005be:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfaf      	iteee	ge
 80005c4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	4b06      	ldrlt	r3, [pc, #24]	; (80005e4 <HAL_NVIC_SetPriority+0x64>)
 80005ca:	f000 000f 	andlt.w	r0, r0, #15
 80005ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	bfa5      	ittet	ge
 80005d2:	b2d2      	uxtbge	r2, r2
 80005d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	e000ed00 	.word	0xe000ed00
 80005e4:	e000ed14 	.word	0xe000ed14

080005e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e8:	3801      	subs	r0, #1
 80005ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ee:	d20a      	bcs.n	8000606 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000600:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000606:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000e010 	.word	0xe000e010
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000616:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	bf0c      	ite	eq
 800061c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000620:	f022 0204 	bicne.w	r2, r2, #4
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	4770      	bx	lr
 8000628:	e000e010 	.word	0xe000e010

0800062c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800062c:	4770      	bx	lr

0800062e <HAL_SYSTICK_IRQHandler>:
{
 800062e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000630:	f7ff fffc 	bl	800062c <HAL_SYSTICK_Callback>
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800063c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800063e:	4616      	mov	r6, r2
 8000640:	4b65      	ldr	r3, [pc, #404]	; (80007d8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000642:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80007e8 <HAL_GPIO_Init+0x1b0>
 8000646:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80007ec <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800064a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000650:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000654:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000658:	45a0      	cmp	r8, r4
 800065a:	d17f      	bne.n	800075c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800065c:	684d      	ldr	r5, [r1, #4]
 800065e:	2d12      	cmp	r5, #18
 8000660:	f000 80af 	beq.w	80007c2 <HAL_GPIO_Init+0x18a>
 8000664:	f200 8088 	bhi.w	8000778 <HAL_GPIO_Init+0x140>
 8000668:	2d02      	cmp	r5, #2
 800066a:	f000 80a7 	beq.w	80007bc <HAL_GPIO_Init+0x184>
 800066e:	d87c      	bhi.n	800076a <HAL_GPIO_Init+0x132>
 8000670:	2d00      	cmp	r5, #0
 8000672:	f000 808e 	beq.w	8000792 <HAL_GPIO_Init+0x15a>
 8000676:	2d01      	cmp	r5, #1
 8000678:	f000 809e 	beq.w	80007b8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800067c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000680:	2cff      	cmp	r4, #255	; 0xff
 8000682:	bf93      	iteet	ls
 8000684:	4682      	movls	sl, r0
 8000686:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800068a:	3d08      	subhi	r5, #8
 800068c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000690:	bf92      	itee	ls
 8000692:	00b5      	lslls	r5, r6, #2
 8000694:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000698:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800069a:	fa09 f805 	lsl.w	r8, r9, r5
 800069e:	ea2b 0808 	bic.w	r8, fp, r8
 80006a2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006a6:	bf88      	it	hi
 80006a8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80006ac:	ea48 0505 	orr.w	r5, r8, r5
 80006b0:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80006b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80006bc:	d04e      	beq.n	800075c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006be:	4d47      	ldr	r5, [pc, #284]	; (80007dc <HAL_GPIO_Init+0x1a4>)
 80006c0:	4f46      	ldr	r7, [pc, #280]	; (80007dc <HAL_GPIO_Init+0x1a4>)
 80006c2:	69ad      	ldr	r5, [r5, #24]
 80006c4:	f026 0803 	bic.w	r8, r6, #3
 80006c8:	f045 0501 	orr.w	r5, r5, #1
 80006cc:	61bd      	str	r5, [r7, #24]
 80006ce:	69bd      	ldr	r5, [r7, #24]
 80006d0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80006d4:	f005 0501 	and.w	r5, r5, #1
 80006d8:	9501      	str	r5, [sp, #4]
 80006da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006de:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006e2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80006e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006ec:	fa09 f90b 	lsl.w	r9, r9, fp
 80006f0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f4:	4d3a      	ldr	r5, [pc, #232]	; (80007e0 <HAL_GPIO_Init+0x1a8>)
 80006f6:	42a8      	cmp	r0, r5
 80006f8:	d068      	beq.n	80007cc <HAL_GPIO_Init+0x194>
 80006fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006fe:	42a8      	cmp	r0, r5
 8000700:	d066      	beq.n	80007d0 <HAL_GPIO_Init+0x198>
 8000702:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000706:	42a8      	cmp	r0, r5
 8000708:	d064      	beq.n	80007d4 <HAL_GPIO_Init+0x19c>
 800070a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800070e:	42a8      	cmp	r0, r5
 8000710:	bf0c      	ite	eq
 8000712:	2503      	moveq	r5, #3
 8000714:	2504      	movne	r5, #4
 8000716:	fa05 f50b 	lsl.w	r5, r5, fp
 800071a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800071e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000722:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000724:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000728:	bf14      	ite	ne
 800072a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800072c:	43a5      	biceq	r5, r4
 800072e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000730:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000732:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8000736:	bf14      	ite	ne
 8000738:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800073a:	43a5      	biceq	r5, r4
 800073c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800073e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000740:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000744:	bf14      	ite	ne
 8000746:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000748:	43a5      	biceq	r5, r4
 800074a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800074c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000752:	bf14      	ite	ne
 8000754:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000756:	ea25 0404 	biceq.w	r4, r5, r4
 800075a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800075c:	3601      	adds	r6, #1
 800075e:	2e10      	cmp	r6, #16
 8000760:	f47f af73 	bne.w	800064a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000764:	b003      	add	sp, #12
 8000766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800076a:	2d03      	cmp	r5, #3
 800076c:	d022      	beq.n	80007b4 <HAL_GPIO_Init+0x17c>
 800076e:	2d11      	cmp	r5, #17
 8000770:	d184      	bne.n	800067c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000772:	68ca      	ldr	r2, [r1, #12]
 8000774:	3204      	adds	r2, #4
          break;
 8000776:	e781      	b.n	800067c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000778:	4f1a      	ldr	r7, [pc, #104]	; (80007e4 <HAL_GPIO_Init+0x1ac>)
 800077a:	42bd      	cmp	r5, r7
 800077c:	d009      	beq.n	8000792 <HAL_GPIO_Init+0x15a>
 800077e:	d812      	bhi.n	80007a6 <HAL_GPIO_Init+0x16e>
 8000780:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80007f0 <HAL_GPIO_Init+0x1b8>
 8000784:	454d      	cmp	r5, r9
 8000786:	d004      	beq.n	8000792 <HAL_GPIO_Init+0x15a>
 8000788:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800078c:	454d      	cmp	r5, r9
 800078e:	f47f af75 	bne.w	800067c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000792:	688a      	ldr	r2, [r1, #8]
 8000794:	b1c2      	cbz	r2, 80007c8 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000796:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000798:	bf0c      	ite	eq
 800079a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800079e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007a2:	2208      	movs	r2, #8
 80007a4:	e76a      	b.n	800067c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80007a6:	4575      	cmp	r5, lr
 80007a8:	d0f3      	beq.n	8000792 <HAL_GPIO_Init+0x15a>
 80007aa:	4565      	cmp	r5, ip
 80007ac:	d0f1      	beq.n	8000792 <HAL_GPIO_Init+0x15a>
 80007ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80007f4 <HAL_GPIO_Init+0x1bc>
 80007b2:	e7eb      	b.n	800078c <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007b4:	2200      	movs	r2, #0
 80007b6:	e761      	b.n	800067c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007b8:	68ca      	ldr	r2, [r1, #12]
          break;
 80007ba:	e75f      	b.n	800067c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007bc:	68ca      	ldr	r2, [r1, #12]
 80007be:	3208      	adds	r2, #8
          break;
 80007c0:	e75c      	b.n	800067c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007c2:	68ca      	ldr	r2, [r1, #12]
 80007c4:	320c      	adds	r2, #12
          break;
 80007c6:	e759      	b.n	800067c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007c8:	2204      	movs	r2, #4
 80007ca:	e757      	b.n	800067c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007cc:	2500      	movs	r5, #0
 80007ce:	e7a2      	b.n	8000716 <HAL_GPIO_Init+0xde>
 80007d0:	2501      	movs	r5, #1
 80007d2:	e7a0      	b.n	8000716 <HAL_GPIO_Init+0xde>
 80007d4:	2502      	movs	r5, #2
 80007d6:	e79e      	b.n	8000716 <HAL_GPIO_Init+0xde>
 80007d8:	40010400 	.word	0x40010400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	10210000 	.word	0x10210000
 80007e8:	10310000 	.word	0x10310000
 80007ec:	10320000 	.word	0x10320000
 80007f0:	10110000 	.word	0x10110000
 80007f4:	10220000 	.word	0x10220000

080007f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007f8:	b10a      	cbz	r2, 80007fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007fa:	6101      	str	r1, [r0, #16]
 80007fc:	4770      	bx	lr
 80007fe:	0409      	lsls	r1, r1, #16
 8000800:	e7fb      	b.n	80007fa <HAL_GPIO_WritePin+0x2>
	...

08000804 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000804:	6803      	ldr	r3, [r0, #0]
{
 8000806:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800080a:	07db      	lsls	r3, r3, #31
{
 800080c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800080e:	d410      	bmi.n	8000832 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000810:	682b      	ldr	r3, [r5, #0]
 8000812:	079f      	lsls	r7, r3, #30
 8000814:	d45e      	bmi.n	80008d4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000816:	682b      	ldr	r3, [r5, #0]
 8000818:	0719      	lsls	r1, r3, #28
 800081a:	f100 8095 	bmi.w	8000948 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800081e:	682b      	ldr	r3, [r5, #0]
 8000820:	075a      	lsls	r2, r3, #29
 8000822:	f100 80bf 	bmi.w	80009a4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000826:	69ea      	ldr	r2, [r5, #28]
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 812d 	bne.w	8000a88 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800082e:	2000      	movs	r0, #0
 8000830:	e014      	b.n	800085c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000832:	4c90      	ldr	r4, [pc, #576]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 8000834:	6863      	ldr	r3, [r4, #4]
 8000836:	f003 030c 	and.w	r3, r3, #12
 800083a:	2b04      	cmp	r3, #4
 800083c:	d007      	beq.n	800084e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800083e:	6863      	ldr	r3, [r4, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b08      	cmp	r3, #8
 8000846:	d10c      	bne.n	8000862 <HAL_RCC_OscConfig+0x5e>
 8000848:	6863      	ldr	r3, [r4, #4]
 800084a:	03de      	lsls	r6, r3, #15
 800084c:	d509      	bpl.n	8000862 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	039c      	lsls	r4, r3, #14
 8000852:	d5dd      	bpl.n	8000810 <HAL_RCC_OscConfig+0xc>
 8000854:	686b      	ldr	r3, [r5, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1da      	bne.n	8000810 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800085a:	2001      	movs	r0, #1
}
 800085c:	b002      	add	sp, #8
 800085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000862:	686b      	ldr	r3, [r5, #4]
 8000864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000868:	d110      	bne.n	800088c <HAL_RCC_OscConfig+0x88>
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000870:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000872:	f7ff fc99 	bl	80001a8 <HAL_GetTick>
 8000876:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	0398      	lsls	r0, r3, #14
 800087c:	d4c8      	bmi.n	8000810 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800087e:	f7ff fc93 	bl	80001a8 <HAL_GetTick>
 8000882:	1b80      	subs	r0, r0, r6
 8000884:	2864      	cmp	r0, #100	; 0x64
 8000886:	d9f7      	bls.n	8000878 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000888:	2003      	movs	r0, #3
 800088a:	e7e7      	b.n	800085c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088c:	b99b      	cbnz	r3, 80008b6 <HAL_RCC_OscConfig+0xb2>
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000894:	6023      	str	r3, [r4, #0]
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800089e:	f7ff fc83 	bl	80001a8 <HAL_GetTick>
 80008a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	0399      	lsls	r1, r3, #14
 80008a8:	d5b2      	bpl.n	8000810 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fc7d 	bl	80001a8 <HAL_GetTick>
 80008ae:	1b80      	subs	r0, r0, r6
 80008b0:	2864      	cmp	r0, #100	; 0x64
 80008b2:	d9f7      	bls.n	80008a4 <HAL_RCC_OscConfig+0xa0>
 80008b4:	e7e8      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	d103      	bne.n	80008c6 <HAL_RCC_OscConfig+0xc2>
 80008be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c2:	6023      	str	r3, [r4, #0]
 80008c4:	e7d1      	b.n	800086a <HAL_RCC_OscConfig+0x66>
 80008c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ca:	6023      	str	r3, [r4, #0]
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d2:	e7cd      	b.n	8000870 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008d4:	4c67      	ldr	r4, [pc, #412]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 80008d6:	6863      	ldr	r3, [r4, #4]
 80008d8:	f013 0f0c 	tst.w	r3, #12
 80008dc:	d007      	beq.n	80008ee <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008de:	6863      	ldr	r3, [r4, #4]
 80008e0:	f003 030c 	and.w	r3, r3, #12
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d110      	bne.n	800090a <HAL_RCC_OscConfig+0x106>
 80008e8:	6863      	ldr	r3, [r4, #4]
 80008ea:	03da      	lsls	r2, r3, #15
 80008ec:	d40d      	bmi.n	800090a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	079b      	lsls	r3, r3, #30
 80008f2:	d502      	bpl.n	80008fa <HAL_RCC_OscConfig+0xf6>
 80008f4:	692b      	ldr	r3, [r5, #16]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d1af      	bne.n	800085a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	696a      	ldr	r2, [r5, #20]
 80008fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000902:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000906:	6023      	str	r3, [r4, #0]
 8000908:	e785      	b.n	8000816 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800090a:	692a      	ldr	r2, [r5, #16]
 800090c:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <HAL_RCC_OscConfig+0x274>)
 800090e:	b16a      	cbz	r2, 800092c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000914:	f7ff fc48 	bl	80001a8 <HAL_GetTick>
 8000918:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	079f      	lsls	r7, r3, #30
 800091e:	d4ec      	bmi.n	80008fa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000920:	f7ff fc42 	bl	80001a8 <HAL_GetTick>
 8000924:	1b80      	subs	r0, r0, r6
 8000926:	2802      	cmp	r0, #2
 8000928:	d9f7      	bls.n	800091a <HAL_RCC_OscConfig+0x116>
 800092a:	e7ad      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800092c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800092e:	f7ff fc3b 	bl	80001a8 <HAL_GetTick>
 8000932:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	0798      	lsls	r0, r3, #30
 8000938:	f57f af6d 	bpl.w	8000816 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093c:	f7ff fc34 	bl	80001a8 <HAL_GetTick>
 8000940:	1b80      	subs	r0, r0, r6
 8000942:	2802      	cmp	r0, #2
 8000944:	d9f6      	bls.n	8000934 <HAL_RCC_OscConfig+0x130>
 8000946:	e79f      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000948:	69aa      	ldr	r2, [r5, #24]
 800094a:	4c4a      	ldr	r4, [pc, #296]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 800094c:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <HAL_RCC_OscConfig+0x278>)
 800094e:	b1da      	cbz	r2, 8000988 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000954:	f7ff fc28 	bl	80001a8 <HAL_GetTick>
 8000958:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800095a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800095c:	079b      	lsls	r3, r3, #30
 800095e:	d50d      	bpl.n	800097c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000960:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000964:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <HAL_RCC_OscConfig+0x27c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	fbb3 f3f2 	udiv	r3, r3, r2
 800096c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800096e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000970:	9b01      	ldr	r3, [sp, #4]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	9201      	str	r2, [sp, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f9      	bne.n	800096e <HAL_RCC_OscConfig+0x16a>
 800097a:	e750      	b.n	800081e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800097c:	f7ff fc14 	bl	80001a8 <HAL_GetTick>
 8000980:	1b80      	subs	r0, r0, r6
 8000982:	2802      	cmp	r0, #2
 8000984:	d9e9      	bls.n	800095a <HAL_RCC_OscConfig+0x156>
 8000986:	e77f      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000988:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800098a:	f7ff fc0d 	bl	80001a8 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000992:	079f      	lsls	r7, r3, #30
 8000994:	f57f af43 	bpl.w	800081e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000998:	f7ff fc06 	bl	80001a8 <HAL_GetTick>
 800099c:	1b80      	subs	r0, r0, r6
 800099e:	2802      	cmp	r0, #2
 80009a0:	d9f6      	bls.n	8000990 <HAL_RCC_OscConfig+0x18c>
 80009a2:	e771      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009a4:	4c33      	ldr	r4, [pc, #204]	; (8000a74 <HAL_RCC_OscConfig+0x270>)
 80009a6:	69e3      	ldr	r3, [r4, #28]
 80009a8:	00d8      	lsls	r0, r3, #3
 80009aa:	d424      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80009ac:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	69e3      	ldr	r3, [r4, #28]
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	61e3      	str	r3, [r4, #28]
 80009b6:	69e3      	ldr	r3, [r4, #28]
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c0:	4e30      	ldr	r6, [pc, #192]	; (8000a84 <HAL_RCC_OscConfig+0x280>)
 80009c2:	6833      	ldr	r3, [r6, #0]
 80009c4:	05d9      	lsls	r1, r3, #23
 80009c6:	d518      	bpl.n	80009fa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009c8:	68eb      	ldr	r3, [r5, #12]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d126      	bne.n	8000a1c <HAL_RCC_OscConfig+0x218>
 80009ce:	6a23      	ldr	r3, [r4, #32]
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009d6:	f7ff fbe7 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009da:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009de:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009e0:	6a23      	ldr	r3, [r4, #32]
 80009e2:	079b      	lsls	r3, r3, #30
 80009e4:	d53f      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	f43f af1d 	beq.w	8000826 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ec:	69e3      	ldr	r3, [r4, #28]
 80009ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009f2:	61e3      	str	r3, [r4, #28]
 80009f4:	e717      	b.n	8000826 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80009f6:	2700      	movs	r7, #0
 80009f8:	e7e2      	b.n	80009c0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009fa:	6833      	ldr	r3, [r6, #0]
 80009fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a00:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a02:	f7ff fbd1 	bl	80001a8 <HAL_GetTick>
 8000a06:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a08:	6833      	ldr	r3, [r6, #0]
 8000a0a:	05da      	lsls	r2, r3, #23
 8000a0c:	d4dc      	bmi.n	80009c8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a0e:	f7ff fbcb 	bl	80001a8 <HAL_GetTick>
 8000a12:	eba0 0008 	sub.w	r0, r0, r8
 8000a16:	2864      	cmp	r0, #100	; 0x64
 8000a18:	d9f6      	bls.n	8000a08 <HAL_RCC_OscConfig+0x204>
 8000a1a:	e735      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1c:	b9ab      	cbnz	r3, 8000a4a <HAL_RCC_OscConfig+0x246>
 8000a1e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a24:	f023 0301 	bic.w	r3, r3, #1
 8000a28:	6223      	str	r3, [r4, #32]
 8000a2a:	6a23      	ldr	r3, [r4, #32]
 8000a2c:	f023 0304 	bic.w	r3, r3, #4
 8000a30:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a32:	f7ff fbb9 	bl	80001a8 <HAL_GetTick>
 8000a36:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a38:	6a23      	ldr	r3, [r4, #32]
 8000a3a:	0798      	lsls	r0, r3, #30
 8000a3c:	d5d3      	bpl.n	80009e6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a3e:	f7ff fbb3 	bl	80001a8 <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	4540      	cmp	r0, r8
 8000a46:	d9f7      	bls.n	8000a38 <HAL_RCC_OscConfig+0x234>
 8000a48:	e71e      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a4a:	2b05      	cmp	r3, #5
 8000a4c:	6a23      	ldr	r3, [r4, #32]
 8000a4e:	d103      	bne.n	8000a58 <HAL_RCC_OscConfig+0x254>
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6223      	str	r3, [r4, #32]
 8000a56:	e7ba      	b.n	80009ce <HAL_RCC_OscConfig+0x1ca>
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	6223      	str	r3, [r4, #32]
 8000a5e:	6a23      	ldr	r3, [r4, #32]
 8000a60:	f023 0304 	bic.w	r3, r3, #4
 8000a64:	e7b6      	b.n	80009d4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a66:	f7ff fb9f 	bl	80001a8 <HAL_GetTick>
 8000a6a:	eba0 0008 	sub.w	r0, r0, r8
 8000a6e:	42b0      	cmp	r0, r6
 8000a70:	d9b6      	bls.n	80009e0 <HAL_RCC_OscConfig+0x1dc>
 8000a72:	e709      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
 8000a74:	40021000 	.word	0x40021000
 8000a78:	42420000 	.word	0x42420000
 8000a7c:	42420480 	.word	0x42420480
 8000a80:	20000004 	.word	0x20000004
 8000a84:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a88:	4c22      	ldr	r4, [pc, #136]	; (8000b14 <HAL_RCC_OscConfig+0x310>)
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	f003 030c 	and.w	r3, r3, #12
 8000a90:	2b08      	cmp	r3, #8
 8000a92:	f43f aee2 	beq.w	800085a <HAL_RCC_OscConfig+0x56>
 8000a96:	2300      	movs	r3, #0
 8000a98:	4e1f      	ldr	r6, [pc, #124]	; (8000b18 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a9a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a9c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a9e:	d12b      	bne.n	8000af8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fb82 	bl	80001a8 <HAL_GetTick>
 8000aa4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	0199      	lsls	r1, r3, #6
 8000aaa:	d41f      	bmi.n	8000aec <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000aac:	6a2b      	ldr	r3, [r5, #32]
 8000aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab2:	d105      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ab4:	6862      	ldr	r2, [r4, #4]
 8000ab6:	68a9      	ldr	r1, [r5, #8]
 8000ab8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000abc:	430a      	orrs	r2, r1
 8000abe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ac0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ac2:	6862      	ldr	r2, [r4, #4]
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000aca:	4313      	orrs	r3, r2
 8000acc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ace:	2301      	movs	r3, #1
 8000ad0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ad2:	f7ff fb69 	bl	80001a8 <HAL_GetTick>
 8000ad6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	019a      	lsls	r2, r3, #6
 8000adc:	f53f aea7 	bmi.w	800082e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae0:	f7ff fb62 	bl	80001a8 <HAL_GetTick>
 8000ae4:	1b40      	subs	r0, r0, r5
 8000ae6:	2802      	cmp	r0, #2
 8000ae8:	d9f6      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x2d4>
 8000aea:	e6cd      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aec:	f7ff fb5c 	bl	80001a8 <HAL_GetTick>
 8000af0:	1bc0      	subs	r0, r0, r7
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9d7      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x2a2>
 8000af6:	e6c7      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000af8:	f7ff fb56 	bl	80001a8 <HAL_GetTick>
 8000afc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	019b      	lsls	r3, r3, #6
 8000b02:	f57f ae94 	bpl.w	800082e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b06:	f7ff fb4f 	bl	80001a8 <HAL_GetTick>
 8000b0a:	1b40      	subs	r0, r0, r5
 8000b0c:	2802      	cmp	r0, #2
 8000b0e:	d9f6      	bls.n	8000afe <HAL_RCC_OscConfig+0x2fa>
 8000b10:	e6ba      	b.n	8000888 <HAL_RCC_OscConfig+0x84>
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	42420060 	.word	0x42420060

08000b1c <HAL_RCC_GetSysClockFreq>:
{
 8000b1c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000b20:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b22:	ac02      	add	r4, sp, #8
 8000b24:	f103 0510 	add.w	r5, r3, #16
 8000b28:	4622      	mov	r2, r4
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	6859      	ldr	r1, [r3, #4]
 8000b2e:	3308      	adds	r3, #8
 8000b30:	c203      	stmia	r2!, {r0, r1}
 8000b32:	42ab      	cmp	r3, r5
 8000b34:	4614      	mov	r4, r2
 8000b36:	d1f7      	bne.n	8000b28 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000b3e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000b40:	4912      	ldr	r1, [pc, #72]	; (8000b8c <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b42:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000b46:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b48:	f003 020c 	and.w	r2, r3, #12
 8000b4c:	2a08      	cmp	r2, #8
 8000b4e:	d118      	bne.n	8000b82 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b50:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b54:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b56:	bf48      	it	mi
 8000b58:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b5a:	a806      	add	r0, sp, #24
 8000b5c:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b5e:	bf48      	it	mi
 8000b60:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b64:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b68:	bf41      	itttt	mi
 8000b6a:	aa06      	addmi	r2, sp, #24
 8000b6c:	189b      	addmi	r3, r3, r2
 8000b6e:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000b72:	4b07      	ldrmi	r3, [pc, #28]	; (8000b90 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b74:	bf54      	ite	pl
 8000b76:	4b07      	ldrpl	r3, [pc, #28]	; (8000b94 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000b78:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b7c:	4358      	muls	r0, r3
}
 8000b7e:	b007      	add	sp, #28
 8000b80:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000b84:	e7fb      	b.n	8000b7e <HAL_RCC_GetSysClockFreq+0x62>
 8000b86:	bf00      	nop
 8000b88:	08002304 	.word	0x08002304
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	007a1200 	.word	0x007a1200
 8000b94:	003d0900 	.word	0x003d0900

08000b98 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b98:	4a4d      	ldr	r2, [pc, #308]	; (8000cd0 <HAL_RCC_ClockConfig+0x138>)
{
 8000b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b9e:	6813      	ldr	r3, [r2, #0]
{
 8000ba0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	428b      	cmp	r3, r1
{
 8000ba8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000baa:	d328      	bcc.n	8000bfe <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bac:	682a      	ldr	r2, [r5, #0]
 8000bae:	0791      	lsls	r1, r2, #30
 8000bb0:	d432      	bmi.n	8000c18 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bb2:	07d2      	lsls	r2, r2, #31
 8000bb4:	d438      	bmi.n	8000c28 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bb6:	4a46      	ldr	r2, [pc, #280]	; (8000cd0 <HAL_RCC_ClockConfig+0x138>)
 8000bb8:	6813      	ldr	r3, [r2, #0]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	d373      	bcc.n	8000caa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bc2:	682a      	ldr	r2, [r5, #0]
 8000bc4:	4c43      	ldr	r4, [pc, #268]	; (8000cd4 <HAL_RCC_ClockConfig+0x13c>)
 8000bc6:	f012 0f04 	tst.w	r2, #4
 8000bca:	d179      	bne.n	8000cc0 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bcc:	0713      	lsls	r3, r2, #28
 8000bce:	d506      	bpl.n	8000bde <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bd0:	6863      	ldr	r3, [r4, #4]
 8000bd2:	692a      	ldr	r2, [r5, #16]
 8000bd4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bd8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bdc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bde:	f7ff ff9d 	bl	8000b1c <HAL_RCC_GetSysClockFreq>
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	4a3c      	ldr	r2, [pc, #240]	; (8000cd8 <HAL_RCC_ClockConfig+0x140>)
 8000be6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bea:	5cd3      	ldrb	r3, [r2, r3]
 8000bec:	40d8      	lsrs	r0, r3
 8000bee:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <HAL_RCC_ClockConfig+0x144>)
 8000bf0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff faaa 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000bf8:	2000      	movs	r0, #0
}
 8000bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	f023 0307 	bic.w	r3, r3, #7
 8000c04:	430b      	orrs	r3, r1
 8000c06:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c08:	6813      	ldr	r3, [r2, #0]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	d0cc      	beq.n	8000bac <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c12:	2001      	movs	r0, #1
 8000c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c18:	492e      	ldr	r1, [pc, #184]	; (8000cd4 <HAL_RCC_ClockConfig+0x13c>)
 8000c1a:	68a8      	ldr	r0, [r5, #8]
 8000c1c:	684b      	ldr	r3, [r1, #4]
 8000c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c22:	4303      	orrs	r3, r0
 8000c24:	604b      	str	r3, [r1, #4]
 8000c26:	e7c4      	b.n	8000bb2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c28:	686a      	ldr	r2, [r5, #4]
 8000c2a:	4c2a      	ldr	r4, [pc, #168]	; (8000cd4 <HAL_RCC_ClockConfig+0x13c>)
 8000c2c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2e:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c30:	d11c      	bne.n	8000c6c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c32:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c36:	d0ec      	beq.n	8000c12 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c38:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c3e:	f023 0303 	bic.w	r3, r3, #3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000c46:	f7ff faaf 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c4a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000c4c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d114      	bne.n	8000c7c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c52:	6863      	ldr	r3, [r4, #4]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d0ac      	beq.n	8000bb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c5c:	f7ff faa4 	bl	80001a8 <HAL_GetTick>
 8000c60:	1bc0      	subs	r0, r0, r7
 8000c62:	4540      	cmp	r0, r8
 8000c64:	d9f5      	bls.n	8000c52 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000c66:	2003      	movs	r0, #3
 8000c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c6c:	2a02      	cmp	r2, #2
 8000c6e:	d102      	bne.n	8000c76 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c74:	e7df      	b.n	8000c36 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c76:	f013 0f02 	tst.w	r3, #2
 8000c7a:	e7dc      	b.n	8000c36 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d10f      	bne.n	8000ca0 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d095      	beq.n	8000bb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c8a:	f7ff fa8d 	bl	80001a8 <HAL_GetTick>
 8000c8e:	1bc0      	subs	r0, r0, r7
 8000c90:	4540      	cmp	r0, r8
 8000c92:	d9f5      	bls.n	8000c80 <HAL_RCC_ClockConfig+0xe8>
 8000c94:	e7e7      	b.n	8000c66 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c96:	f7ff fa87 	bl	80001a8 <HAL_GetTick>
 8000c9a:	1bc0      	subs	r0, r0, r7
 8000c9c:	4540      	cmp	r0, r8
 8000c9e:	d8e2      	bhi.n	8000c66 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca0:	6863      	ldr	r3, [r4, #4]
 8000ca2:	f013 0f0c 	tst.w	r3, #12
 8000ca6:	d1f6      	bne.n	8000c96 <HAL_RCC_ClockConfig+0xfe>
 8000ca8:	e785      	b.n	8000bb6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	f023 0307 	bic.w	r3, r3, #7
 8000cb0:	4333      	orrs	r3, r6
 8000cb2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cb4:	6813      	ldr	r3, [r2, #0]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	d1a9      	bne.n	8000c12 <HAL_RCC_ClockConfig+0x7a>
 8000cbe:	e780      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	68e9      	ldr	r1, [r5, #12]
 8000cc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6063      	str	r3, [r4, #4]
 8000ccc:	e77e      	b.n	8000bcc <HAL_RCC_ClockConfig+0x34>
 8000cce:	bf00      	nop
 8000cd0:	40022000 	.word	0x40022000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	08007695 	.word	0x08007695
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_RCC_GetHCLKFreq>:
}
 8000ce0:	4b01      	ldr	r3, [pc, #4]	; (8000ce8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000cec:	6803      	ldr	r3, [r0, #0]
{
 8000cee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000cf2:	07d9      	lsls	r1, r3, #31
{
 8000cf4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000cf6:	d520      	bpl.n	8000d3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf8:	4c35      	ldr	r4, [pc, #212]	; (8000dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000cfa:	69e3      	ldr	r3, [r4, #28]
 8000cfc:	00da      	lsls	r2, r3, #3
 8000cfe:	d432      	bmi.n	8000d66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000d00:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	69e3      	ldr	r3, [r4, #28]
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	61e3      	str	r3, [r4, #28]
 8000d0a:	69e3      	ldr	r3, [r4, #28]
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d14:	4e2f      	ldr	r6, [pc, #188]	; (8000dd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000d16:	6833      	ldr	r3, [r6, #0]
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	d526      	bpl.n	8000d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d1c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d1e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000d22:	d136      	bne.n	8000d92 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000d24:	6a23      	ldr	r3, [r4, #32]
 8000d26:	686a      	ldr	r2, [r5, #4]
 8000d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d30:	b11f      	cbz	r7, 8000d3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d32:	69e3      	ldr	r3, [r4, #28]
 8000d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d38:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000d3a:	6828      	ldr	r0, [r5, #0]
 8000d3c:	0783      	lsls	r3, r0, #30
 8000d3e:	d506      	bpl.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000d40:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d42:	68a9      	ldr	r1, [r5, #8]
 8000d44:	6853      	ldr	r3, [r2, #4]
 8000d46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d4e:	f010 0010 	ands.w	r0, r0, #16
 8000d52:	d01b      	beq.n	8000d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d56:	68e9      	ldr	r1, [r5, #12]
 8000d58:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000d5a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6053      	str	r3, [r2, #4]
 8000d64:	e012      	b.n	8000d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000d66:	2700      	movs	r7, #0
 8000d68:	e7d4      	b.n	8000d14 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d6a:	6833      	ldr	r3, [r6, #0]
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d72:	f7ff fa19 	bl	80001a8 <HAL_GetTick>
 8000d76:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d78:	6833      	ldr	r3, [r6, #0]
 8000d7a:	05d8      	lsls	r0, r3, #23
 8000d7c:	d4ce      	bmi.n	8000d1c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d7e:	f7ff fa13 	bl	80001a8 <HAL_GetTick>
 8000d82:	eba0 0008 	sub.w	r0, r0, r8
 8000d86:	2864      	cmp	r0, #100	; 0x64
 8000d88:	d9f6      	bls.n	8000d78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000d8a:	2003      	movs	r0, #3
}
 8000d8c:	b002      	add	sp, #8
 8000d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d92:	686a      	ldr	r2, [r5, #4]
 8000d94:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d0c3      	beq.n	8000d24 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000da0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000da2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000da4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000daa:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000dac:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000dae:	07d9      	lsls	r1, r3, #31
 8000db0:	d5b8      	bpl.n	8000d24 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000db2:	f7ff f9f9 	bl	80001a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000dba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dbc:	6a23      	ldr	r3, [r4, #32]
 8000dbe:	079a      	lsls	r2, r3, #30
 8000dc0:	d4b0      	bmi.n	8000d24 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff f9f1 	bl	80001a8 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	4540      	cmp	r0, r8
 8000dca:	d9f7      	bls.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000dcc:	e7dd      	b.n	8000d8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40007000 	.word	0x40007000
 8000dd8:	42420440 	.word	0x42420440

08000ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000de0:	4604      	mov	r4, r0
 8000de2:	4688      	mov	r8, r1
 8000de4:	4617      	mov	r7, r2
 8000de6:	461d      	mov	r5, r3
 8000de8:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	6893      	ldr	r3, [r2, #8]
 8000dee:	ea38 0303 	bics.w	r3, r8, r3
 8000df2:	bf0c      	ite	eq
 8000df4:	2301      	moveq	r3, #1
 8000df6:	2300      	movne	r3, #0
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	d102      	bne.n	8000e02 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000dfc:	2000      	movs	r0, #0
}
 8000dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e02:	1c6b      	adds	r3, r5, #1
 8000e04:	d0f2      	beq.n	8000dec <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e06:	bb55      	cbnz	r5, 8000e5e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e10:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e12:	6862      	ldr	r2, [r4, #4]
 8000e14:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000e18:	d10a      	bne.n	8000e30 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000e1a:	68a2      	ldr	r2, [r4, #8]
 8000e1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e20:	d002      	beq.n	8000e28 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000e22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e26:	d103      	bne.n	8000e30 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e2e:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e32:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e36:	d109      	bne.n	8000e4c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e3e:	0412      	lsls	r2, r2, #16
 8000e40:	0c12      	lsrs	r2, r2, #16
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e4a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e52:	2300      	movs	r3, #0
 8000e54:	2003      	movs	r0, #3
 8000e56:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e5e:	f7ff f9a3 	bl	80001a8 <HAL_GetTick>
 8000e62:	1b80      	subs	r0, r0, r6
 8000e64:	4285      	cmp	r5, r0
 8000e66:	d8c0      	bhi.n	8000dea <SPI_WaitFlagStateUntilTimeout+0xe>
 8000e68:	e7ce      	b.n	8000e08 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000e6a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e6a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	2200      	movs	r2, #0
{
 8000e74:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e76:	f7ff ffb1 	bl	8000ddc <SPI_WaitFlagStateUntilTimeout>
 8000e7a:	b120      	cbz	r0, 8000e86 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000e7c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000e86:	b002      	add	sp, #8
 8000e88:	bd10      	pop	{r4, pc}

08000e8a <HAL_SPI_Transmit>:
{
 8000e8a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000e8e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000e90:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000e94:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000e96:	2b01      	cmp	r3, #1
{
 8000e98:	460d      	mov	r5, r1
 8000e9a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000e9c:	f000 809c 	beq.w	8000fd8 <HAL_SPI_Transmit+0x14e>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000ea6:	f7ff f97f 	bl	80001a8 <HAL_GetTick>
 8000eaa:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000eac:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000eb0:	b2c0      	uxtb	r0, r0
 8000eb2:	2801      	cmp	r0, #1
 8000eb4:	f040 808e 	bne.w	8000fd4 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8000eb8:	2d00      	cmp	r5, #0
 8000eba:	d04e      	beq.n	8000f5a <HAL_SPI_Transmit+0xd0>
 8000ebc:	f1b8 0f00 	cmp.w	r8, #0
 8000ec0:	d04b      	beq.n	8000f5a <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000ecc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000ece:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000ed2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000ed4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000ed6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000ed8:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000eda:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000edc:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ee2:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000ee4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000ee8:	bf02      	ittt	eq
 8000eea:	681a      	ldreq	r2, [r3, #0]
 8000eec:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000ef0:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ef6:	bf5e      	ittt	pl
 8000ef8:	681a      	ldrpl	r2, [r3, #0]
 8000efa:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000efe:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f00:	68e2      	ldr	r2, [r4, #12]
 8000f02:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f06:	6862      	ldr	r2, [r4, #4]
 8000f08:	d138      	bne.n	8000f7c <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000f0a:	b11a      	cbz	r2, 8000f14 <HAL_SPI_Transmit+0x8a>
 8000f0c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	2a01      	cmp	r2, #1
 8000f12:	d106      	bne.n	8000f22 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000f14:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f18:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000f1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b993      	cbnz	r3, 8000f4e <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000f28:	9700      	str	r7, [sp, #0]
 8000f2a:	4633      	mov	r3, r6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff ff53 	bl	8000ddc <SPI_WaitFlagStateUntilTimeout>
 8000f36:	b978      	cbnz	r0, 8000f58 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000f38:	463a      	mov	r2, r7
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff ff94 	bl	8000e6a <SPI_CheckFlag_BSY>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d038      	beq.n	8000fb8 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f46:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f4a:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8000f4c:	e005      	b.n	8000f5a <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	0790      	lsls	r0, r2, #30
 8000f54:	d4de      	bmi.n	8000f14 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f56:	b94e      	cbnz	r6, 8000f6c <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f60:	2300      	movs	r3, #0
 8000f62:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f66:	b004      	add	sp, #16
 8000f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f6c:	1c71      	adds	r1, r6, #1
 8000f6e:	d0d8      	beq.n	8000f22 <HAL_SPI_Transmit+0x98>
 8000f70:	f7ff f91a 	bl	80001a8 <HAL_GetTick>
 8000f74:	1bc0      	subs	r0, r0, r7
 8000f76:	4286      	cmp	r6, r0
 8000f78:	d8d3      	bhi.n	8000f22 <HAL_SPI_Transmit+0x98>
 8000f7a:	e7ed      	b.n	8000f58 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000f7c:	b11a      	cbz	r2, 8000f86 <HAL_SPI_Transmit+0xfc>
 8000f7e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f80:	b292      	uxth	r2, r2
 8000f82:	2a01      	cmp	r2, #1
 8000f84:	d106      	bne.n	8000f94 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000f86:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000f8a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000f8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0c5      	beq.n	8000f28 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	0792      	lsls	r2, r2, #30
 8000fa2:	d4f0      	bmi.n	8000f86 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d0d7      	beq.n	8000f58 <HAL_SPI_Transmit+0xce>
 8000fa8:	1c73      	adds	r3, r6, #1
 8000faa:	d0f3      	beq.n	8000f94 <HAL_SPI_Transmit+0x10a>
 8000fac:	f7ff f8fc 	bl	80001a8 <HAL_GetTick>
 8000fb0:	1bc0      	subs	r0, r0, r7
 8000fb2:	4286      	cmp	r6, r0
 8000fb4:	d8ee      	bhi.n	8000f94 <HAL_SPI_Transmit+0x10a>
 8000fb6:	e7cf      	b.n	8000f58 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fb8:	68a3      	ldr	r3, [r4, #8]
 8000fba:	b933      	cbnz	r3, 8000fca <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	9203      	str	r2, [sp, #12]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	9303      	str	r3, [sp, #12]
 8000fc8:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000fcc:	3000      	adds	r0, #0
 8000fce:	bf18      	it	ne
 8000fd0:	2001      	movne	r0, #1
 8000fd2:	e7c2      	b.n	8000f5a <HAL_SPI_Transmit+0xd0>
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	e7c0      	b.n	8000f5a <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	e7c4      	b.n	8000f66 <HAL_SPI_Transmit+0xdc>

08000fdc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000fdc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000fde:	4604      	mov	r4, r0
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d034      	beq.n	800104e <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000fe8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000fec:	b90b      	cbnz	r3, 8000ff2 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000fee:	f000 fb9f 	bl	8001730 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ff2:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000ff4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ff6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ffa:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ffc:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001002:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001004:	6863      	ldr	r3, [r4, #4]
 8001006:	69a2      	ldr	r2, [r4, #24]
 8001008:	4303      	orrs	r3, r0
 800100a:	68e0      	ldr	r0, [r4, #12]
 800100c:	4303      	orrs	r3, r0
 800100e:	6920      	ldr	r0, [r4, #16]
 8001010:	4303      	orrs	r3, r0
 8001012:	6960      	ldr	r0, [r4, #20]
 8001014:	4303      	orrs	r3, r0
 8001016:	69e0      	ldr	r0, [r4, #28]
 8001018:	4303      	orrs	r3, r0
 800101a:	6a20      	ldr	r0, [r4, #32]
 800101c:	4303      	orrs	r3, r0
 800101e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001020:	4303      	orrs	r3, r0
 8001022:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001026:	4303      	orrs	r3, r0
 8001028:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800102a:	0c12      	lsrs	r2, r2, #16
 800102c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800102e:	f002 0204 	and.w	r2, r2, #4
 8001032:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001034:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001036:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001038:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800103a:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800103c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800103e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001042:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001044:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001046:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001048:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 800104c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
}
 8001050:	bd10      	pop	{r4, pc}
	...

08001054 <OledSetCursor>:
OledSetCursor(int xch, int ych)
	{

	/* Clamp the specified location to the display surface
	*/
	if (xch >= xchOledMax) {
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <OledSetCursor+0x30>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4283      	cmp	r3, r0
		xch = xchOledMax-1;
 800105a:	bfd8      	it	le
 800105c:	f103 30ff 	addle.w	r0, r3, #4294967295
	}

	if (ych >= ychOledMax) {
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <OledSetCursor+0x34>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	428b      	cmp	r3, r1
		ych = ychOledMax-1;
 8001066:	bfd8      	it	le
 8001068:	f103 31ff 	addle.w	r1, r3, #4294967295
	}

	/* Save the given character location.
	*/
	xchOledCur = xch;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <OledSetCursor+0x38>)
 800106e:	6018      	str	r0, [r3, #0]
	ychOledCur = ych;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <OledSetCursor+0x3c>)
 8001072:	6019      	str	r1, [r3, #0]

	/* Convert the character location to a frame buffer address.
	*/
	OledMoveTo(xch*dxcoOledFontCur, ych*dycoOledFontCur);
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <OledSetCursor+0x40>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <OledSetCursor+0x44>)
 800107a:	4351      	muls	r1, r2
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4358      	muls	r0, r3
 8001080:	f000 b99c 	b.w	80013bc <OledMoveTo>
 8001084:	2000020c 	.word	0x2000020c
 8001088:	2000031c 	.word	0x2000031c
 800108c:	20000210 	.word	0x20000210
 8001090:	20000214 	.word	0x20000214
 8001094:	20000534 	.word	0x20000534
 8001098:	20000538 	.word	0x20000538

0800109c <OledDrawGlyph>:
	{
	uint8_t *	pbFont;
	uint8_t *	pbBmp;
	int		ib;

	if ((ch & 0x80) != 0) {
 800109c:	0603      	lsls	r3, r0, #24
	{
 800109e:	b530      	push	{r4, r5, lr}
	if ((ch & 0x80) != 0) {
 80010a0:	d415      	bmi.n	80010ce <OledDrawGlyph+0x32>
		return;
	}

	if (ch < chOledUserMax) {
 80010a2:	281f      	cmp	r0, #31
		pbFont = pbOledFontUser + ch*cbOledChar;
 80010a4:	bf93      	iteet	ls
 80010a6:	4b0d      	ldrls	r3, [pc, #52]	; (80010dc <OledDrawGlyph+0x40>)
	}
	else if ((ch & 0x80) == 0) {
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
 80010a8:	4a0d      	ldrhi	r2, [pc, #52]	; (80010e0 <OledDrawGlyph+0x44>)
 80010aa:	f1a0 0320 	subhi.w	r3, r0, #32
		pbFont = pbOledFontUser + ch*cbOledChar;
 80010ae:	681b      	ldrls	r3, [r3, #0]
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
 80010b0:	bf8a      	itet	hi
 80010b2:	6810      	ldrhi	r0, [r2, #0]
		pbFont = pbOledFontUser + ch*cbOledChar;
 80010b4:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
 80010b8:	eb00 00c3 	addhi.w	r0, r0, r3, lsl #3
	}

	pbBmp = pbOledCur;

	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 80010bc:	4601      	mov	r1, r0
	pbBmp = pbOledCur;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <OledDrawGlyph+0x48>)
	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 80010c0:	4d09      	ldr	r5, [pc, #36]	; (80010e8 <OledDrawGlyph+0x4c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	682c      	ldr	r4, [r5, #0]
 80010c8:	1a0a      	subs	r2, r1, r0
 80010ca:	4294      	cmp	r4, r2
 80010cc:	dc00      	bgt.n	80010d0 <OledDrawGlyph+0x34>
 80010ce:	bd30      	pop	{r4, r5, pc}
		*pbBmp++ = *pbFont++;
 80010d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80010d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010d8:	e7f5      	b.n	80010c6 <OledDrawGlyph+0x2a>
 80010da:	bf00      	nop
 80010dc:	20000544 	.word	0x20000544
 80010e0:	20000530 	.word	0x20000530
 80010e4:	20000528 	.word	0x20000528
 80010e8:	20000538 	.word	0x20000538

080010ec <OledAdvanceCursor>:

void
OledAdvanceCursor()
	{

	xchOledCur += 1;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <OledAdvanceCursor+0x34>)
	if (xchOledCur >= xchOledMax) {
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <OledAdvanceCursor+0x38>)
	xchOledCur += 1;
 80010f0:	681a      	ldr	r2, [r3, #0]
	if (xchOledCur >= xchOledMax) {
 80010f2:	6809      	ldr	r1, [r1, #0]
	xchOledCur += 1;
 80010f4:	3201      	adds	r2, #1
	if (xchOledCur >= xchOledMax) {
 80010f6:	428a      	cmp	r2, r1
	xchOledCur += 1;
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <OledAdvanceCursor+0x3c>)
	if (xchOledCur >= xchOledMax) {
 80010fc:	db04      	blt.n	8001108 <OledAdvanceCursor+0x1c>
		xchOledCur = 0;
 80010fe:	2100      	movs	r1, #0
 8001100:	6019      	str	r1, [r3, #0]
		ychOledCur += 1;
 8001102:	6811      	ldr	r1, [r2, #0]
 8001104:	3101      	adds	r1, #1
 8001106:	6011      	str	r1, [r2, #0]
	}
	if (ychOledCur >= ychOledMax) {
 8001108:	4908      	ldr	r1, [pc, #32]	; (800112c <OledAdvanceCursor+0x40>)
 800110a:	6810      	ldr	r0, [r2, #0]
 800110c:	6809      	ldr	r1, [r1, #0]
 800110e:	4288      	cmp	r0, r1
		ychOledCur = 0;
 8001110:	bfa4      	itt	ge
 8001112:	2100      	movge	r1, #0
 8001114:	6011      	strge	r1, [r2, #0]
	}

	OledSetCursor(xchOledCur, ychOledCur);
 8001116:	6811      	ldr	r1, [r2, #0]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	f7ff bf9b 	b.w	8001054 <OledSetCursor>
 800111e:	bf00      	nop
 8001120:	20000210 	.word	0x20000210
 8001124:	2000020c 	.word	0x2000020c
 8001128:	20000214 	.word	0x20000214
 800112c:	2000031c 	.word	0x2000031c

08001130 <OledPutString>:
	{
 8001130:	b510      	push	{r4, lr}
 8001132:	1e44      	subs	r4, r0, #1
	while (*sz != '\0') {
 8001134:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001138:	b930      	cbnz	r0, 8001148 <OledPutString+0x18>
	if (fOledCharUpdate) {
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <OledPutString+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b143      	cbz	r3, 8001152 <OledPutString+0x22>
}
 8001140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		OledUpdate();
 8001144:	f000 b8d2 	b.w	80012ec <OledUpdate>
		OledDrawGlyph(*sz);
 8001148:	f7ff ffa8 	bl	800109c <OledDrawGlyph>
		OledAdvanceCursor();
 800114c:	f7ff ffce 	bl	80010ec <OledAdvanceCursor>
 8001150:	e7f0      	b.n	8001134 <OledPutString+0x4>
 8001152:	bd10      	pop	{r4, pc}
 8001154:	2000053c 	.word	0x2000053c

08001158 <OledDvrInit>:
	{
	int		ib;

	/* Init the parameters for the default font
	*/
	dxcoOledFontCur = cbOledChar;
 8001158:	2308      	movs	r3, #8
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <OledDvrInit+0x54>)
	{
 800115c:	b510      	push	{r4, lr}
	dxcoOledFontCur = cbOledChar;
 800115e:	6013      	str	r3, [r2, #0]
	dycoOledFontCur = 8;
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <OledDvrInit+0x58>)
 8001162:	6013      	str	r3, [r2, #0]
	pbOledFontCur = (uint8_t*)rgbOledFont0;
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <OledDvrInit+0x5c>)
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <OledDvrInit+0x60>)
 8001168:	601a      	str	r2, [r3, #0]
	pbOledFontUser = rgbOledFontUser;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <OledDvrInit+0x64>)
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <OledDvrInit+0x68>)
 800116e:	601a      	str	r2, [r3, #0]

	for (ib = 0; ib < cbOledFontUser; ib++) {
 8001170:	2300      	movs	r3, #0
		rgbOledFontUser[ib] = 0;
 8001172:	4619      	mov	r1, r3
 8001174:	54d1      	strb	r1, [r2, r3]
	for (ib = 0; ib < cbOledFontUser; ib++) {
 8001176:	3301      	adds	r3, #1
 8001178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800117c:	d1fa      	bne.n	8001174 <OledDvrInit+0x1c>
	}

	xchOledMax = ccolOledMax / dxcoOledFontCur;
 800117e:	2210      	movs	r2, #16
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <OledDvrInit+0x6c>)
	ychOledMax = crowOledMax / dycoOledFontCur;

	/* Set the default character cursor position.
	*/
	OledSetCursor(0, 0);
 8001182:	2100      	movs	r1, #0
	xchOledMax = ccolOledMax / dxcoOledFontCur;
 8001184:	601a      	str	r2, [r3, #0]
	ychOledMax = crowOledMax / dycoOledFontCur;
 8001186:	2204      	movs	r2, #4

	/* Set the default foreground draw color and fill pattern
	*/
	clrOledCur = 0x01;
 8001188:	2401      	movs	r4, #1
	ychOledMax = crowOledMax / dycoOledFontCur;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <OledDvrInit+0x70>)
	OledSetCursor(0, 0);
 800118c:	4608      	mov	r0, r1
	ychOledMax = crowOledMax / dycoOledFontCur;
 800118e:	601a      	str	r2, [r3, #0]
	OledSetCursor(0, 0);
 8001190:	f7ff ff60 	bl	8001054 <OledSetCursor>
	clrOledCur = 0x01;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <OledDvrInit+0x74>)
	pbOledPatCur = (uint8_t*)rgbFillPat;
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <OledDvrInit+0x78>)
	clrOledCur = 0x01;
 8001198:	701c      	strb	r4, [r3, #0]
	pbOledPatCur = (uint8_t*)rgbFillPat;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <OledDvrInit+0x7c>)
	OledSetDrawMode(modOledSet);
 800119c:	2000      	movs	r0, #0
	pbOledPatCur = (uint8_t*)rgbFillPat;
 800119e:	601a      	str	r2, [r3, #0]
	OledSetDrawMode(modOledSet);
 80011a0:	f000 f8e6 	bl	8001370 <OledSetDrawMode>

	/* Default the character routines to automaticall
	** update the display.
	*/
	fOledCharUpdate = 1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <OledDvrInit+0x80>)
 80011a6:	601c      	str	r4, [r3, #0]
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	bf00      	nop
 80011ac:	20000538 	.word	0x20000538
 80011b0:	20000534 	.word	0x20000534
 80011b4:	08002314 	.word	0x08002314
 80011b8:	20000530 	.word	0x20000530
 80011bc:	20000544 	.word	0x20000544
 80011c0:	20000218 	.word	0x20000218
 80011c4:	2000020c 	.word	0x2000020c
 80011c8:	2000031c 	.word	0x2000031c
 80011cc:	20000540 	.word	0x20000540
 80011d0:	08002614 	.word	0x08002614
 80011d4:	2000052c 	.word	0x2000052c
 80011d8:	2000053c 	.word	0x2000053c

080011dc <OledClearBuffer>:

	pb = rgbOledBmp;

	/* Fill the memory buffer with 0.
	*/
	for (ib = 0; ib < cbOledDispMax; ib++) {
 80011dc:	2300      	movs	r3, #0
		*pb++ = 0x00;
 80011de:	4619      	mov	r1, r3
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <OledClearBuffer+0x14>)
 80011e2:	5499      	strb	r1, [r3, r2]
	for (ib = 0; ib < cbOledDispMax; ib++) {
 80011e4:	3301      	adds	r3, #1
 80011e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ea:	d1fa      	bne.n	80011e2 <OledClearBuffer+0x6>
	}

}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000324 	.word	0x20000324

080011f4 <OledPutBuffer>:
**		Send the bytes specified in rgbTx to the slave and return
**		the bytes read from the slave in rgbRx
*/
void
OledPutBuffer(int cb, uint8_t * rgbTx)
	{
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	4605      	mov	r5, r0
 80011f8:	460e      	mov	r6, r1
	int		ib;
	uint8_t	bTmp;

	/* Write/Read the data
	*/
	for (ib = 0; ib < cb; ib++) {
 80011fa:	2400      	movs	r4, #0

	    HAL_SPI_Transmit(&hspi1, rgbTx, 1, HAL_MAX_DELAY);
 80011fc:	4f06      	ldr	r7, [pc, #24]	; (8001218 <OledPutBuffer+0x24>)
	for (ib = 0; ib < cb; ib++) {
 80011fe:	42ac      	cmp	r4, r5
 8001200:	eb06 0104 	add.w	r1, r6, r4
 8001204:	db00      	blt.n	8001208 <OledPutBuffer+0x14>
	    rgbTx++;
		//bTmp = spiCon.transfer(*rgbTx++);

	}

}
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    HAL_SPI_Transmit(&hspi1, rgbTx, 1, HAL_MAX_DELAY);
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	2201      	movs	r2, #1
 800120e:	4638      	mov	r0, r7
 8001210:	f7ff fe3b 	bl	8000e8a <HAL_SPI_Transmit>
	for (ib = 0; ib < cb; ib++) {
 8001214:	3401      	adds	r4, #1
 8001216:	e7f2      	b.n	80011fe <OledPutBuffer+0xa>
 8001218:	200005a8 	.word	0x200005a8

0800121c <Spi2PutByte>:
**	Description:
**		Write/Read a byte on SPI port 2
*/
uint8_t
Spi2PutByte(uint8_t bVal)
	{
 800121c:	b507      	push	{r0, r1, r2, lr}
 800121e:	a902      	add	r1, sp, #8
 8001220:	f801 0d01 	strb.w	r0, [r1, #-1]!
	uint8_t	bRx;

    HAL_SPI_Transmit(&hspi1, &bVal, 1, HAL_MAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2201      	movs	r2, #1
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <Spi2PutByte+0x1c>)
 800122c:	f7ff fe2d 	bl	8000e8a <HAL_SPI_Transmit>

	// bRx = spiCon.transfer(bVal);
	
	//return bRx;
}
 8001230:	b003      	add	sp, #12
 8001232:	f85d fb04 	ldr.w	pc, [sp], #4
 8001236:	bf00      	nop
 8001238:	200005a8 	.word	0x200005a8

0800123c <digitalWrite>:

void digitalWrite(uint16_t mypin, unsigned char cLevel){
	
	
	HAL_GPIO_WritePin(GPIOA, mypin, cLevel);
 800123c:	460a      	mov	r2, r1
 800123e:	4601      	mov	r1, r0
 8001240:	4801      	ldr	r0, [pc, #4]	; (8001248 <digitalWrite+0xc>)
 8001242:	f7ff bad9 	b.w	80007f8 <HAL_GPIO_WritePin>
 8001246:	bf00      	nop
 8001248:	40010800 	.word	0x40010800

0800124c <OledHostInit>:
	{
 800124c:	b508      	push	{r3, lr}
	digitalWrite(DataCmd, HIGH);
 800124e:	2101      	movs	r1, #1
 8001250:	2002      	movs	r0, #2
 8001252:	f7ff fff3 	bl	800123c <digitalWrite>
	digitalWrite(VbatCtrl, HIGH);
 8001256:	2101      	movs	r1, #1
 8001258:	2008      	movs	r0, #8
 800125a:	f7ff ffef 	bl	800123c <digitalWrite>
	digitalWrite(VddCtrl, HIGH);
 800125e:	2101      	movs	r1, #1
 8001260:	2010      	movs	r0, #16
 8001262:	f7ff ffeb 	bl	800123c <digitalWrite>
	digitalWrite(Reset, HIGH);
 8001266:	2101      	movs	r1, #1
 8001268:	2004      	movs	r0, #4
 800126a:	f7ff ffe7 	bl	800123c <digitalWrite>
}
 800126e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	digitalWrite(ChipSelect, LOW); //spiCon.setSelect(LOW);
 8001272:	2100      	movs	r1, #0
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff bfe1 	b.w	800123c <digitalWrite>

0800127a <OledDevInit>:
	{
 800127a:	b508      	push	{r3, lr}
	digitalWrite(DataCmd, LOW);
 800127c:	2100      	movs	r1, #0
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff ffdc 	bl	800123c <digitalWrite>
	digitalWrite(VddCtrl, LOW);
 8001284:	2100      	movs	r1, #0
 8001286:	2010      	movs	r0, #16
 8001288:	f7ff ffd8 	bl	800123c <digitalWrite>
	HAL_Delay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f7fe ff91 	bl	80001b4 <HAL_Delay>
	Spi2PutByte(cmdOledDisplayOff);
 8001292:	20ae      	movs	r0, #174	; 0xae
 8001294:	f7ff ffc2 	bl	800121c <Spi2PutByte>
	digitalWrite(Reset, LOW);
 8001298:	2100      	movs	r1, #0
 800129a:	2004      	movs	r0, #4
 800129c:	f7ff ffce 	bl	800123c <digitalWrite>
	digitalWrite(Reset, HIGH);
 80012a0:	2101      	movs	r1, #1
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff ffca 	bl	800123c <digitalWrite>
	Spi2PutByte(0x8D);		//From Univision data sheet, not in SSD1306 data sheet
 80012a8:	208d      	movs	r0, #141	; 0x8d
 80012aa:	f7ff ffb7 	bl	800121c <Spi2PutByte>
	Spi2PutByte(0x14);
 80012ae:	2014      	movs	r0, #20
 80012b0:	f7ff ffb4 	bl	800121c <Spi2PutByte>
	Spi2PutByte(0xD9);		//From Univision data sheet, not in SSD1306 data sheet
 80012b4:	20d9      	movs	r0, #217	; 0xd9
 80012b6:	f7ff ffb1 	bl	800121c <Spi2PutByte>
	Spi2PutByte(0xF1);
 80012ba:	20f1      	movs	r0, #241	; 0xf1
 80012bc:	f7ff ffae 	bl	800121c <Spi2PutByte>
	digitalWrite(VbatCtrl, LOW);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2008      	movs	r0, #8
 80012c4:	f7ff ffba 	bl	800123c <digitalWrite>
	Spi2PutByte(cmdOledSegRemap);		//remap columns
 80012c8:	20a1      	movs	r0, #161	; 0xa1
 80012ca:	f7ff ffa7 	bl	800121c <Spi2PutByte>
	Spi2PutByte(cmdOledComDir);			//remap the rows
 80012ce:	20c8      	movs	r0, #200	; 0xc8
 80012d0:	f7ff ffa4 	bl	800121c <Spi2PutByte>
	Spi2PutByte(cmdOledComConfig);		//set COM configuration command
 80012d4:	20da      	movs	r0, #218	; 0xda
 80012d6:	f7ff ffa1 	bl	800121c <Spi2PutByte>
	Spi2PutByte(0x20);					//sequential COM, left/right remap enabled
 80012da:	2020      	movs	r0, #32
 80012dc:	f7ff ff9e 	bl	800121c <Spi2PutByte>
}
 80012e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Spi2PutByte(cmdOledDisplayOn);
 80012e4:	20af      	movs	r0, #175	; 0xaf
 80012e6:	f7ff bf99 	b.w	800121c <Spi2PutByte>
	...

080012ec <OledUpdate>:
	{
 80012ec:	b538      	push	{r3, r4, r5, lr}
	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 80012ee:	2400      	movs	r4, #0
		OledPutBuffer(ccolOledMax, pb);
 80012f0:	4d0e      	ldr	r5, [pc, #56]	; (800132c <OledUpdate+0x40>)
		digitalWrite(DataCmd, LOW);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff ffa1 	bl	800123c <digitalWrite>
		Spi2PutByte(0x22);		//Set page command
 80012fa:	2022      	movs	r0, #34	; 0x22
 80012fc:	f7ff ff8e 	bl	800121c <Spi2PutByte>
		Spi2PutByte(ipag);		//page number
 8001300:	b2e0      	uxtb	r0, r4
 8001302:	f7ff ff8b 	bl	800121c <Spi2PutByte>
		Spi2PutByte(0x00);		//set low nybble of column
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ff88 	bl	800121c <Spi2PutByte>
		Spi2PutByte(0x10);		//set high nybble of column
 800130c:	2010      	movs	r0, #16
 800130e:	f7ff ff85 	bl	800121c <Spi2PutByte>
		digitalWrite(DataCmd, HIGH);
 8001312:	2101      	movs	r1, #1
 8001314:	2002      	movs	r0, #2
 8001316:	f7ff ff91 	bl	800123c <digitalWrite>
		OledPutBuffer(ccolOledMax, pb);
 800131a:	eb05 11c4 	add.w	r1, r5, r4, lsl #7
 800131e:	2080      	movs	r0, #128	; 0x80
	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 8001320:	3401      	adds	r4, #1
		OledPutBuffer(ccolOledMax, pb);
 8001322:	f7ff ff67 	bl	80011f4 <OledPutBuffer>
	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 8001326:	2c04      	cmp	r4, #4
 8001328:	d1e3      	bne.n	80012f2 <OledUpdate+0x6>
}
 800132a:	bd38      	pop	{r3, r4, r5, pc}
 800132c:	20000324 	.word	0x20000324

08001330 <OledClear>:
	{
 8001330:	b508      	push	{r3, lr}
	OledClearBuffer();
 8001332:	f7ff ff53 	bl	80011dc <OledClearBuffer>
}
 8001336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OledUpdate();
 800133a:	f7ff bfd7 	b.w	80012ec <OledUpdate>

0800133e <OledInit>:
	{
 800133e:	b508      	push	{r3, lr}
	OledHostInit();
 8001340:	f7ff ff84 	bl	800124c <OledHostInit>
	OledDvrInit();
 8001344:	f7ff ff08 	bl	8001158 <OledDvrInit>
	OledDevInit();
 8001348:	f7ff ff97 	bl	800127a <OledDevInit>
}
 800134c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OledClear();
 8001350:	f7ff bfee 	b.w	8001330 <OledClear>

08001354 <OledRopSet>:

uint8_t
OledRopSet(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{

	return (bDsp & ~mskPix) | (bPix & mskPix);
 8001354:	ea21 0102 	bic.w	r1, r1, r2
 8001358:	4010      	ands	r0, r2

}
 800135a:	4308      	orrs	r0, r1
 800135c:	4770      	bx	lr

0800135e <OledRopOr>:

uint8_t
OledRopOr(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{

	return bDsp | (bPix & mskPix);
 800135e:	4010      	ands	r0, r2

}
 8001360:	4308      	orrs	r0, r1
 8001362:	4770      	bx	lr

08001364 <OledRopAnd>:

uint8_t
OledRopAnd(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{

	return bDsp & (bPix & mskPix);
 8001364:	400a      	ands	r2, r1

}
 8001366:	4010      	ands	r0, r2
 8001368:	4770      	bx	lr

0800136a <OledRopXor>:

uint8_t
OledRopXor(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{

	return bDsp ^ (bPix & mskPix);
 800136a:	4010      	ands	r0, r2

}
 800136c:	4048      	eors	r0, r1
 800136e:	4770      	bx	lr

08001370 <OledSetDrawMode>:
	modOledCur = mod;
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <OledSetDrawMode+0x28>)
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <OledSetDrawMode+0x2c>)
 8001374:	6010      	str	r0, [r2, #0]
	switch(mod) {
 8001376:	2803      	cmp	r0, #3
 8001378:	d80a      	bhi.n	8001390 <OledSetDrawMode+0x20>
 800137a:	e8df f000 	tbb	[pc, r0]
 800137e:	020b      	.short	0x020b
 8001380:	0705      	.short	0x0705
			pfnDoRop = OledRopOr;
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <OledSetDrawMode+0x30>)
			pfnDoRop = OledRopSet;
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	4770      	bx	lr
			pfnDoRop = OledRopAnd;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <OledSetDrawMode+0x34>)
 800138a:	e7fb      	b.n	8001384 <OledSetDrawMode+0x14>
			pfnDoRop = OledRopXor;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <OledSetDrawMode+0x38>)
 800138e:	e7f9      	b.n	8001384 <OledSetDrawMode+0x14>
			modOledCur = modOledSet;
 8001390:	2100      	movs	r1, #0
 8001392:	6011      	str	r1, [r2, #0]
			pfnDoRop = OledRopSet;
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <OledSetDrawMode+0x3c>)
 8001396:	e7f5      	b.n	8001384 <OledSetDrawMode+0x14>
 8001398:	2000054c 	.word	0x2000054c
 800139c:	20000550 	.word	0x20000550
 80013a0:	0800135f 	.word	0x0800135f
 80013a4:	08001365 	.word	0x08001365
 80013a8:	0800136b 	.word	0x0800136b
 80013ac:	08001355 	.word	0x08001355

080013b0 <OledClampXco>:
		xco = ccolOledMax-1;
	}

	return xco;

}
 80013b0:	f380 0007 	usat	r0, #7, r0
 80013b4:	4770      	bx	lr

080013b6 <OledClampYco>:
		yco = crowOledMax-1;
	}

	return yco;

}
 80013b6:	f380 0005 	usat	r0, #5, r0
 80013ba:	4770      	bx	lr

080013bc <OledMoveTo>:
	{
 80013bc:	b508      	push	{r3, lr}
	xco = OledClampXco(xco);
 80013be:	f7ff fff7 	bl	80013b0 <OledClampXco>
 80013c2:	4603      	mov	r3, r0
	yco = OledClampYco(yco);
 80013c4:	4608      	mov	r0, r1
 80013c6:	f7ff fff6 	bl	80013b6 <OledClampYco>
	xcoOledCur = xco;
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <OledMoveTo+0x34>)
 80013cc:	6013      	str	r3, [r2, #0]
	ycoOledCur = yco;
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <OledMoveTo+0x38>)
 80013d0:	6010      	str	r0, [r2, #0]
	pbOledCur = &rgbOledBmp[((yco/8) * ccolOledMax) + xco];
 80013d2:	2208      	movs	r2, #8
 80013d4:	fb90 f2f2 	sdiv	r2, r0, r2
 80013d8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <OledMoveTo+0x3c>)
	bnOledCur = yco & 7;
 80013de:	f000 0007 	and.w	r0, r0, #7
	pbOledCur = &rgbOledBmp[((yco/8) * ccolOledMax) + xco];
 80013e2:	4413      	add	r3, r2
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <OledMoveTo+0x40>)
 80013e6:	6013      	str	r3, [r2, #0]
	bnOledCur = yco & 7;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <OledMoveTo+0x44>)
 80013ea:	6018      	str	r0, [r3, #0]
 80013ec:	bd08      	pop	{r3, pc}
 80013ee:	bf00      	nop
 80013f0:	20000524 	.word	0x20000524
 80013f4:	20000320 	.word	0x20000320
 80013f8:	20000324 	.word	0x20000324
 80013fc:	20000528 	.word	0x20000528
 8001400:	20000548 	.word	0x20000548

08001404 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001406:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_ADC1_Init+0x50>)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_ADC1_Init+0x54>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800140a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 800140e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001414:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001416:	6143      	str	r3, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001418:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800141a:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 800141e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001420:	f7ff f81c 	bl	800045c <HAL_ADC_Init>
 8001424:	b118      	cbz	r0, 800142e <MX_ADC1_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001426:	2143      	movs	r1, #67	; 0x43
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_ADC1_Init+0x58>)
 800142a:	f000 f957 	bl	80016dc <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 800142e:	2306      	movs	r3, #6
 8001430:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 1;
 8001432:	2301      	movs	r3, #1
 8001434:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001436:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	a901      	add	r1, sp, #4
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_ADC1_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800143c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	f7fe fecd 	bl	80001dc <HAL_ADC_ConfigChannel>
 8001442:	b118      	cbz	r0, 800144c <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001444:	214d      	movs	r1, #77	; 0x4d
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_ADC1_Init+0x58>)
 8001448:	f000 f948 	bl	80016dc <_Error_Handler>
  }

}
 800144c:	b005      	add	sp, #20
 800144e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001452:	bf00      	nop
 8001454:	20000554 	.word	0x20000554
 8001458:	40012400 	.word	0x40012400
 800145c:	08002654 	.word	0x08002654

08001460 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001462:	6802      	ldr	r2, [r0, #0]
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_ADC_MspInit+0x38>)
 8001466:	429a      	cmp	r2, r3
 8001468:	d112      	bne.n	8001490 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800146e:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001476:	619a      	str	r2, [r3, #24]
 8001478:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800147c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001484:	2340      	movs	r3, #64	; 0x40
 8001486:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001488:	2303      	movs	r3, #3
 800148a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f7ff f8d4 	bl	8000638 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001490:	b007      	add	sp, #28
 8001492:	f85d fb04 	ldr.w	pc, [sp], #4
 8001496:	bf00      	nop
 8001498:	40012400 	.word	0x40012400
 800149c:	40010800 	.word	0x40010800

080014a0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_GPIO_Init+0x80>)
{
 80014a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	699a      	ldr	r2, [r3, #24]
{
 80014a6:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	f042 0210 	orr.w	r2, r2, #16
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014b0:	4f1c      	ldr	r7, [pc, #112]	; (8001524 <MX_GPIO_Init+0x84>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	f002 0210 	and.w	r2, r2, #16
 80014b6:	9201      	str	r2, [sp, #4]
 80014b8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80014bc:	4c1a      	ldr	r4, [pc, #104]	; (8001528 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	f042 0220 	orr.w	r2, r2, #32
 80014c2:	619a      	str	r2, [r3, #24]
 80014c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014c6:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c8:	f002 0220 	and.w	r2, r2, #32
 80014cc:	9202      	str	r2, [sp, #8]
 80014ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	f042 0204 	orr.w	r2, r2, #4
 80014da:	619a      	str	r2, [r3, #24]
 80014dc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	9303      	str	r3, [sp, #12]
 80014e6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014e8:	f7ff f986 	bl	80007f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	4620      	mov	r0, r4
 80014f0:	2107      	movs	r1, #7
 80014f2:	f7ff f981 	bl	80007f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2502      	movs	r5, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	a904      	add	r1, sp, #16
 8001500:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001502:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f7ff f896 	bl	8000638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800150c:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	a904      	add	r1, sp, #16
 8001510:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001512:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f7ff f88e 	bl	8000638 <HAL_GPIO_Init>

}
 800151c:	b009      	add	sp, #36	; 0x24
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	40011000 	.word	0x40011000
 8001528:	40010800 	.word	0x40010800

0800152c <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	2301      	movs	r3, #1
{
 800152e:	b510      	push	{r4, lr}
 8001530:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001532:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001534:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001536:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001538:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800153a:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001540:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f7ff f95f 	bl	8000804 <HAL_RCC_OscConfig>
 8001546:	4601      	mov	r1, r0
 8001548:	b100      	cbz	r0, 800154c <SystemClock_Config+0x20>
 800154a:	e7fe      	b.n	800154a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800154e:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001550:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001556:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800155a:	f7ff fb1d 	bl	8000b98 <HAL_RCC_ClockConfig>
 800155e:	b100      	cbz	r0, 8001562 <SystemClock_Config+0x36>
 8001560:	e7fe      	b.n	8001560 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001562:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001566:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f7ff fbc0 	bl	8000cec <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4604      	mov	r4, r0
 800156e:	b100      	cbz	r0, 8001572 <SystemClock_Config+0x46>
 8001570:	e7fe      	b.n	8001570 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001572:	f7ff fbb5 	bl	8000ce0 <HAL_RCC_GetHCLKFreq>
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb0 f0f3 	udiv	r0, r0, r3
 800157e:	f7ff f833 	bl	80005e8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001582:	2004      	movs	r0, #4
 8001584:	f7ff f846 	bl	8000614 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001588:	4622      	mov	r2, r4
 800158a:	4621      	mov	r1, r4
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7fe fff6 	bl	8000580 <HAL_NVIC_SetPriority>
}
 8001594:	b014      	add	sp, #80	; 0x50
 8001596:	bd10      	pop	{r4, pc}

08001598 <main>:
{
 8001598:	b583      	push	{r0, r1, r7, lr}
   HAL_Init();
 800159a:	f7fe fdeb 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 800159e:	f7ff ffc5 	bl	800152c <SystemClock_Config>
  MX_GPIO_Init();
 80015a2:	f7ff ff7d 	bl	80014a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015a6:	f000 f89b 	bl	80016e0 <MX_SPI1_Init>
  MX_ADC1_Init();
 80015aa:	f7ff ff2b 	bl	8001404 <MX_ADC1_Init>
  OledInit();
 80015ae:	f7ff fec6 	bl	800133e <OledInit>
	  HAL_ADC_Start(&hadc1);
 80015b2:	4d3c      	ldr	r5, [pc, #240]	; (80016a4 <main+0x10c>)
	  leitura = HAL_ADC_GetValue(&hadc1); //pino A6
 80015b4:	4e3c      	ldr	r6, [pc, #240]	; (80016a8 <main+0x110>)
	  char tensao[4] = {tabelaad[leitura][0],tabelaad[leitura][1],tabelaad[leitura][2],tabelaad[leitura][3]};
 80015b6:	4c3d      	ldr	r4, [pc, #244]	; (80016ac <main+0x114>)
	  HAL_ADC_Start(&hadc1);
 80015b8:	4628      	mov	r0, r5
 80015ba:	f7fe fecb 	bl	8000354 <HAL_ADC_Start>
	  OledSetCursor(0,0);
 80015be:	2100      	movs	r1, #0
 80015c0:	4608      	mov	r0, r1
 80015c2:	f7ff fd47 	bl	8001054 <OledSetCursor>
	  leitura = HAL_ADC_GetValue(&hadc1); //pino A6
 80015c6:	4628      	mov	r0, r5
 80015c8:	f7fe fe04 	bl	80001d4 <HAL_ADC_GetValue>
 80015cc:	6030      	str	r0, [r6, #0]
	  char tensao[4] = {tabelaad[leitura][0],tabelaad[leitura][1],tabelaad[leitura][2],tabelaad[leitura][3]};
 80015ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015d2:	5c22      	ldrb	r2, [r4, r0]
 80015d4:	1823      	adds	r3, r4, r0
 80015d6:	f88d 2004 	strb.w	r2, [sp, #4]
 80015da:	785a      	ldrb	r2, [r3, #1]
	  Vx = atoi(tensao);
 80015dc:	a801      	add	r0, sp, #4
	  char tensao[4] = {tabelaad[leitura][0],tabelaad[leitura][1],tabelaad[leitura][2],tabelaad[leitura][3]};
 80015de:	f88d 2005 	strb.w	r2, [sp, #5]
 80015e2:	789a      	ldrb	r2, [r3, #2]
 80015e4:	78db      	ldrb	r3, [r3, #3]
 80015e6:	f88d 2006 	strb.w	r2, [sp, #6]
 80015ea:	f88d 3007 	strb.w	r3, [sp, #7]
	  Vx = atoi(tensao);
 80015ee:	f000 f964 	bl	80018ba <atoi>
	  resultado = (int)(((3290*R_fixa)/Vx) - R_fixa);
 80015f2:	f640 42da 	movw	r2, #3290	; 0xcda
	  Vx = atoi(tensao);
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <main+0x118>)
	  duas_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*10/100));
 80015f8:	f06f 0109 	mvn.w	r1, #9
	  Vx = atoi(tensao);
 80015fc:	6018      	str	r0, [r3, #0]
	  resultado = (int)(((3290*R_fixa)/Vx) - R_fixa);
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <main+0x11c>)
	  duas_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*10/100));
 8001600:	4f2d      	ldr	r7, [pc, #180]	; (80016b8 <main+0x120>)
	  resultado = (int)(((3290*R_fixa)/Vx) - R_fixa);
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80016d4 <main+0x13c>
 8001608:	435a      	muls	r2, r3
 800160a:	fb92 f0f0 	sdiv	r0, r2, r0
 800160e:	1ac2      	subs	r2, r0, r3
	  duas_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*10/100));
 8001610:	fb92 f1f1 	sdiv	r1, r2, r1
 8001614:	4411      	add	r1, r2
 8001616:	6039      	str	r1, [r7, #0]
	  quatro_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) + R_fixa)*20/100));
 8001618:	4403      	add	r3, r0
	  tres_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*7/100));
 800161a:	2764      	movs	r7, #100	; 0x64
	  quatro_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) + R_fixa)*20/100));
 800161c:	f06f 0004 	mvn.w	r0, #4
	  tres_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*7/100));
 8001620:	eba2 01c2 	sub.w	r1, r2, r2, lsl #3
 8001624:	fb91 f1f7 	sdiv	r1, r1, r7
	  quatro_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) + R_fixa)*20/100));
 8001628:	fb93 f3f0 	sdiv	r3, r3, r0
	  tres_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*7/100));
 800162c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80016d8 <main+0x140>
	  quatro_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) + R_fixa)*20/100));
 8001630:	4f22      	ldr	r7, [pc, #136]	; (80016bc <main+0x124>)
	  tres_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*7/100));
 8001632:	4411      	add	r1, r2
	  quatro_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) + R_fixa)*20/100));
 8001634:	4413      	add	r3, r2
	  if (resultado >= 0){
 8001636:	2a00      	cmp	r2, #0
	  resultado = (int)(((3290*R_fixa)/Vx) - R_fixa);
 8001638:	f8c9 2000 	str.w	r2, [r9]
	  tres_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) - R_fixa)*7/100));
 800163c:	f8c8 1000 	str.w	r1, [r8]
	  quatro_casas = (int)((((3290*R_fixa)/Vx) - R_fixa) -((((3290*R_fixa)/Vx) + R_fixa)*20/100));
 8001640:	603b      	str	r3, [r7, #0]
	  if (resultado >= 0){
 8001642:	db2c      	blt.n	800169e <main+0x106>
		  OledPutString("Resistencia: ");
 8001644:	481e      	ldr	r0, [pc, #120]	; (80016c0 <main+0x128>)
 8001646:	f7ff fd73 	bl	8001130 <OledPutString>
		  if (resultado > 0 & resultado < 100){
 800164a:	f8d9 2000 	ldr.w	r2, [r9]
 800164e:	1e53      	subs	r3, r2, #1
 8001650:	2b62      	cmp	r3, #98	; 0x62
 8001652:	d814      	bhi.n	800167e <main+0xe6>
			  sprintf(string_r,"%d",quatro_casas);
 8001654:	491b      	ldr	r1, [pc, #108]	; (80016c4 <main+0x12c>)
 8001656:	481c      	ldr	r0, [pc, #112]	; (80016c8 <main+0x130>)
 8001658:	f000 f958 	bl	800190c <siprintf>
			  OledSetCursor(0,2);
 800165c:	2000      	movs	r0, #0
 800165e:	2102      	movs	r1, #2
 8001660:	f7ff fcf8 	bl	8001054 <OledSetCursor>
			  OledPutString(string_r);
 8001664:	4818      	ldr	r0, [pc, #96]	; (80016c8 <main+0x130>)
 8001666:	f7ff fd63 	bl	8001130 <OledPutString>
		  OledPutString(" Ohms");
 800166a:	4818      	ldr	r0, [pc, #96]	; (80016cc <main+0x134>)
		  OledPutString("Circuito aberto");
 800166c:	f7ff fd60 	bl	8001130 <OledPutString>
	  HAL_Delay(2000);
 8001670:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001674:	f7fe fd9e 	bl	80001b4 <HAL_Delay>
	  OledClear();
 8001678:	f7ff fe5a 	bl	8001330 <OledClear>
  {
 800167c:	e79c      	b.n	80015b8 <main+0x20>
		  else if (resultado >= 100 & resultado < 1000){
 800167e:	f1a2 0364 	sub.w	r3, r2, #100	; 0x64
 8001682:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001686:	d202      	bcs.n	800168e <main+0xf6>
			  sprintf(string_r,"%d",tres_casas);
 8001688:	f8d8 2000 	ldr.w	r2, [r8]
 800168c:	e7e2      	b.n	8001654 <main+0xbc>
		  else if (resultado >= 1000 & resultado < 10000){
 800168e:	f242 3327 	movw	r3, #8999	; 0x2327
 8001692:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8001696:	429a      	cmp	r2, r3
 8001698:	d8e7      	bhi.n	800166a <main+0xd2>
			  sprintf(string_r,"%d",quatro_casas);
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	e7da      	b.n	8001654 <main+0xbc>
		  OledPutString("Circuito aberto");
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <main+0x138>)
 80016a0:	e7e4      	b.n	800166c <main+0xd4>
 80016a2:	bf00      	nop
 80016a4:	20000554 	.word	0x20000554
 80016a8:	200001f4 	.word	0x200001f4
 80016ac:	08002661 	.word	0x08002661
 80016b0:	200005a0 	.word	0x200005a0
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000584 	.word	0x20000584
 80016bc:	200005a4 	.word	0x200005a4
 80016c0:	08007661 	.word	0x08007661
 80016c4:	0800766f 	.word	0x0800766f
 80016c8:	2000058c 	.word	0x2000058c
 80016cc:	08007672 	.word	0x08007672
 80016d0:	08007678 	.word	0x08007678
 80016d4:	200001f8 	.word	0x200001f8
 80016d8:	20000588 	.word	0x20000588

080016dc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80016dc:	e7fe      	b.n	80016dc <_Error_Handler>
	...

080016e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016e0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016e2:	2202      	movs	r2, #2
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016e4:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Instance = SPI1;
 80016e8:	480e      	ldr	r0, [pc, #56]	; (8001724 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_SPI1_Init+0x48>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016ec:	6102      	str	r2, [r0, #16]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ee:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016f2:	2201      	movs	r2, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f4:	2300      	movs	r3, #0
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016f6:	6142      	str	r2, [r0, #20]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fa:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016fc:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001700:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001702:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001706:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001708:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800170a:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800170c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800170e:	f7ff fc65 	bl	8000fdc <HAL_SPI_Init>
 8001712:	b128      	cbz	r0, 8001720 <MX_SPI1_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001718:	2145      	movs	r1, #69	; 0x45
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_SPI1_Init+0x4c>)
 800171c:	f7ff bfde 	b.w	80016dc <_Error_Handler>
 8001720:	bd08      	pop	{r3, pc}
 8001722:	bf00      	nop
 8001724:	200005a8 	.word	0x200005a8
 8001728:	40013000 	.word	0x40013000
 800172c:	08007688 	.word	0x08007688

08001730 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001732:	6802      	ldr	r2, [r0, #0]
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_SPI_MspInit+0x3c>)
 8001736:	429a      	cmp	r2, r3
 8001738:	d114      	bne.n	8001764 <HAL_SPI_MspInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800173a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800173e:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001746:	619a      	str	r2, [r3, #24]
 8001748:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	4809      	ldr	r0, [pc, #36]	; (8001770 <HAL_SPI_MspInit+0x40>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001754:	23a0      	movs	r3, #160	; 0xa0
 8001756:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f7fe ff6a 	bl	8000638 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001764:	b007      	add	sp, #28
 8001766:	f85d fb04 	ldr.w	pc, [sp], #4
 800176a:	bf00      	nop
 800176c:	40013000 	.word	0x40013000
 8001770:	40010800 	.word	0x40010800

08001774 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_MspInit+0x88>)
{
 8001776:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001778:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	f7fe fee6 	bl	800055c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	f06f 000b 	mvn.w	r0, #11
 8001796:	4611      	mov	r1, r2
 8001798:	f7fe fef2 	bl	8000580 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	f06f 000a 	mvn.w	r0, #10
 80017a2:	4611      	mov	r1, r2
 80017a4:	f7fe feec 	bl	8000580 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f06f 0009 	mvn.w	r0, #9
 80017ae:	4611      	mov	r1, r2
 80017b0:	f7fe fee6 	bl	8000580 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f06f 0004 	mvn.w	r0, #4
 80017ba:	4611      	mov	r1, r2
 80017bc:	f7fe fee0 	bl	8000580 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f06f 0003 	mvn.w	r0, #3
 80017c6:	4611      	mov	r1, r2
 80017c8:	f7fe feda 	bl	8000580 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f06f 0001 	mvn.w	r0, #1
 80017d2:	4611      	mov	r1, r2
 80017d4:	f7fe fed4 	bl	8000580 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	f04f 30ff 	mov.w	r0, #4294967295
 80017de:	4611      	mov	r1, r2
 80017e0:	f7fe fece 	bl	8000580 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_MspInit+0x8c>)
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80017f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	b003      	add	sp, #12
 80017f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000

08001804 <NMI_Handler>:
 8001804:	4770      	bx	lr

08001806 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler>

08001808 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler>

0800180a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800180a:	e7fe      	b.n	800180a <BusFault_Handler>

0800180c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler>

0800180e <SVC_Handler>:
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001812:	4770      	bx	lr

08001814 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001814:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f7fe fcbf 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800181e:	f7fe bf06 	b.w	800062e <HAL_SYSTICK_IRQHandler>
	...

08001824 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <SystemInit+0x40>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <SystemInit+0x44>)
 8001832:	400a      	ands	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800183c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001840:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001848:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001850:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001852:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001856:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <SystemInit+0x48>)
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	f8ff0000 	.word	0xf8ff0000
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001870:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001872:	e003      	b.n	800187c <LoopCopyDataInit>

08001874 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001876:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001878:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800187a:	3104      	adds	r1, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800187c:	480a      	ldr	r0, [pc, #40]	; (80018a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001880:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001884:	d3f6      	bcc.n	8001874 <CopyDataInit>
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001888:	e002      	b.n	8001890 <LoopFillZerobss>

0800188a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800188c:	f842 3b04 	str.w	r3, [r2], #4

08001890 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001892:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001894:	d3f9      	bcc.n	800188a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001896:	f7ff ffc5 	bl	8001824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f000 f813 	bl	80018c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189e:	f7ff fe7b 	bl	8001598 <main>
  bx lr
 80018a2:	4770      	bx	lr
  ldr r3, =_sidata
 80018a4:	080077ec 	.word	0x080077ec
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018ac:	200001d8 	.word	0x200001d8
  ldr r2, =_sbss
 80018b0:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 80018b4:	20000604 	.word	0x20000604

080018b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_2_IRQHandler>

080018ba <atoi>:
 80018ba:	220a      	movs	r2, #10
 80018bc:	2100      	movs	r1, #0
 80018be:	f000 b8c9 	b.w	8001a54 <strtol>
	...

080018c4 <__libc_init_array>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	2500      	movs	r5, #0
 80018c8:	4e0c      	ldr	r6, [pc, #48]	; (80018fc <__libc_init_array+0x38>)
 80018ca:	4c0d      	ldr	r4, [pc, #52]	; (8001900 <__libc_init_array+0x3c>)
 80018cc:	1ba4      	subs	r4, r4, r6
 80018ce:	10a4      	asrs	r4, r4, #2
 80018d0:	42a5      	cmp	r5, r4
 80018d2:	d109      	bne.n	80018e8 <__libc_init_array+0x24>
 80018d4:	f000 fd0a 	bl	80022ec <_init>
 80018d8:	2500      	movs	r5, #0
 80018da:	4e0a      	ldr	r6, [pc, #40]	; (8001904 <__libc_init_array+0x40>)
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <__libc_init_array+0x44>)
 80018de:	1ba4      	subs	r4, r4, r6
 80018e0:	10a4      	asrs	r4, r4, #2
 80018e2:	42a5      	cmp	r5, r4
 80018e4:	d105      	bne.n	80018f2 <__libc_init_array+0x2e>
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
 80018e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018ec:	4798      	blx	r3
 80018ee:	3501      	adds	r5, #1
 80018f0:	e7ee      	b.n	80018d0 <__libc_init_array+0xc>
 80018f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018f6:	4798      	blx	r3
 80018f8:	3501      	adds	r5, #1
 80018fa:	e7f2      	b.n	80018e2 <__libc_init_array+0x1e>
 80018fc:	080077e4 	.word	0x080077e4
 8001900:	080077e4 	.word	0x080077e4
 8001904:	080077e4 	.word	0x080077e4
 8001908:	080077e8 	.word	0x080077e8

0800190c <siprintf>:
 800190c:	b40e      	push	{r1, r2, r3}
 800190e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001912:	b500      	push	{lr}
 8001914:	b09c      	sub	sp, #112	; 0x70
 8001916:	f8ad 1014 	strh.w	r1, [sp, #20]
 800191a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800191e:	9104      	str	r1, [sp, #16]
 8001920:	9107      	str	r1, [sp, #28]
 8001922:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001926:	ab1d      	add	r3, sp, #116	; 0x74
 8001928:	9002      	str	r0, [sp, #8]
 800192a:	9006      	str	r0, [sp, #24]
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <siprintf+0x44>)
 800192e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001932:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001936:	6800      	ldr	r0, [r0, #0]
 8001938:	a902      	add	r1, sp, #8
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	f000 f910 	bl	8001b60 <_svfiprintf_r>
 8001940:	2200      	movs	r2, #0
 8001942:	9b02      	ldr	r3, [sp, #8]
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	b01c      	add	sp, #112	; 0x70
 8001948:	f85d eb04 	ldr.w	lr, [sp], #4
 800194c:	b003      	add	sp, #12
 800194e:	4770      	bx	lr
 8001950:	20000008 	.word	0x20000008

08001954 <_strtol_l.isra.0>:
 8001954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001958:	4680      	mov	r8, r0
 800195a:	4689      	mov	r9, r1
 800195c:	4692      	mov	sl, r2
 800195e:	461f      	mov	r7, r3
 8001960:	468b      	mov	fp, r1
 8001962:	465d      	mov	r5, fp
 8001964:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001966:	f815 4b01 	ldrb.w	r4, [r5], #1
 800196a:	f000 f889 	bl	8001a80 <__locale_ctype_ptr_l>
 800196e:	4420      	add	r0, r4
 8001970:	7846      	ldrb	r6, [r0, #1]
 8001972:	f016 0608 	ands.w	r6, r6, #8
 8001976:	d10b      	bne.n	8001990 <_strtol_l.isra.0+0x3c>
 8001978:	2c2d      	cmp	r4, #45	; 0x2d
 800197a:	d10b      	bne.n	8001994 <_strtol_l.isra.0+0x40>
 800197c:	2601      	movs	r6, #1
 800197e:	782c      	ldrb	r4, [r5, #0]
 8001980:	f10b 0502 	add.w	r5, fp, #2
 8001984:	b167      	cbz	r7, 80019a0 <_strtol_l.isra.0+0x4c>
 8001986:	2f10      	cmp	r7, #16
 8001988:	d114      	bne.n	80019b4 <_strtol_l.isra.0+0x60>
 800198a:	2c30      	cmp	r4, #48	; 0x30
 800198c:	d00a      	beq.n	80019a4 <_strtol_l.isra.0+0x50>
 800198e:	e011      	b.n	80019b4 <_strtol_l.isra.0+0x60>
 8001990:	46ab      	mov	fp, r5
 8001992:	e7e6      	b.n	8001962 <_strtol_l.isra.0+0xe>
 8001994:	2c2b      	cmp	r4, #43	; 0x2b
 8001996:	bf04      	itt	eq
 8001998:	782c      	ldrbeq	r4, [r5, #0]
 800199a:	f10b 0502 	addeq.w	r5, fp, #2
 800199e:	e7f1      	b.n	8001984 <_strtol_l.isra.0+0x30>
 80019a0:	2c30      	cmp	r4, #48	; 0x30
 80019a2:	d127      	bne.n	80019f4 <_strtol_l.isra.0+0xa0>
 80019a4:	782b      	ldrb	r3, [r5, #0]
 80019a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80019aa:	2b58      	cmp	r3, #88	; 0x58
 80019ac:	d14b      	bne.n	8001a46 <_strtol_l.isra.0+0xf2>
 80019ae:	2710      	movs	r7, #16
 80019b0:	786c      	ldrb	r4, [r5, #1]
 80019b2:	3502      	adds	r5, #2
 80019b4:	2e00      	cmp	r6, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80019bc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80019c0:	2200      	movs	r2, #0
 80019c2:	fbb1 fef7 	udiv	lr, r1, r7
 80019c6:	4610      	mov	r0, r2
 80019c8:	fb07 1c1e 	mls	ip, r7, lr, r1
 80019cc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d811      	bhi.n	80019f8 <_strtol_l.isra.0+0xa4>
 80019d4:	461c      	mov	r4, r3
 80019d6:	42a7      	cmp	r7, r4
 80019d8:	dd1d      	ble.n	8001a16 <_strtol_l.isra.0+0xc2>
 80019da:	1c53      	adds	r3, r2, #1
 80019dc:	d007      	beq.n	80019ee <_strtol_l.isra.0+0x9a>
 80019de:	4586      	cmp	lr, r0
 80019e0:	d316      	bcc.n	8001a10 <_strtol_l.isra.0+0xbc>
 80019e2:	d101      	bne.n	80019e8 <_strtol_l.isra.0+0x94>
 80019e4:	45a4      	cmp	ip, r4
 80019e6:	db13      	blt.n	8001a10 <_strtol_l.isra.0+0xbc>
 80019e8:	2201      	movs	r2, #1
 80019ea:	fb00 4007 	mla	r0, r0, r7, r4
 80019ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80019f2:	e7eb      	b.n	80019cc <_strtol_l.isra.0+0x78>
 80019f4:	270a      	movs	r7, #10
 80019f6:	e7dd      	b.n	80019b4 <_strtol_l.isra.0+0x60>
 80019f8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80019fc:	2b19      	cmp	r3, #25
 80019fe:	d801      	bhi.n	8001a04 <_strtol_l.isra.0+0xb0>
 8001a00:	3c37      	subs	r4, #55	; 0x37
 8001a02:	e7e8      	b.n	80019d6 <_strtol_l.isra.0+0x82>
 8001a04:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001a08:	2b19      	cmp	r3, #25
 8001a0a:	d804      	bhi.n	8001a16 <_strtol_l.isra.0+0xc2>
 8001a0c:	3c57      	subs	r4, #87	; 0x57
 8001a0e:	e7e2      	b.n	80019d6 <_strtol_l.isra.0+0x82>
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	e7eb      	b.n	80019ee <_strtol_l.isra.0+0x9a>
 8001a16:	1c53      	adds	r3, r2, #1
 8001a18:	d108      	bne.n	8001a2c <_strtol_l.isra.0+0xd8>
 8001a1a:	2322      	movs	r3, #34	; 0x22
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	f8c8 3000 	str.w	r3, [r8]
 8001a22:	f1ba 0f00 	cmp.w	sl, #0
 8001a26:	d107      	bne.n	8001a38 <_strtol_l.isra.0+0xe4>
 8001a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a2c:	b106      	cbz	r6, 8001a30 <_strtol_l.isra.0+0xdc>
 8001a2e:	4240      	negs	r0, r0
 8001a30:	f1ba 0f00 	cmp.w	sl, #0
 8001a34:	d00c      	beq.n	8001a50 <_strtol_l.isra.0+0xfc>
 8001a36:	b122      	cbz	r2, 8001a42 <_strtol_l.isra.0+0xee>
 8001a38:	3d01      	subs	r5, #1
 8001a3a:	f8ca 5000 	str.w	r5, [sl]
 8001a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a42:	464d      	mov	r5, r9
 8001a44:	e7f9      	b.n	8001a3a <_strtol_l.isra.0+0xe6>
 8001a46:	2430      	movs	r4, #48	; 0x30
 8001a48:	2f00      	cmp	r7, #0
 8001a4a:	d1b3      	bne.n	80019b4 <_strtol_l.isra.0+0x60>
 8001a4c:	2708      	movs	r7, #8
 8001a4e:	e7b1      	b.n	80019b4 <_strtol_l.isra.0+0x60>
 8001a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a54 <strtol>:
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <strtol+0x24>)
 8001a56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a58:	681c      	ldr	r4, [r3, #0]
 8001a5a:	4d08      	ldr	r5, [pc, #32]	; (8001a7c <strtol+0x28>)
 8001a5c:	6a23      	ldr	r3, [r4, #32]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf08      	it	eq
 8001a62:	462b      	moveq	r3, r5
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	460a      	mov	r2, r1
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff ff71 	bl	8001954 <_strtol_l.isra.0>
 8001a72:	b003      	add	sp, #12
 8001a74:	bd30      	pop	{r4, r5, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	2000006c 	.word	0x2000006c

08001a80 <__locale_ctype_ptr_l>:
 8001a80:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8001a84:	4770      	bx	lr

08001a86 <__ascii_mbtowc>:
 8001a86:	b082      	sub	sp, #8
 8001a88:	b901      	cbnz	r1, 8001a8c <__ascii_mbtowc+0x6>
 8001a8a:	a901      	add	r1, sp, #4
 8001a8c:	b142      	cbz	r2, 8001aa0 <__ascii_mbtowc+0x1a>
 8001a8e:	b14b      	cbz	r3, 8001aa4 <__ascii_mbtowc+0x1e>
 8001a90:	7813      	ldrb	r3, [r2, #0]
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	1c10      	adds	r0, r2, #0
 8001a98:	bf18      	it	ne
 8001a9a:	2001      	movne	r0, #1
 8001a9c:	b002      	add	sp, #8
 8001a9e:	4770      	bx	lr
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	e7fb      	b.n	8001a9c <__ascii_mbtowc+0x16>
 8001aa4:	f06f 0001 	mvn.w	r0, #1
 8001aa8:	e7f8      	b.n	8001a9c <__ascii_mbtowc+0x16>

08001aaa <__ssputs_r>:
 8001aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aae:	688e      	ldr	r6, [r1, #8]
 8001ab0:	4682      	mov	sl, r0
 8001ab2:	429e      	cmp	r6, r3
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	4698      	mov	r8, r3
 8001aba:	d835      	bhi.n	8001b28 <__ssputs_r+0x7e>
 8001abc:	898a      	ldrh	r2, [r1, #12]
 8001abe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ac2:	d031      	beq.n	8001b28 <__ssputs_r+0x7e>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	6825      	ldr	r5, [r4, #0]
 8001ac8:	6909      	ldr	r1, [r1, #16]
 8001aca:	1a6f      	subs	r7, r5, r1
 8001acc:	6965      	ldr	r5, [r4, #20]
 8001ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ad2:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ad6:	f108 0301 	add.w	r3, r8, #1
 8001ada:	443b      	add	r3, r7
 8001adc:	429d      	cmp	r5, r3
 8001ade:	bf38      	it	cc
 8001ae0:	461d      	movcc	r5, r3
 8001ae2:	0553      	lsls	r3, r2, #21
 8001ae4:	d531      	bpl.n	8001b4a <__ssputs_r+0xa0>
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	f000 fb52 	bl	8002190 <_malloc_r>
 8001aec:	4606      	mov	r6, r0
 8001aee:	b950      	cbnz	r0, 8001b06 <__ssputs_r+0x5c>
 8001af0:	230c      	movs	r3, #12
 8001af2:	f8ca 3000 	str.w	r3, [sl]
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b00:	81a3      	strh	r3, [r4, #12]
 8001b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b06:	463a      	mov	r2, r7
 8001b08:	6921      	ldr	r1, [r4, #16]
 8001b0a:	f000 fad0 	bl	80020ae <memcpy>
 8001b0e:	89a3      	ldrh	r3, [r4, #12]
 8001b10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	81a3      	strh	r3, [r4, #12]
 8001b1a:	6126      	str	r6, [r4, #16]
 8001b1c:	443e      	add	r6, r7
 8001b1e:	6026      	str	r6, [r4, #0]
 8001b20:	4646      	mov	r6, r8
 8001b22:	6165      	str	r5, [r4, #20]
 8001b24:	1bed      	subs	r5, r5, r7
 8001b26:	60a5      	str	r5, [r4, #8]
 8001b28:	4546      	cmp	r6, r8
 8001b2a:	bf28      	it	cs
 8001b2c:	4646      	movcs	r6, r8
 8001b2e:	4649      	mov	r1, r9
 8001b30:	4632      	mov	r2, r6
 8001b32:	6820      	ldr	r0, [r4, #0]
 8001b34:	f000 fac6 	bl	80020c4 <memmove>
 8001b38:	68a3      	ldr	r3, [r4, #8]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	1b9b      	subs	r3, r3, r6
 8001b3e:	60a3      	str	r3, [r4, #8]
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	441e      	add	r6, r3
 8001b44:	6026      	str	r6, [r4, #0]
 8001b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b4a:	462a      	mov	r2, r5
 8001b4c:	f000 fb7e 	bl	800224c <_realloc_r>
 8001b50:	4606      	mov	r6, r0
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d1e1      	bne.n	8001b1a <__ssputs_r+0x70>
 8001b56:	6921      	ldr	r1, [r4, #16]
 8001b58:	4650      	mov	r0, sl
 8001b5a:	f000 facd 	bl	80020f8 <_free_r>
 8001b5e:	e7c7      	b.n	8001af0 <__ssputs_r+0x46>

08001b60 <_svfiprintf_r>:
 8001b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b64:	b09d      	sub	sp, #116	; 0x74
 8001b66:	9303      	str	r3, [sp, #12]
 8001b68:	898b      	ldrh	r3, [r1, #12]
 8001b6a:	4680      	mov	r8, r0
 8001b6c:	061c      	lsls	r4, r3, #24
 8001b6e:	460d      	mov	r5, r1
 8001b70:	4616      	mov	r6, r2
 8001b72:	d50f      	bpl.n	8001b94 <_svfiprintf_r+0x34>
 8001b74:	690b      	ldr	r3, [r1, #16]
 8001b76:	b96b      	cbnz	r3, 8001b94 <_svfiprintf_r+0x34>
 8001b78:	2140      	movs	r1, #64	; 0x40
 8001b7a:	f000 fb09 	bl	8002190 <_malloc_r>
 8001b7e:	6028      	str	r0, [r5, #0]
 8001b80:	6128      	str	r0, [r5, #16]
 8001b82:	b928      	cbnz	r0, 8001b90 <_svfiprintf_r+0x30>
 8001b84:	230c      	movs	r3, #12
 8001b86:	f8c8 3000 	str.w	r3, [r8]
 8001b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8e:	e0c4      	b.n	8001d1a <_svfiprintf_r+0x1ba>
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	616b      	str	r3, [r5, #20]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9309      	str	r3, [sp, #36]	; 0x24
 8001b98:	2320      	movs	r3, #32
 8001b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b9e:	2330      	movs	r3, #48	; 0x30
 8001ba0:	f04f 0b01 	mov.w	fp, #1
 8001ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ba8:	4637      	mov	r7, r6
 8001baa:	463c      	mov	r4, r7
 8001bac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d13c      	bne.n	8001c2e <_svfiprintf_r+0xce>
 8001bb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8001bb8:	d00b      	beq.n	8001bd2 <_svfiprintf_r+0x72>
 8001bba:	4653      	mov	r3, sl
 8001bbc:	4632      	mov	r2, r6
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	4640      	mov	r0, r8
 8001bc2:	f7ff ff72 	bl	8001aaa <__ssputs_r>
 8001bc6:	3001      	adds	r0, #1
 8001bc8:	f000 80a2 	beq.w	8001d10 <_svfiprintf_r+0x1b0>
 8001bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bce:	4453      	add	r3, sl
 8001bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8001bd2:	783b      	ldrb	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 809b 	beq.w	8001d10 <_svfiprintf_r+0x1b0>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	9304      	str	r3, [sp, #16]
 8001be2:	9307      	str	r3, [sp, #28]
 8001be4:	9205      	str	r2, [sp, #20]
 8001be6:	9306      	str	r3, [sp, #24]
 8001be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bec:	931a      	str	r3, [sp, #104]	; 0x68
 8001bee:	2205      	movs	r2, #5
 8001bf0:	7821      	ldrb	r1, [r4, #0]
 8001bf2:	4850      	ldr	r0, [pc, #320]	; (8001d34 <_svfiprintf_r+0x1d4>)
 8001bf4:	f000 fa4d 	bl	8002092 <memchr>
 8001bf8:	1c67      	adds	r7, r4, #1
 8001bfa:	9b04      	ldr	r3, [sp, #16]
 8001bfc:	b9d8      	cbnz	r0, 8001c36 <_svfiprintf_r+0xd6>
 8001bfe:	06d9      	lsls	r1, r3, #27
 8001c00:	bf44      	itt	mi
 8001c02:	2220      	movmi	r2, #32
 8001c04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c08:	071a      	lsls	r2, r3, #28
 8001c0a:	bf44      	itt	mi
 8001c0c:	222b      	movmi	r2, #43	; 0x2b
 8001c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c12:	7822      	ldrb	r2, [r4, #0]
 8001c14:	2a2a      	cmp	r2, #42	; 0x2a
 8001c16:	d016      	beq.n	8001c46 <_svfiprintf_r+0xe6>
 8001c18:	2100      	movs	r1, #0
 8001c1a:	200a      	movs	r0, #10
 8001c1c:	9a07      	ldr	r2, [sp, #28]
 8001c1e:	4627      	mov	r7, r4
 8001c20:	783b      	ldrb	r3, [r7, #0]
 8001c22:	3401      	adds	r4, #1
 8001c24:	3b30      	subs	r3, #48	; 0x30
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d950      	bls.n	8001ccc <_svfiprintf_r+0x16c>
 8001c2a:	b1c9      	cbz	r1, 8001c60 <_svfiprintf_r+0x100>
 8001c2c:	e011      	b.n	8001c52 <_svfiprintf_r+0xf2>
 8001c2e:	2b25      	cmp	r3, #37	; 0x25
 8001c30:	d0c0      	beq.n	8001bb4 <_svfiprintf_r+0x54>
 8001c32:	4627      	mov	r7, r4
 8001c34:	e7b9      	b.n	8001baa <_svfiprintf_r+0x4a>
 8001c36:	4a3f      	ldr	r2, [pc, #252]	; (8001d34 <_svfiprintf_r+0x1d4>)
 8001c38:	463c      	mov	r4, r7
 8001c3a:	1a80      	subs	r0, r0, r2
 8001c3c:	fa0b f000 	lsl.w	r0, fp, r0
 8001c40:	4318      	orrs	r0, r3
 8001c42:	9004      	str	r0, [sp, #16]
 8001c44:	e7d3      	b.n	8001bee <_svfiprintf_r+0x8e>
 8001c46:	9a03      	ldr	r2, [sp, #12]
 8001c48:	1d11      	adds	r1, r2, #4
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	9103      	str	r1, [sp, #12]
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	db01      	blt.n	8001c56 <_svfiprintf_r+0xf6>
 8001c52:	9207      	str	r2, [sp, #28]
 8001c54:	e004      	b.n	8001c60 <_svfiprintf_r+0x100>
 8001c56:	4252      	negs	r2, r2
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	9207      	str	r2, [sp, #28]
 8001c5e:	9304      	str	r3, [sp, #16]
 8001c60:	783b      	ldrb	r3, [r7, #0]
 8001c62:	2b2e      	cmp	r3, #46	; 0x2e
 8001c64:	d10d      	bne.n	8001c82 <_svfiprintf_r+0x122>
 8001c66:	787b      	ldrb	r3, [r7, #1]
 8001c68:	1c79      	adds	r1, r7, #1
 8001c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c6c:	d132      	bne.n	8001cd4 <_svfiprintf_r+0x174>
 8001c6e:	9b03      	ldr	r3, [sp, #12]
 8001c70:	3702      	adds	r7, #2
 8001c72:	1d1a      	adds	r2, r3, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	9203      	str	r2, [sp, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bfb8      	it	lt
 8001c7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c80:	9305      	str	r3, [sp, #20]
 8001c82:	4c2d      	ldr	r4, [pc, #180]	; (8001d38 <_svfiprintf_r+0x1d8>)
 8001c84:	2203      	movs	r2, #3
 8001c86:	7839      	ldrb	r1, [r7, #0]
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f000 fa02 	bl	8002092 <memchr>
 8001c8e:	b138      	cbz	r0, 8001ca0 <_svfiprintf_r+0x140>
 8001c90:	2340      	movs	r3, #64	; 0x40
 8001c92:	1b00      	subs	r0, r0, r4
 8001c94:	fa03 f000 	lsl.w	r0, r3, r0
 8001c98:	9b04      	ldr	r3, [sp, #16]
 8001c9a:	3701      	adds	r7, #1
 8001c9c:	4303      	orrs	r3, r0
 8001c9e:	9304      	str	r3, [sp, #16]
 8001ca0:	7839      	ldrb	r1, [r7, #0]
 8001ca2:	2206      	movs	r2, #6
 8001ca4:	4825      	ldr	r0, [pc, #148]	; (8001d3c <_svfiprintf_r+0x1dc>)
 8001ca6:	1c7e      	adds	r6, r7, #1
 8001ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cac:	f000 f9f1 	bl	8002092 <memchr>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d035      	beq.n	8001d20 <_svfiprintf_r+0x1c0>
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <_svfiprintf_r+0x1e0>)
 8001cb6:	b9fb      	cbnz	r3, 8001cf8 <_svfiprintf_r+0x198>
 8001cb8:	9b03      	ldr	r3, [sp, #12]
 8001cba:	3307      	adds	r3, #7
 8001cbc:	f023 0307 	bic.w	r3, r3, #7
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	9303      	str	r3, [sp, #12]
 8001cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cc6:	444b      	add	r3, r9
 8001cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8001cca:	e76d      	b.n	8001ba8 <_svfiprintf_r+0x48>
 8001ccc:	fb00 3202 	mla	r2, r0, r2, r3
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	e7a4      	b.n	8001c1e <_svfiprintf_r+0xbe>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	240a      	movs	r4, #10
 8001cd8:	4618      	mov	r0, r3
 8001cda:	9305      	str	r3, [sp, #20]
 8001cdc:	460f      	mov	r7, r1
 8001cde:	783a      	ldrb	r2, [r7, #0]
 8001ce0:	3101      	adds	r1, #1
 8001ce2:	3a30      	subs	r2, #48	; 0x30
 8001ce4:	2a09      	cmp	r2, #9
 8001ce6:	d903      	bls.n	8001cf0 <_svfiprintf_r+0x190>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ca      	beq.n	8001c82 <_svfiprintf_r+0x122>
 8001cec:	9005      	str	r0, [sp, #20]
 8001cee:	e7c8      	b.n	8001c82 <_svfiprintf_r+0x122>
 8001cf0:	fb04 2000 	mla	r0, r4, r0, r2
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e7f1      	b.n	8001cdc <_svfiprintf_r+0x17c>
 8001cf8:	ab03      	add	r3, sp, #12
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	462a      	mov	r2, r5
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_svfiprintf_r+0x1e4>)
 8001d00:	a904      	add	r1, sp, #16
 8001d02:	4640      	mov	r0, r8
 8001d04:	f3af 8000 	nop.w
 8001d08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d0c:	4681      	mov	r9, r0
 8001d0e:	d1d9      	bne.n	8001cc4 <_svfiprintf_r+0x164>
 8001d10:	89ab      	ldrh	r3, [r5, #12]
 8001d12:	065b      	lsls	r3, r3, #25
 8001d14:	f53f af39 	bmi.w	8001b8a <_svfiprintf_r+0x2a>
 8001d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d1a:	b01d      	add	sp, #116	; 0x74
 8001d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d20:	ab03      	add	r3, sp, #12
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	462a      	mov	r2, r5
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_svfiprintf_r+0x1e4>)
 8001d28:	a904      	add	r1, sp, #16
 8001d2a:	4640      	mov	r0, r8
 8001d2c:	f000 f884 	bl	8001e38 <_printf_i>
 8001d30:	e7ea      	b.n	8001d08 <_svfiprintf_r+0x1a8>
 8001d32:	bf00      	nop
 8001d34:	080076af 	.word	0x080076af
 8001d38:	080076b5 	.word	0x080076b5
 8001d3c:	080076b9 	.word	0x080076b9
 8001d40:	00000000 	.word	0x00000000
 8001d44:	08001aab 	.word	0x08001aab

08001d48 <_printf_common>:
 8001d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d4c:	4691      	mov	r9, r2
 8001d4e:	461f      	mov	r7, r3
 8001d50:	688a      	ldr	r2, [r1, #8]
 8001d52:	690b      	ldr	r3, [r1, #16]
 8001d54:	4606      	mov	r6, r0
 8001d56:	4293      	cmp	r3, r2
 8001d58:	bfb8      	it	lt
 8001d5a:	4613      	movlt	r3, r2
 8001d5c:	f8c9 3000 	str.w	r3, [r9]
 8001d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d64:	460c      	mov	r4, r1
 8001d66:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d6a:	b112      	cbz	r2, 8001d72 <_printf_common+0x2a>
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f8c9 3000 	str.w	r3, [r9]
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	0699      	lsls	r1, r3, #26
 8001d76:	bf42      	ittt	mi
 8001d78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d7c:	3302      	addmi	r3, #2
 8001d7e:	f8c9 3000 	strmi.w	r3, [r9]
 8001d82:	6825      	ldr	r5, [r4, #0]
 8001d84:	f015 0506 	ands.w	r5, r5, #6
 8001d88:	d107      	bne.n	8001d9a <_printf_common+0x52>
 8001d8a:	f104 0a19 	add.w	sl, r4, #25
 8001d8e:	68e3      	ldr	r3, [r4, #12]
 8001d90:	f8d9 2000 	ldr.w	r2, [r9]
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	429d      	cmp	r5, r3
 8001d98:	db2a      	blt.n	8001df0 <_printf_common+0xa8>
 8001d9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	3300      	adds	r3, #0
 8001da2:	bf18      	it	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	0692      	lsls	r2, r2, #26
 8001da8:	d42f      	bmi.n	8001e0a <_printf_common+0xc2>
 8001daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dae:	4639      	mov	r1, r7
 8001db0:	4630      	mov	r0, r6
 8001db2:	47c0      	blx	r8
 8001db4:	3001      	adds	r0, #1
 8001db6:	d022      	beq.n	8001dfe <_printf_common+0xb6>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	68e5      	ldr	r5, [r4, #12]
 8001dbc:	f003 0306 	and.w	r3, r3, #6
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	bf18      	it	ne
 8001dc4:	2500      	movne	r5, #0
 8001dc6:	f8d9 2000 	ldr.w	r2, [r9]
 8001dca:	f04f 0900 	mov.w	r9, #0
 8001dce:	bf08      	it	eq
 8001dd0:	1aad      	subeq	r5, r5, r2
 8001dd2:	68a3      	ldr	r3, [r4, #8]
 8001dd4:	6922      	ldr	r2, [r4, #16]
 8001dd6:	bf08      	it	eq
 8001dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	bfc4      	itt	gt
 8001de0:	1a9b      	subgt	r3, r3, r2
 8001de2:	18ed      	addgt	r5, r5, r3
 8001de4:	341a      	adds	r4, #26
 8001de6:	454d      	cmp	r5, r9
 8001de8:	d11b      	bne.n	8001e22 <_printf_common+0xda>
 8001dea:	2000      	movs	r0, #0
 8001dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df0:	2301      	movs	r3, #1
 8001df2:	4652      	mov	r2, sl
 8001df4:	4639      	mov	r1, r7
 8001df6:	4630      	mov	r0, r6
 8001df8:	47c0      	blx	r8
 8001dfa:	3001      	adds	r0, #1
 8001dfc:	d103      	bne.n	8001e06 <_printf_common+0xbe>
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e06:	3501      	adds	r5, #1
 8001e08:	e7c1      	b.n	8001d8e <_printf_common+0x46>
 8001e0a:	2030      	movs	r0, #48	; 0x30
 8001e0c:	18e1      	adds	r1, r4, r3
 8001e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e18:	4422      	add	r2, r4
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e20:	e7c3      	b.n	8001daa <_printf_common+0x62>
 8001e22:	2301      	movs	r3, #1
 8001e24:	4622      	mov	r2, r4
 8001e26:	4639      	mov	r1, r7
 8001e28:	4630      	mov	r0, r6
 8001e2a:	47c0      	blx	r8
 8001e2c:	3001      	adds	r0, #1
 8001e2e:	d0e6      	beq.n	8001dfe <_printf_common+0xb6>
 8001e30:	f109 0901 	add.w	r9, r9, #1
 8001e34:	e7d7      	b.n	8001de6 <_printf_common+0x9e>
	...

08001e38 <_printf_i>:
 8001e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e3c:	4617      	mov	r7, r2
 8001e3e:	7e0a      	ldrb	r2, [r1, #24]
 8001e40:	b085      	sub	sp, #20
 8001e42:	2a6e      	cmp	r2, #110	; 0x6e
 8001e44:	4698      	mov	r8, r3
 8001e46:	4606      	mov	r6, r0
 8001e48:	460c      	mov	r4, r1
 8001e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e4c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001e50:	f000 80bc 	beq.w	8001fcc <_printf_i+0x194>
 8001e54:	d81a      	bhi.n	8001e8c <_printf_i+0x54>
 8001e56:	2a63      	cmp	r2, #99	; 0x63
 8001e58:	d02e      	beq.n	8001eb8 <_printf_i+0x80>
 8001e5a:	d80a      	bhi.n	8001e72 <_printf_i+0x3a>
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	f000 80c8 	beq.w	8001ff2 <_printf_i+0x1ba>
 8001e62:	2a58      	cmp	r2, #88	; 0x58
 8001e64:	f000 808a 	beq.w	8001f7c <_printf_i+0x144>
 8001e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001e70:	e02a      	b.n	8001ec8 <_printf_i+0x90>
 8001e72:	2a64      	cmp	r2, #100	; 0x64
 8001e74:	d001      	beq.n	8001e7a <_printf_i+0x42>
 8001e76:	2a69      	cmp	r2, #105	; 0x69
 8001e78:	d1f6      	bne.n	8001e68 <_printf_i+0x30>
 8001e7a:	6821      	ldr	r1, [r4, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e82:	d023      	beq.n	8001ecc <_printf_i+0x94>
 8001e84:	1d11      	adds	r1, r2, #4
 8001e86:	6019      	str	r1, [r3, #0]
 8001e88:	6813      	ldr	r3, [r2, #0]
 8001e8a:	e027      	b.n	8001edc <_printf_i+0xa4>
 8001e8c:	2a73      	cmp	r2, #115	; 0x73
 8001e8e:	f000 80b4 	beq.w	8001ffa <_printf_i+0x1c2>
 8001e92:	d808      	bhi.n	8001ea6 <_printf_i+0x6e>
 8001e94:	2a6f      	cmp	r2, #111	; 0x6f
 8001e96:	d02a      	beq.n	8001eee <_printf_i+0xb6>
 8001e98:	2a70      	cmp	r2, #112	; 0x70
 8001e9a:	d1e5      	bne.n	8001e68 <_printf_i+0x30>
 8001e9c:	680a      	ldr	r2, [r1, #0]
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	600a      	str	r2, [r1, #0]
 8001ea4:	e003      	b.n	8001eae <_printf_i+0x76>
 8001ea6:	2a75      	cmp	r2, #117	; 0x75
 8001ea8:	d021      	beq.n	8001eee <_printf_i+0xb6>
 8001eaa:	2a78      	cmp	r2, #120	; 0x78
 8001eac:	d1dc      	bne.n	8001e68 <_printf_i+0x30>
 8001eae:	2278      	movs	r2, #120	; 0x78
 8001eb0:	496f      	ldr	r1, [pc, #444]	; (8002070 <_printf_i+0x238>)
 8001eb2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001eb6:	e064      	b.n	8001f82 <_printf_i+0x14a>
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001ebe:	1d11      	adds	r1, r2, #4
 8001ec0:	6019      	str	r1, [r3, #0]
 8001ec2:	6813      	ldr	r3, [r2, #0]
 8001ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0a3      	b.n	8002014 <_printf_i+0x1dc>
 8001ecc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ed0:	f102 0104 	add.w	r1, r2, #4
 8001ed4:	6019      	str	r1, [r3, #0]
 8001ed6:	d0d7      	beq.n	8001e88 <_printf_i+0x50>
 8001ed8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da03      	bge.n	8001ee8 <_printf_i+0xb0>
 8001ee0:	222d      	movs	r2, #45	; 0x2d
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001ee8:	4962      	ldr	r1, [pc, #392]	; (8002074 <_printf_i+0x23c>)
 8001eea:	220a      	movs	r2, #10
 8001eec:	e017      	b.n	8001f1e <_printf_i+0xe6>
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001ef6:	d003      	beq.n	8001f00 <_printf_i+0xc8>
 8001ef8:	1d08      	adds	r0, r1, #4
 8001efa:	6018      	str	r0, [r3, #0]
 8001efc:	680b      	ldr	r3, [r1, #0]
 8001efe:	e006      	b.n	8001f0e <_printf_i+0xd6>
 8001f00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f04:	f101 0004 	add.w	r0, r1, #4
 8001f08:	6018      	str	r0, [r3, #0]
 8001f0a:	d0f7      	beq.n	8001efc <_printf_i+0xc4>
 8001f0c:	880b      	ldrh	r3, [r1, #0]
 8001f0e:	2a6f      	cmp	r2, #111	; 0x6f
 8001f10:	bf14      	ite	ne
 8001f12:	220a      	movne	r2, #10
 8001f14:	2208      	moveq	r2, #8
 8001f16:	4957      	ldr	r1, [pc, #348]	; (8002074 <_printf_i+0x23c>)
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001f1e:	6865      	ldr	r5, [r4, #4]
 8001f20:	2d00      	cmp	r5, #0
 8001f22:	60a5      	str	r5, [r4, #8]
 8001f24:	f2c0 809c 	blt.w	8002060 <_printf_i+0x228>
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	f020 0004 	bic.w	r0, r0, #4
 8001f2e:	6020      	str	r0, [r4, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d13f      	bne.n	8001fb4 <_printf_i+0x17c>
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	f040 8095 	bne.w	8002064 <_printf_i+0x22c>
 8001f3a:	4675      	mov	r5, lr
 8001f3c:	2a08      	cmp	r2, #8
 8001f3e:	d10b      	bne.n	8001f58 <_printf_i+0x120>
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	07da      	lsls	r2, r3, #31
 8001f44:	d508      	bpl.n	8001f58 <_printf_i+0x120>
 8001f46:	6923      	ldr	r3, [r4, #16]
 8001f48:	6862      	ldr	r2, [r4, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	bfde      	ittt	le
 8001f4e:	2330      	movle	r3, #48	; 0x30
 8001f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f58:	ebae 0305 	sub.w	r3, lr, r5
 8001f5c:	6123      	str	r3, [r4, #16]
 8001f5e:	f8cd 8000 	str.w	r8, [sp]
 8001f62:	463b      	mov	r3, r7
 8001f64:	aa03      	add	r2, sp, #12
 8001f66:	4621      	mov	r1, r4
 8001f68:	4630      	mov	r0, r6
 8001f6a:	f7ff feed 	bl	8001d48 <_printf_common>
 8001f6e:	3001      	adds	r0, #1
 8001f70:	d155      	bne.n	800201e <_printf_i+0x1e6>
 8001f72:	f04f 30ff 	mov.w	r0, #4294967295
 8001f76:	b005      	add	sp, #20
 8001f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f7c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001f80:	493c      	ldr	r1, [pc, #240]	; (8002074 <_printf_i+0x23c>)
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f8a:	f100 0504 	add.w	r5, r0, #4
 8001f8e:	601d      	str	r5, [r3, #0]
 8001f90:	d001      	beq.n	8001f96 <_printf_i+0x15e>
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	e002      	b.n	8001f9c <_printf_i+0x164>
 8001f96:	0655      	lsls	r5, r2, #25
 8001f98:	d5fb      	bpl.n	8001f92 <_printf_i+0x15a>
 8001f9a:	8803      	ldrh	r3, [r0, #0]
 8001f9c:	07d0      	lsls	r0, r2, #31
 8001f9e:	bf44      	itt	mi
 8001fa0:	f042 0220 	orrmi.w	r2, r2, #32
 8001fa4:	6022      	strmi	r2, [r4, #0]
 8001fa6:	b91b      	cbnz	r3, 8001fb0 <_printf_i+0x178>
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	f022 0220 	bic.w	r2, r2, #32
 8001fae:	6022      	str	r2, [r4, #0]
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	e7b1      	b.n	8001f18 <_printf_i+0xe0>
 8001fb4:	4675      	mov	r5, lr
 8001fb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8001fba:	fb02 3310 	mls	r3, r2, r0, r3
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d1f5      	bne.n	8001fb6 <_printf_i+0x17e>
 8001fca:	e7b7      	b.n	8001f3c <_printf_i+0x104>
 8001fcc:	6808      	ldr	r0, [r1, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fd4:	6949      	ldr	r1, [r1, #20]
 8001fd6:	d004      	beq.n	8001fe2 <_printf_i+0x1aa>
 8001fd8:	1d10      	adds	r0, r2, #4
 8001fda:	6018      	str	r0, [r3, #0]
 8001fdc:	6813      	ldr	r3, [r2, #0]
 8001fde:	6019      	str	r1, [r3, #0]
 8001fe0:	e007      	b.n	8001ff2 <_printf_i+0x1ba>
 8001fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fe6:	f102 0004 	add.w	r0, r2, #4
 8001fea:	6018      	str	r0, [r3, #0]
 8001fec:	6813      	ldr	r3, [r2, #0]
 8001fee:	d0f6      	beq.n	8001fde <_printf_i+0x1a6>
 8001ff0:	8019      	strh	r1, [r3, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4675      	mov	r5, lr
 8001ff6:	6123      	str	r3, [r4, #16]
 8001ff8:	e7b1      	b.n	8001f5e <_printf_i+0x126>
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	1d11      	adds	r1, r2, #4
 8001ffe:	6019      	str	r1, [r3, #0]
 8002000:	6815      	ldr	r5, [r2, #0]
 8002002:	2100      	movs	r1, #0
 8002004:	6862      	ldr	r2, [r4, #4]
 8002006:	4628      	mov	r0, r5
 8002008:	f000 f843 	bl	8002092 <memchr>
 800200c:	b108      	cbz	r0, 8002012 <_printf_i+0x1da>
 800200e:	1b40      	subs	r0, r0, r5
 8002010:	6060      	str	r0, [r4, #4]
 8002012:	6863      	ldr	r3, [r4, #4]
 8002014:	6123      	str	r3, [r4, #16]
 8002016:	2300      	movs	r3, #0
 8002018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800201c:	e79f      	b.n	8001f5e <_printf_i+0x126>
 800201e:	6923      	ldr	r3, [r4, #16]
 8002020:	462a      	mov	r2, r5
 8002022:	4639      	mov	r1, r7
 8002024:	4630      	mov	r0, r6
 8002026:	47c0      	blx	r8
 8002028:	3001      	adds	r0, #1
 800202a:	d0a2      	beq.n	8001f72 <_printf_i+0x13a>
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	079b      	lsls	r3, r3, #30
 8002030:	d507      	bpl.n	8002042 <_printf_i+0x20a>
 8002032:	2500      	movs	r5, #0
 8002034:	f104 0919 	add.w	r9, r4, #25
 8002038:	68e3      	ldr	r3, [r4, #12]
 800203a:	9a03      	ldr	r2, [sp, #12]
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	429d      	cmp	r5, r3
 8002040:	db05      	blt.n	800204e <_printf_i+0x216>
 8002042:	68e0      	ldr	r0, [r4, #12]
 8002044:	9b03      	ldr	r3, [sp, #12]
 8002046:	4298      	cmp	r0, r3
 8002048:	bfb8      	it	lt
 800204a:	4618      	movlt	r0, r3
 800204c:	e793      	b.n	8001f76 <_printf_i+0x13e>
 800204e:	2301      	movs	r3, #1
 8002050:	464a      	mov	r2, r9
 8002052:	4639      	mov	r1, r7
 8002054:	4630      	mov	r0, r6
 8002056:	47c0      	blx	r8
 8002058:	3001      	adds	r0, #1
 800205a:	d08a      	beq.n	8001f72 <_printf_i+0x13a>
 800205c:	3501      	adds	r5, #1
 800205e:	e7eb      	b.n	8002038 <_printf_i+0x200>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1a7      	bne.n	8001fb4 <_printf_i+0x17c>
 8002064:	780b      	ldrb	r3, [r1, #0]
 8002066:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800206a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800206e:	e765      	b.n	8001f3c <_printf_i+0x104>
 8002070:	080076d1 	.word	0x080076d1
 8002074:	080076c0 	.word	0x080076c0

08002078 <__ascii_wctomb>:
 8002078:	b149      	cbz	r1, 800208e <__ascii_wctomb+0x16>
 800207a:	2aff      	cmp	r2, #255	; 0xff
 800207c:	bf8b      	itete	hi
 800207e:	238a      	movhi	r3, #138	; 0x8a
 8002080:	700a      	strbls	r2, [r1, #0]
 8002082:	6003      	strhi	r3, [r0, #0]
 8002084:	2001      	movls	r0, #1
 8002086:	bf88      	it	hi
 8002088:	f04f 30ff 	movhi.w	r0, #4294967295
 800208c:	4770      	bx	lr
 800208e:	4608      	mov	r0, r1
 8002090:	4770      	bx	lr

08002092 <memchr>:
 8002092:	b510      	push	{r4, lr}
 8002094:	b2c9      	uxtb	r1, r1
 8002096:	4402      	add	r2, r0
 8002098:	4290      	cmp	r0, r2
 800209a:	4603      	mov	r3, r0
 800209c:	d101      	bne.n	80020a2 <memchr+0x10>
 800209e:	2000      	movs	r0, #0
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	781c      	ldrb	r4, [r3, #0]
 80020a4:	3001      	adds	r0, #1
 80020a6:	428c      	cmp	r4, r1
 80020a8:	d1f6      	bne.n	8002098 <memchr+0x6>
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd10      	pop	{r4, pc}

080020ae <memcpy>:
 80020ae:	b510      	push	{r4, lr}
 80020b0:	1e43      	subs	r3, r0, #1
 80020b2:	440a      	add	r2, r1
 80020b4:	4291      	cmp	r1, r2
 80020b6:	d100      	bne.n	80020ba <memcpy+0xc>
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020c2:	e7f7      	b.n	80020b4 <memcpy+0x6>

080020c4 <memmove>:
 80020c4:	4288      	cmp	r0, r1
 80020c6:	b510      	push	{r4, lr}
 80020c8:	eb01 0302 	add.w	r3, r1, r2
 80020cc:	d803      	bhi.n	80020d6 <memmove+0x12>
 80020ce:	1e42      	subs	r2, r0, #1
 80020d0:	4299      	cmp	r1, r3
 80020d2:	d10c      	bne.n	80020ee <memmove+0x2a>
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	4298      	cmp	r0, r3
 80020d8:	d2f9      	bcs.n	80020ce <memmove+0xa>
 80020da:	1881      	adds	r1, r0, r2
 80020dc:	1ad2      	subs	r2, r2, r3
 80020de:	42d3      	cmn	r3, r2
 80020e0:	d100      	bne.n	80020e4 <memmove+0x20>
 80020e2:	bd10      	pop	{r4, pc}
 80020e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80020ec:	e7f7      	b.n	80020de <memmove+0x1a>
 80020ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80020f6:	e7eb      	b.n	80020d0 <memmove+0xc>

080020f8 <_free_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	4605      	mov	r5, r0
 80020fc:	2900      	cmp	r1, #0
 80020fe:	d043      	beq.n	8002188 <_free_r+0x90>
 8002100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002104:	1f0c      	subs	r4, r1, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	bfb8      	it	lt
 800210a:	18e4      	addlt	r4, r4, r3
 800210c:	f000 f8d4 	bl	80022b8 <__malloc_lock>
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <_free_r+0x94>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	4610      	mov	r0, r2
 8002116:	b933      	cbnz	r3, 8002126 <_free_r+0x2e>
 8002118:	6063      	str	r3, [r4, #4]
 800211a:	6014      	str	r4, [r2, #0]
 800211c:	4628      	mov	r0, r5
 800211e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002122:	f000 b8ca 	b.w	80022ba <__malloc_unlock>
 8002126:	42a3      	cmp	r3, r4
 8002128:	d90b      	bls.n	8002142 <_free_r+0x4a>
 800212a:	6821      	ldr	r1, [r4, #0]
 800212c:	1862      	adds	r2, r4, r1
 800212e:	4293      	cmp	r3, r2
 8002130:	bf01      	itttt	eq
 8002132:	681a      	ldreq	r2, [r3, #0]
 8002134:	685b      	ldreq	r3, [r3, #4]
 8002136:	1852      	addeq	r2, r2, r1
 8002138:	6022      	streq	r2, [r4, #0]
 800213a:	6063      	str	r3, [r4, #4]
 800213c:	6004      	str	r4, [r0, #0]
 800213e:	e7ed      	b.n	800211c <_free_r+0x24>
 8002140:	4613      	mov	r3, r2
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	b10a      	cbz	r2, 800214a <_free_r+0x52>
 8002146:	42a2      	cmp	r2, r4
 8002148:	d9fa      	bls.n	8002140 <_free_r+0x48>
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	1858      	adds	r0, r3, r1
 800214e:	42a0      	cmp	r0, r4
 8002150:	d10b      	bne.n	800216a <_free_r+0x72>
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	4401      	add	r1, r0
 8002156:	1858      	adds	r0, r3, r1
 8002158:	4282      	cmp	r2, r0
 800215a:	6019      	str	r1, [r3, #0]
 800215c:	d1de      	bne.n	800211c <_free_r+0x24>
 800215e:	6810      	ldr	r0, [r2, #0]
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	4401      	add	r1, r0
 8002164:	6019      	str	r1, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	e7d8      	b.n	800211c <_free_r+0x24>
 800216a:	d902      	bls.n	8002172 <_free_r+0x7a>
 800216c:	230c      	movs	r3, #12
 800216e:	602b      	str	r3, [r5, #0]
 8002170:	e7d4      	b.n	800211c <_free_r+0x24>
 8002172:	6820      	ldr	r0, [r4, #0]
 8002174:	1821      	adds	r1, r4, r0
 8002176:	428a      	cmp	r2, r1
 8002178:	bf01      	itttt	eq
 800217a:	6811      	ldreq	r1, [r2, #0]
 800217c:	6852      	ldreq	r2, [r2, #4]
 800217e:	1809      	addeq	r1, r1, r0
 8002180:	6021      	streq	r1, [r4, #0]
 8002182:	6062      	str	r2, [r4, #4]
 8002184:	605c      	str	r4, [r3, #4]
 8002186:	e7c9      	b.n	800211c <_free_r+0x24>
 8002188:	bd38      	pop	{r3, r4, r5, pc}
 800218a:	bf00      	nop
 800218c:	200001fc 	.word	0x200001fc

08002190 <_malloc_r>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	1ccd      	adds	r5, r1, #3
 8002194:	f025 0503 	bic.w	r5, r5, #3
 8002198:	3508      	adds	r5, #8
 800219a:	2d0c      	cmp	r5, #12
 800219c:	bf38      	it	cc
 800219e:	250c      	movcc	r5, #12
 80021a0:	2d00      	cmp	r5, #0
 80021a2:	4606      	mov	r6, r0
 80021a4:	db01      	blt.n	80021aa <_malloc_r+0x1a>
 80021a6:	42a9      	cmp	r1, r5
 80021a8:	d903      	bls.n	80021b2 <_malloc_r+0x22>
 80021aa:	230c      	movs	r3, #12
 80021ac:	6033      	str	r3, [r6, #0]
 80021ae:	2000      	movs	r0, #0
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	f000 f881 	bl	80022b8 <__malloc_lock>
 80021b6:	4a23      	ldr	r2, [pc, #140]	; (8002244 <_malloc_r+0xb4>)
 80021b8:	6814      	ldr	r4, [r2, #0]
 80021ba:	4621      	mov	r1, r4
 80021bc:	b991      	cbnz	r1, 80021e4 <_malloc_r+0x54>
 80021be:	4c22      	ldr	r4, [pc, #136]	; (8002248 <_malloc_r+0xb8>)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	b91b      	cbnz	r3, 80021cc <_malloc_r+0x3c>
 80021c4:	4630      	mov	r0, r6
 80021c6:	f000 f867 	bl	8002298 <_sbrk_r>
 80021ca:	6020      	str	r0, [r4, #0]
 80021cc:	4629      	mov	r1, r5
 80021ce:	4630      	mov	r0, r6
 80021d0:	f000 f862 	bl	8002298 <_sbrk_r>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	d126      	bne.n	8002226 <_malloc_r+0x96>
 80021d8:	230c      	movs	r3, #12
 80021da:	4630      	mov	r0, r6
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	f000 f86c 	bl	80022ba <__malloc_unlock>
 80021e2:	e7e4      	b.n	80021ae <_malloc_r+0x1e>
 80021e4:	680b      	ldr	r3, [r1, #0]
 80021e6:	1b5b      	subs	r3, r3, r5
 80021e8:	d41a      	bmi.n	8002220 <_malloc_r+0x90>
 80021ea:	2b0b      	cmp	r3, #11
 80021ec:	d90f      	bls.n	800220e <_malloc_r+0x7e>
 80021ee:	600b      	str	r3, [r1, #0]
 80021f0:	18cc      	adds	r4, r1, r3
 80021f2:	50cd      	str	r5, [r1, r3]
 80021f4:	4630      	mov	r0, r6
 80021f6:	f000 f860 	bl	80022ba <__malloc_unlock>
 80021fa:	f104 000b 	add.w	r0, r4, #11
 80021fe:	1d23      	adds	r3, r4, #4
 8002200:	f020 0007 	bic.w	r0, r0, #7
 8002204:	1ac3      	subs	r3, r0, r3
 8002206:	d01b      	beq.n	8002240 <_malloc_r+0xb0>
 8002208:	425a      	negs	r2, r3
 800220a:	50e2      	str	r2, [r4, r3]
 800220c:	bd70      	pop	{r4, r5, r6, pc}
 800220e:	428c      	cmp	r4, r1
 8002210:	bf0b      	itete	eq
 8002212:	6863      	ldreq	r3, [r4, #4]
 8002214:	684b      	ldrne	r3, [r1, #4]
 8002216:	6013      	streq	r3, [r2, #0]
 8002218:	6063      	strne	r3, [r4, #4]
 800221a:	bf18      	it	ne
 800221c:	460c      	movne	r4, r1
 800221e:	e7e9      	b.n	80021f4 <_malloc_r+0x64>
 8002220:	460c      	mov	r4, r1
 8002222:	6849      	ldr	r1, [r1, #4]
 8002224:	e7ca      	b.n	80021bc <_malloc_r+0x2c>
 8002226:	1cc4      	adds	r4, r0, #3
 8002228:	f024 0403 	bic.w	r4, r4, #3
 800222c:	42a0      	cmp	r0, r4
 800222e:	d005      	beq.n	800223c <_malloc_r+0xac>
 8002230:	1a21      	subs	r1, r4, r0
 8002232:	4630      	mov	r0, r6
 8002234:	f000 f830 	bl	8002298 <_sbrk_r>
 8002238:	3001      	adds	r0, #1
 800223a:	d0cd      	beq.n	80021d8 <_malloc_r+0x48>
 800223c:	6025      	str	r5, [r4, #0]
 800223e:	e7d9      	b.n	80021f4 <_malloc_r+0x64>
 8002240:	bd70      	pop	{r4, r5, r6, pc}
 8002242:	bf00      	nop
 8002244:	200001fc 	.word	0x200001fc
 8002248:	20000200 	.word	0x20000200

0800224c <_realloc_r>:
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224e:	4607      	mov	r7, r0
 8002250:	4614      	mov	r4, r2
 8002252:	460e      	mov	r6, r1
 8002254:	b921      	cbnz	r1, 8002260 <_realloc_r+0x14>
 8002256:	4611      	mov	r1, r2
 8002258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800225c:	f7ff bf98 	b.w	8002190 <_malloc_r>
 8002260:	b922      	cbnz	r2, 800226c <_realloc_r+0x20>
 8002262:	f7ff ff49 	bl	80020f8 <_free_r>
 8002266:	4625      	mov	r5, r4
 8002268:	4628      	mov	r0, r5
 800226a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800226c:	f000 f826 	bl	80022bc <_malloc_usable_size_r>
 8002270:	4284      	cmp	r4, r0
 8002272:	d90f      	bls.n	8002294 <_realloc_r+0x48>
 8002274:	4621      	mov	r1, r4
 8002276:	4638      	mov	r0, r7
 8002278:	f7ff ff8a 	bl	8002190 <_malloc_r>
 800227c:	4605      	mov	r5, r0
 800227e:	2800      	cmp	r0, #0
 8002280:	d0f2      	beq.n	8002268 <_realloc_r+0x1c>
 8002282:	4631      	mov	r1, r6
 8002284:	4622      	mov	r2, r4
 8002286:	f7ff ff12 	bl	80020ae <memcpy>
 800228a:	4631      	mov	r1, r6
 800228c:	4638      	mov	r0, r7
 800228e:	f7ff ff33 	bl	80020f8 <_free_r>
 8002292:	e7e9      	b.n	8002268 <_realloc_r+0x1c>
 8002294:	4635      	mov	r5, r6
 8002296:	e7e7      	b.n	8002268 <_realloc_r+0x1c>

08002298 <_sbrk_r>:
 8002298:	b538      	push	{r3, r4, r5, lr}
 800229a:	2300      	movs	r3, #0
 800229c:	4c05      	ldr	r4, [pc, #20]	; (80022b4 <_sbrk_r+0x1c>)
 800229e:	4605      	mov	r5, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	6023      	str	r3, [r4, #0]
 80022a4:	f000 f814 	bl	80022d0 <_sbrk>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_sbrk_r+0x1a>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_sbrk_r+0x1a>
 80022b0:	602b      	str	r3, [r5, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	20000600 	.word	0x20000600

080022b8 <__malloc_lock>:
 80022b8:	4770      	bx	lr

080022ba <__malloc_unlock>:
 80022ba:	4770      	bx	lr

080022bc <_malloc_usable_size_r>:
 80022bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80022c0:	2800      	cmp	r0, #0
 80022c2:	f1a0 0004 	sub.w	r0, r0, #4
 80022c6:	bfbc      	itt	lt
 80022c8:	580b      	ldrlt	r3, [r1, r0]
 80022ca:	18c0      	addlt	r0, r0, r3
 80022cc:	4770      	bx	lr
	...

080022d0 <_sbrk>:
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <_sbrk+0x14>)
 80022d2:	4602      	mov	r2, r0
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	b909      	cbnz	r1, 80022dc <_sbrk+0xc>
 80022d8:	4903      	ldr	r1, [pc, #12]	; (80022e8 <_sbrk+0x18>)
 80022da:	6019      	str	r1, [r3, #0]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	4402      	add	r2, r0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	4770      	bx	lr
 80022e4:	20000204 	.word	0x20000204
 80022e8:	20000604 	.word	0x20000604

080022ec <_init>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr

080022f8 <_fini>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr
