
C:\Users\USER\Desktop\ProjetoMicroprocessados_Codigo\Version 1.0\Debug\Version 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001184  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001290  08001290  00011290  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080012c0  080012c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080012c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000005c  20000004  080012cc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000060  080012cc  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f435  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fce  00000000  00000000  0002f462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048f4  00000000  00000000  00031430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000698  00000000  00000000  00035d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e0  00000000  00000000  000363c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f82  00000000  00000000  00036da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a65  00000000  00000000  0003ad22  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003d787  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000126c  00000000  00000000  0003d804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001278 	.word	0x08001278

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001278 	.word	0x08001278

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000150:	f000 fcea 	bl	8000b28 <HAL_RCC_GetHCLKFreq>
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f87c 	bl	8000258 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f842 	bl	80001f0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}

08000170 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000170:	4a07      	ldr	r2, [pc, #28]	; (8000190 <HAL_Init+0x20>)
{
 8000172:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000176:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	f043 0310 	orr.w	r3, r3, #16
 800017c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017e:	f000 f825 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000182:	2000      	movs	r0, #0
 8000184:	f7ff ffe2 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 8000188:	f000 ff34 	bl	8000ff4 <HAL_MspInit>
}
 800018c:	2000      	movs	r0, #0
 800018e:	bd08      	pop	{r3, pc}
 8000190:	40022000 	.word	0x40022000

08000194 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000194:	4a02      	ldr	r2, [pc, #8]	; (80001a0 <HAL_IncTick+0xc>)
 8000196:	6813      	ldr	r3, [r2, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	6013      	str	r3, [r2, #0]
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000020 	.word	0x20000020

080001a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a4:	4b01      	ldr	r3, [pc, #4]	; (80001ac <HAL_GetTick+0x8>)
 80001a6:	6818      	ldr	r0, [r3, #0]
}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000020 	.word	0x20000020

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b0:	b513      	push	{r0, r1, r4, lr}
 80001b2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001b4:	f7ff fff6 	bl	80001a4 <HAL_GetTick>
 80001b8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001ba:	f7ff fff3 	bl	80001a4 <HAL_GetTick>
 80001be:	9b01      	ldr	r3, [sp, #4]
 80001c0:	1b00      	subs	r0, r0, r4
 80001c2:	4298      	cmp	r0, r3
 80001c4:	d3f9      	bcc.n	80001ba <HAL_Delay+0xa>
  {
  }
}
 80001c6:	b002      	add	sp, #8
 80001c8:	bd10      	pop	{r4, pc}
	...

080001cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001cc:	4a07      	ldr	r2, [pc, #28]	; (80001ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001da:	041b      	lsls	r3, r3, #16
 80001dc:	0c1b      	lsrs	r3, r3, #16
 80001de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001e8:	60d3      	str	r3, [r2, #12]
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f2:	b530      	push	{r4, r5, lr}
 80001f4:	68dc      	ldr	r4, [r3, #12]
 80001f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000200:	2b04      	cmp	r3, #4
 8000202:	bf28      	it	cs
 8000204:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000208:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020c:	bf98      	it	ls
 800020e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000210:	fa05 f303 	lsl.w	r3, r5, r3
 8000214:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	bf88      	it	hi
 800021a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800021c:	4019      	ands	r1, r3
 800021e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000220:	fa05 f404 	lsl.w	r4, r5, r4
 8000224:	3c01      	subs	r4, #1
 8000226:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000228:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022a:	ea42 0201 	orr.w	r2, r2, r1
 800022e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	bfaf      	iteee	ge
 8000234:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	4b06      	ldrlt	r3, [pc, #24]	; (8000254 <HAL_NVIC_SetPriority+0x64>)
 800023a:	f000 000f 	andlt.w	r0, r0, #15
 800023e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	bfa5      	ittet	ge
 8000242:	b2d2      	uxtbge	r2, r2
 8000244:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800024e:	bd30      	pop	{r4, r5, pc}
 8000250:	e000ed00 	.word	0xe000ed00
 8000254:	e000ed14 	.word	0xe000ed14

08000258 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000258:	3801      	subs	r0, #1
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d20a      	bcs.n	8000276 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000266:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800026c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000270:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000276:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000286:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	bf0c      	ite	eq
 800028c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000290:	f022 0204 	bicne.w	r2, r2, #4
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	4770      	bx	lr
 8000298:	e000e010 	.word	0xe000e010

0800029c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800029c:	4770      	bx	lr

0800029e <HAL_SYSTICK_IRQHandler>:
{
 800029e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002a0:	f7ff fffc 	bl	800029c <HAL_SYSTICK_Callback>
 80002a4:	bd08      	pop	{r3, pc}
	...

080002a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80002ac:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80002ae:	4616      	mov	r6, r2
 80002b0:	4b65      	ldr	r3, [pc, #404]	; (8000448 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002b2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000458 <HAL_GPIO_Init+0x1b0>
 80002b6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800045c <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 80002ba:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002be:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80002c0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002c8:	45a0      	cmp	r8, r4
 80002ca:	d17f      	bne.n	80003cc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002cc:	684d      	ldr	r5, [r1, #4]
 80002ce:	2d12      	cmp	r5, #18
 80002d0:	f000 80af 	beq.w	8000432 <HAL_GPIO_Init+0x18a>
 80002d4:	f200 8088 	bhi.w	80003e8 <HAL_GPIO_Init+0x140>
 80002d8:	2d02      	cmp	r5, #2
 80002da:	f000 80a7 	beq.w	800042c <HAL_GPIO_Init+0x184>
 80002de:	d87c      	bhi.n	80003da <HAL_GPIO_Init+0x132>
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	f000 808e 	beq.w	8000402 <HAL_GPIO_Init+0x15a>
 80002e6:	2d01      	cmp	r5, #1
 80002e8:	f000 809e 	beq.w	8000428 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002ec:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f0:	2cff      	cmp	r4, #255	; 0xff
 80002f2:	bf93      	iteet	ls
 80002f4:	4682      	movls	sl, r0
 80002f6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002fa:	3d08      	subhi	r5, #8
 80002fc:	f8d0 b000 	ldrls.w	fp, [r0]
 8000300:	bf92      	itee	ls
 8000302:	00b5      	lslls	r5, r6, #2
 8000304:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000308:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800030a:	fa09 f805 	lsl.w	r8, r9, r5
 800030e:	ea2b 0808 	bic.w	r8, fp, r8
 8000312:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000316:	bf88      	it	hi
 8000318:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800031c:	ea48 0505 	orr.w	r5, r8, r5
 8000320:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000324:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000328:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800032c:	d04e      	beq.n	80003cc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800032e:	4d47      	ldr	r5, [pc, #284]	; (800044c <HAL_GPIO_Init+0x1a4>)
 8000330:	4f46      	ldr	r7, [pc, #280]	; (800044c <HAL_GPIO_Init+0x1a4>)
 8000332:	69ad      	ldr	r5, [r5, #24]
 8000334:	f026 0803 	bic.w	r8, r6, #3
 8000338:	f045 0501 	orr.w	r5, r5, #1
 800033c:	61bd      	str	r5, [r7, #24]
 800033e:	69bd      	ldr	r5, [r7, #24]
 8000340:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000344:	f005 0501 	and.w	r5, r5, #1
 8000348:	9501      	str	r5, [sp, #4]
 800034a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800034e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000352:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000354:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 8000358:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800035c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000360:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000364:	4d3a      	ldr	r5, [pc, #232]	; (8000450 <HAL_GPIO_Init+0x1a8>)
 8000366:	42a8      	cmp	r0, r5
 8000368:	d068      	beq.n	800043c <HAL_GPIO_Init+0x194>
 800036a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800036e:	42a8      	cmp	r0, r5
 8000370:	d066      	beq.n	8000440 <HAL_GPIO_Init+0x198>
 8000372:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000376:	42a8      	cmp	r0, r5
 8000378:	d064      	beq.n	8000444 <HAL_GPIO_Init+0x19c>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	bf0c      	ite	eq
 8000382:	2503      	moveq	r5, #3
 8000384:	2504      	movne	r5, #4
 8000386:	fa05 f50b 	lsl.w	r5, r5, fp
 800038a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 800038e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000392:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000394:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000398:	bf14      	ite	ne
 800039a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800039c:	43a5      	biceq	r5, r4
 800039e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003a0:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003a2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80003a6:	bf14      	ite	ne
 80003a8:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80003aa:	43a5      	biceq	r5, r4
 80003ac:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003ae:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003b0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003b4:	bf14      	ite	ne
 80003b6:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80003b8:	43a5      	biceq	r5, r4
 80003ba:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003bc:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003be:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003c2:	bf14      	ite	ne
 80003c4:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80003c6:	ea25 0404 	biceq.w	r4, r5, r4
 80003ca:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80003cc:	3601      	adds	r6, #1
 80003ce:	2e10      	cmp	r6, #16
 80003d0:	f47f af73 	bne.w	80002ba <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003d4:	b003      	add	sp, #12
 80003d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003da:	2d03      	cmp	r5, #3
 80003dc:	d022      	beq.n	8000424 <HAL_GPIO_Init+0x17c>
 80003de:	2d11      	cmp	r5, #17
 80003e0:	d184      	bne.n	80002ec <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003e2:	68ca      	ldr	r2, [r1, #12]
 80003e4:	3204      	adds	r2, #4
          break;
 80003e6:	e781      	b.n	80002ec <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003e8:	4f1a      	ldr	r7, [pc, #104]	; (8000454 <HAL_GPIO_Init+0x1ac>)
 80003ea:	42bd      	cmp	r5, r7
 80003ec:	d009      	beq.n	8000402 <HAL_GPIO_Init+0x15a>
 80003ee:	d812      	bhi.n	8000416 <HAL_GPIO_Init+0x16e>
 80003f0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000460 <HAL_GPIO_Init+0x1b8>
 80003f4:	454d      	cmp	r5, r9
 80003f6:	d004      	beq.n	8000402 <HAL_GPIO_Init+0x15a>
 80003f8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003fc:	454d      	cmp	r5, r9
 80003fe:	f47f af75 	bne.w	80002ec <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000402:	688a      	ldr	r2, [r1, #8]
 8000404:	b1c2      	cbz	r2, 8000438 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000406:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000408:	bf0c      	ite	eq
 800040a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800040e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000412:	2208      	movs	r2, #8
 8000414:	e76a      	b.n	80002ec <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000416:	4575      	cmp	r5, lr
 8000418:	d0f3      	beq.n	8000402 <HAL_GPIO_Init+0x15a>
 800041a:	4565      	cmp	r5, ip
 800041c:	d0f1      	beq.n	8000402 <HAL_GPIO_Init+0x15a>
 800041e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000464 <HAL_GPIO_Init+0x1bc>
 8000422:	e7eb      	b.n	80003fc <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000424:	2200      	movs	r2, #0
 8000426:	e761      	b.n	80002ec <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000428:	68ca      	ldr	r2, [r1, #12]
          break;
 800042a:	e75f      	b.n	80002ec <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800042c:	68ca      	ldr	r2, [r1, #12]
 800042e:	3208      	adds	r2, #8
          break;
 8000430:	e75c      	b.n	80002ec <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000432:	68ca      	ldr	r2, [r1, #12]
 8000434:	320c      	adds	r2, #12
          break;
 8000436:	e759      	b.n	80002ec <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000438:	2204      	movs	r2, #4
 800043a:	e757      	b.n	80002ec <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800043c:	2500      	movs	r5, #0
 800043e:	e7a2      	b.n	8000386 <HAL_GPIO_Init+0xde>
 8000440:	2501      	movs	r5, #1
 8000442:	e7a0      	b.n	8000386 <HAL_GPIO_Init+0xde>
 8000444:	2502      	movs	r5, #2
 8000446:	e79e      	b.n	8000386 <HAL_GPIO_Init+0xde>
 8000448:	40010400 	.word	0x40010400
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800
 8000454:	10210000 	.word	0x10210000
 8000458:	10310000 	.word	0x10310000
 800045c:	10320000 	.word	0x10320000
 8000460:	10110000 	.word	0x10110000
 8000464:	10220000 	.word	0x10220000

08000468 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000468:	b10a      	cbz	r2, 800046e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800046a:	6101      	str	r1, [r0, #16]
 800046c:	4770      	bx	lr
 800046e:	0409      	lsls	r1, r1, #16
 8000470:	e7fb      	b.n	800046a <HAL_GPIO_WritePin+0x2>

08000472 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000472:	68c3      	ldr	r3, [r0, #12]
 8000474:	4059      	eors	r1, r3
 8000476:	60c1      	str	r1, [r0, #12]
 8000478:	4770      	bx	lr
	...

0800047c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800047c:	6803      	ldr	r3, [r0, #0]
{
 800047e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000482:	07de      	lsls	r6, r3, #31
{
 8000484:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000486:	d434      	bmi.n	80004f2 <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000488:	682b      	ldr	r3, [r5, #0]
 800048a:	079c      	lsls	r4, r3, #30
 800048c:	f100 80a7 	bmi.w	80005de <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000490:	682b      	ldr	r3, [r5, #0]
 8000492:	071a      	lsls	r2, r3, #28
 8000494:	d523      	bpl.n	80004de <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000496:	69aa      	ldr	r2, [r5, #24]
 8000498:	4cbe      	ldr	r4, [pc, #760]	; (8000794 <HAL_RCC_OscConfig+0x318>)
 800049a:	2301      	movs	r3, #1
 800049c:	49be      	ldr	r1, [pc, #760]	; (8000798 <HAL_RCC_OscConfig+0x31c>)
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f000 8115 	beq.w	80006ce <HAL_RCC_OscConfig+0x252>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004a4:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80004b0:	f7ff fe78 	bl	80001a4 <HAL_GetTick>
 80004b4:	2602      	movs	r6, #2
 80004b6:	4607      	mov	r7, r0
 80004b8:	fa96 f3a6 	rbit	r3, r6
 80004bc:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80004c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80004c2:	fa96 f3a6 	rbit	r3, r6
 80004c6:	fab3 f383 	clz	r3, r3
 80004ca:	f003 031f 	and.w	r3, r3, #31
 80004ce:	fa22 f303 	lsr.w	r3, r2, r3
 80004d2:	07db      	lsls	r3, r3, #31
 80004d4:	f140 80f4 	bpl.w	80006c0 <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff fe69 	bl	80001b0 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	0759      	lsls	r1, r3, #29
 80004e2:	f100 8114 	bmi.w	800070e <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e6:	69ea      	ldr	r2, [r5, #28]
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	f040 8193 	bne.w	8000814 <HAL_RCC_OscConfig+0x398>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ee:	2000      	movs	r0, #0
 80004f0:	e020      	b.n	8000534 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004f2:	4ca8      	ldr	r4, [pc, #672]	; (8000794 <HAL_RCC_OscConfig+0x318>)
 80004f4:	6863      	ldr	r3, [r4, #4]
 80004f6:	f003 030c 	and.w	r3, r3, #12
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d007      	beq.n	800050e <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004fe:	6863      	ldr	r3, [r4, #4]
 8000500:	f003 030c 	and.w	r3, r3, #12
 8000504:	2b08      	cmp	r3, #8
 8000506:	d118      	bne.n	800053a <HAL_RCC_OscConfig+0xbe>
 8000508:	6863      	ldr	r3, [r4, #4]
 800050a:	03d8      	lsls	r0, r3, #15
 800050c:	d515      	bpl.n	800053a <HAL_RCC_OscConfig+0xbe>
 800050e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000512:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000516:	6822      	ldr	r2, [r4, #0]
 8000518:	fa93 f3a3 	rbit	r3, r3
 800051c:	fab3 f383 	clz	r3, r3
 8000520:	f003 031f 	and.w	r3, r3, #31
 8000524:	fa22 f303 	lsr.w	r3, r2, r3
 8000528:	07d9      	lsls	r1, r3, #31
 800052a:	d5ad      	bpl.n	8000488 <HAL_RCC_OscConfig+0xc>
 800052c:	686b      	ldr	r3, [r5, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1aa      	bne.n	8000488 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000532:	2001      	movs	r0, #1
}
 8000534:	b003      	add	sp, #12
 8000536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053a:	686b      	ldr	r3, [r5, #4]
 800053c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000540:	d11c      	bne.n	800057c <HAL_RCC_OscConfig+0x100>
 8000542:	6823      	ldr	r3, [r4, #0]
 8000544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000548:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800054a:	f7ff fe2b 	bl	80001a4 <HAL_GetTick>
 800054e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000552:	4607      	mov	r7, r0
 8000554:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000558:	6822      	ldr	r2, [r4, #0]
 800055a:	fa96 f3a6 	rbit	r3, r6
 800055e:	fab3 f383 	clz	r3, r3
 8000562:	f003 031f 	and.w	r3, r3, #31
 8000566:	fa22 f303 	lsr.w	r3, r2, r3
 800056a:	07da      	lsls	r2, r3, #31
 800056c:	d48c      	bmi.n	8000488 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800056e:	f7ff fe19 	bl	80001a4 <HAL_GetTick>
 8000572:	1bc0      	subs	r0, r0, r7
 8000574:	2864      	cmp	r0, #100	; 0x64
 8000576:	d9ed      	bls.n	8000554 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8000578:	2003      	movs	r0, #3
 800057a:	e7db      	b.n	8000534 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057c:	bb03      	cbnz	r3, 80005c0 <HAL_RCC_OscConfig+0x144>
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000588:	6023      	str	r3, [r4, #0]
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000590:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000592:	f7ff fe07 	bl	80001a4 <HAL_GetTick>
 8000596:	4607      	mov	r7, r0
 8000598:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800059c:	6822      	ldr	r2, [r4, #0]
 800059e:	fa96 f3a6 	rbit	r3, r6
 80005a2:	fab3 f383 	clz	r3, r3
 80005a6:	f003 031f 	and.w	r3, r3, #31
 80005aa:	fa22 f303 	lsr.w	r3, r2, r3
 80005ae:	07db      	lsls	r3, r3, #31
 80005b0:	f57f af6a 	bpl.w	8000488 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005b4:	f7ff fdf6 	bl	80001a4 <HAL_GetTick>
 80005b8:	1bc0      	subs	r0, r0, r7
 80005ba:	2864      	cmp	r0, #100	; 0x64
 80005bc:	d9ec      	bls.n	8000598 <HAL_RCC_OscConfig+0x11c>
 80005be:	e7db      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	d103      	bne.n	80005d0 <HAL_RCC_OscConfig+0x154>
 80005c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005cc:	6023      	str	r3, [r4, #0]
 80005ce:	e7b8      	b.n	8000542 <HAL_RCC_OscConfig+0xc6>
 80005d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d4:	6023      	str	r3, [r4, #0]
 80005d6:	6823      	ldr	r3, [r4, #0]
 80005d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005dc:	e7b4      	b.n	8000548 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005de:	4c6d      	ldr	r4, [pc, #436]	; (8000794 <HAL_RCC_OscConfig+0x318>)
 80005e0:	6863      	ldr	r3, [r4, #4]
 80005e2:	f013 0f0c 	tst.w	r3, #12
 80005e6:	d007      	beq.n	80005f8 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005e8:	6863      	ldr	r3, [r4, #4]
 80005ea:	f003 030c 	and.w	r3, r3, #12
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d120      	bne.n	8000634 <HAL_RCC_OscConfig+0x1b8>
 80005f2:	6863      	ldr	r3, [r4, #4]
 80005f4:	03df      	lsls	r7, r3, #15
 80005f6:	d41d      	bmi.n	8000634 <HAL_RCC_OscConfig+0x1b8>
 80005f8:	2302      	movs	r3, #2
 80005fa:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005fe:	6822      	ldr	r2, [r4, #0]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	fab3 f383 	clz	r3, r3
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	fa22 f303 	lsr.w	r3, r2, r3
 8000610:	07de      	lsls	r6, r3, #31
 8000612:	d502      	bpl.n	800061a <HAL_RCC_OscConfig+0x19e>
 8000614:	692b      	ldr	r3, [r5, #16]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d18b      	bne.n	8000532 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800061a:	6821      	ldr	r1, [r4, #0]
 800061c:	23f8      	movs	r3, #248	; 0xf8
 800061e:	fa93 f3a3 	rbit	r3, r3
 8000622:	fab3 f283 	clz	r2, r3
 8000626:	696b      	ldr	r3, [r5, #20]
 8000628:	4093      	lsls	r3, r2
 800062a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800062e:	4313      	orrs	r3, r2
 8000630:	6023      	str	r3, [r4, #0]
 8000632:	e72d      	b.n	8000490 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000634:	692a      	ldr	r2, [r5, #16]
 8000636:	2301      	movs	r3, #1
 8000638:	b302      	cbz	r2, 800067c <HAL_RCC_OscConfig+0x200>
 800063a:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 800063e:	fab2 f282 	clz	r2, r2
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000648:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 800064c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800064e:	f7ff fda9 	bl	80001a4 <HAL_GetTick>
 8000652:	2602      	movs	r6, #2
 8000654:	4607      	mov	r7, r0
 8000656:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800065a:	6822      	ldr	r2, [r4, #0]
 800065c:	fa96 f3a6 	rbit	r3, r6
 8000660:	fab3 f383 	clz	r3, r3
 8000664:	f003 031f 	and.w	r3, r3, #31
 8000668:	fa22 f303 	lsr.w	r3, r2, r3
 800066c:	07d8      	lsls	r0, r3, #31
 800066e:	d4d4      	bmi.n	800061a <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000670:	f7ff fd98 	bl	80001a4 <HAL_GetTick>
 8000674:	1bc0      	subs	r0, r0, r7
 8000676:	2802      	cmp	r0, #2
 8000678:	d9ed      	bls.n	8000656 <HAL_RCC_OscConfig+0x1da>
 800067a:	e77d      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
 800067c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000680:	fab3 f383 	clz	r3, r3
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800068a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800068e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000690:	f7ff fd88 	bl	80001a4 <HAL_GetTick>
 8000694:	2602      	movs	r6, #2
 8000696:	4607      	mov	r7, r0
 8000698:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800069c:	6822      	ldr	r2, [r4, #0]
 800069e:	fa96 f3a6 	rbit	r3, r6
 80006a2:	fab3 f383 	clz	r3, r3
 80006a6:	f003 031f 	and.w	r3, r3, #31
 80006aa:	fa22 f303 	lsr.w	r3, r2, r3
 80006ae:	07d9      	lsls	r1, r3, #31
 80006b0:	f57f aeee 	bpl.w	8000490 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b4:	f7ff fd76 	bl	80001a4 <HAL_GetTick>
 80006b8:	1bc0      	subs	r0, r0, r7
 80006ba:	2802      	cmp	r0, #2
 80006bc:	d9ec      	bls.n	8000698 <HAL_RCC_OscConfig+0x21c>
 80006be:	e75b      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006c0:	f7ff fd70 	bl	80001a4 <HAL_GetTick>
 80006c4:	1bc0      	subs	r0, r0, r7
 80006c6:	2802      	cmp	r0, #2
 80006c8:	f67f aef6 	bls.w	80004b8 <HAL_RCC_OscConfig+0x3c>
 80006cc:	e754      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
 80006ce:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 80006d2:	fab3 f383 	clz	r3, r3
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 80006da:	f7ff fd63 	bl	80001a4 <HAL_GetTick>
 80006de:	2602      	movs	r6, #2
 80006e0:	4607      	mov	r7, r0
 80006e2:	fa96 f3a6 	rbit	r3, r6
 80006e6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006ec:	fa96 f3a6 	rbit	r3, r6
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	fa22 f303 	lsr.w	r3, r2, r3
 80006fc:	07d8      	lsls	r0, r3, #31
 80006fe:	f57f aeee 	bpl.w	80004de <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000702:	f7ff fd4f 	bl	80001a4 <HAL_GetTick>
 8000706:	1bc0      	subs	r0, r0, r7
 8000708:	2802      	cmp	r0, #2
 800070a:	d9ea      	bls.n	80006e2 <HAL_RCC_OscConfig+0x266>
 800070c:	e734      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4c21      	ldr	r4, [pc, #132]	; (8000794 <HAL_RCC_OscConfig+0x318>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000710:	4e22      	ldr	r6, [pc, #136]	; (800079c <HAL_RCC_OscConfig+0x320>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	69e3      	ldr	r3, [r4, #28]
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	61e3      	str	r3, [r4, #28]
 800071a:	69e3      	ldr	r3, [r4, #28]
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000724:	6833      	ldr	r3, [r6, #0]
 8000726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800072c:	f7ff fd3a 	bl	80001a4 <HAL_GetTick>
 8000730:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000732:	6833      	ldr	r3, [r6, #0]
 8000734:	05da      	lsls	r2, r3, #23
 8000736:	d526      	bpl.n	8000786 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000738:	68eb      	ldr	r3, [r5, #12]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d130      	bne.n	80007a0 <HAL_RCC_OscConfig+0x324>
 800073e:	6a23      	ldr	r3, [r4, #32]
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000746:	f7ff fd2d 	bl	80001a4 <HAL_GetTick>
 800074a:	2602      	movs	r6, #2
 800074c:	4681      	mov	r9, r0
 800074e:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000750:	f241 3788 	movw	r7, #5000	; 0x1388
 8000754:	fa96 f3a6 	rbit	r3, r6
 8000758:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800075c:	2b00      	cmp	r3, #0
 800075e:	d055      	beq.n	800080c <HAL_RCC_OscConfig+0x390>
 8000760:	6a22      	ldr	r2, [r4, #32]
 8000762:	fa98 f3a8 	rbit	r3, r8
 8000766:	fab3 f383 	clz	r3, r3
 800076a:	f003 031f 	and.w	r3, r3, #31
 800076e:	fa22 f303 	lsr.w	r3, r2, r3
 8000772:	07db      	lsls	r3, r3, #31
 8000774:	f53f aeb7 	bmi.w	80004e6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000778:	f7ff fd14 	bl	80001a4 <HAL_GetTick>
 800077c:	eba0 0009 	sub.w	r0, r0, r9
 8000780:	42b8      	cmp	r0, r7
 8000782:	d9e7      	bls.n	8000754 <HAL_RCC_OscConfig+0x2d8>
 8000784:	e6f8      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000786:	f7ff fd0d 	bl	80001a4 <HAL_GetTick>
 800078a:	1bc0      	subs	r0, r0, r7
 800078c:	2864      	cmp	r0, #100	; 0x64
 800078e:	d9d0      	bls.n	8000732 <HAL_RCC_OscConfig+0x2b6>
 8000790:	e6f2      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	42420480 	.word	0x42420480
 800079c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a0:	bb33      	cbnz	r3, 80007f0 <HAL_RCC_OscConfig+0x374>
 80007a2:	6a23      	ldr	r3, [r4, #32]
 80007a4:	2602      	movs	r6, #2
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	6223      	str	r3, [r4, #32]
 80007ac:	6a23      	ldr	r3, [r4, #32]
 80007ae:	4637      	mov	r7, r6
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007b6:	f7ff fcf5 	bl	80001a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007ba:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007be:	4680      	mov	r8, r0
 80007c0:	fa96 f3a6 	rbit	r3, r6
 80007c4:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007c8:	b313      	cbz	r3, 8000810 <HAL_RCC_OscConfig+0x394>
 80007ca:	6a22      	ldr	r2, [r4, #32]
 80007cc:	fa97 f3a7 	rbit	r3, r7
 80007d0:	fab3 f383 	clz	r3, r3
 80007d4:	f003 031f 	and.w	r3, r3, #31
 80007d8:	fa22 f303 	lsr.w	r3, r2, r3
 80007dc:	07d8      	lsls	r0, r3, #31
 80007de:	f57f ae82 	bpl.w	80004e6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007e2:	f7ff fcdf 	bl	80001a4 <HAL_GetTick>
 80007e6:	eba0 0008 	sub.w	r0, r0, r8
 80007ea:	4548      	cmp	r0, r9
 80007ec:	d9e8      	bls.n	80007c0 <HAL_RCC_OscConfig+0x344>
 80007ee:	e6c3      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	6a23      	ldr	r3, [r4, #32]
 80007f4:	d103      	bne.n	80007fe <HAL_RCC_OscConfig+0x382>
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6223      	str	r3, [r4, #32]
 80007fc:	e79f      	b.n	800073e <HAL_RCC_OscConfig+0x2c2>
 80007fe:	f023 0301 	bic.w	r3, r3, #1
 8000802:	6223      	str	r3, [r4, #32]
 8000804:	6a23      	ldr	r3, [r4, #32]
 8000806:	f023 0304 	bic.w	r3, r3, #4
 800080a:	e79b      	b.n	8000744 <HAL_RCC_OscConfig+0x2c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800080c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800080e:	e7a8      	b.n	8000762 <HAL_RCC_OscConfig+0x2e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000810:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000812:	e7db      	b.n	80007cc <HAL_RCC_OscConfig+0x350>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000814:	4c44      	ldr	r4, [pc, #272]	; (8000928 <HAL_RCC_OscConfig+0x4ac>)
 8000816:	6863      	ldr	r3, [r4, #4]
 8000818:	f003 030c 	and.w	r3, r3, #12
 800081c:	2b08      	cmp	r3, #8
 800081e:	f43f ae88 	beq.w	8000532 <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000822:	2a02      	cmp	r2, #2
 8000824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000828:	d159      	bne.n	80008de <HAL_RCC_OscConfig+0x462>
 800082a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800082e:	fab3 f383 	clz	r3, r3
 8000832:	2200      	movs	r2, #0
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800083a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800083e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000840:	f7ff fcb0 	bl	80001a4 <HAL_GetTick>
 8000844:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000848:	4607      	mov	r7, r0
 800084a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800084e:	6822      	ldr	r2, [r4, #0]
 8000850:	fa96 f3a6 	rbit	r3, r6
 8000854:	fab3 f383 	clz	r3, r3
 8000858:	f003 031f 	and.w	r3, r3, #31
 800085c:	fa22 f303 	lsr.w	r3, r2, r3
 8000860:	07d9      	lsls	r1, r3, #31
 8000862:	d436      	bmi.n	80008d2 <HAL_RCC_OscConfig+0x456>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000864:	6a2b      	ldr	r3, [r5, #32]
 8000866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800086a:	d105      	bne.n	8000878 <HAL_RCC_OscConfig+0x3fc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800086c:	6862      	ldr	r2, [r4, #4]
 800086e:	68a9      	ldr	r1, [r5, #8]
 8000870:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000874:	430a      	orrs	r2, r1
 8000876:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000878:	6862      	ldr	r2, [r4, #4]
 800087a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800087c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000880:	430b      	orrs	r3, r1
 8000882:	4313      	orrs	r3, r2
 8000884:	6063      	str	r3, [r4, #4]
 8000886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800088a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800088e:	fab3 f383 	clz	r3, r3
 8000892:	2201      	movs	r2, #1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800089a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800089e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008a0:	f7ff fc80 	bl	80001a4 <HAL_GetTick>
 80008a4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80008a8:	4606      	mov	r6, r0
 80008aa:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008ae:	6822      	ldr	r2, [r4, #0]
 80008b0:	fa95 f3a5 	rbit	r3, r5
 80008b4:	fab3 f383 	clz	r3, r3
 80008b8:	f003 031f 	and.w	r3, r3, #31
 80008bc:	fa22 f303 	lsr.w	r3, r2, r3
 80008c0:	07da      	lsls	r2, r3, #31
 80008c2:	f53f ae14 	bmi.w	80004ee <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008c6:	f7ff fc6d 	bl	80001a4 <HAL_GetTick>
 80008ca:	1b80      	subs	r0, r0, r6
 80008cc:	2802      	cmp	r0, #2
 80008ce:	d9ec      	bls.n	80008aa <HAL_RCC_OscConfig+0x42e>
 80008d0:	e652      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d2:	f7ff fc67 	bl	80001a4 <HAL_GetTick>
 80008d6:	1bc0      	subs	r0, r0, r7
 80008d8:	2802      	cmp	r0, #2
 80008da:	d9b6      	bls.n	800084a <HAL_RCC_OscConfig+0x3ce>
 80008dc:	e64c      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
 80008de:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008e2:	fab3 f383 	clz	r3, r3
 80008e6:	2200      	movs	r2, #0
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008ee:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fc56 	bl	80001a4 <HAL_GetTick>
 80008f8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80008fc:	4606      	mov	r6, r0
 80008fe:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000902:	6822      	ldr	r2, [r4, #0]
 8000904:	fa95 f3a5 	rbit	r3, r5
 8000908:	fab3 f383 	clz	r3, r3
 800090c:	f003 031f 	and.w	r3, r3, #31
 8000910:	fa22 f303 	lsr.w	r3, r2, r3
 8000914:	07db      	lsls	r3, r3, #31
 8000916:	f57f adea 	bpl.w	80004ee <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800091a:	f7ff fc43 	bl	80001a4 <HAL_GetTick>
 800091e:	1b80      	subs	r0, r0, r6
 8000920:	2802      	cmp	r0, #2
 8000922:	d9ec      	bls.n	80008fe <HAL_RCC_OscConfig+0x482>
 8000924:	e628      	b.n	8000578 <HAL_RCC_OscConfig+0xfc>
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800092c:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000930:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000932:	ac02      	add	r4, sp, #8
 8000934:	f103 0510 	add.w	r5, r3, #16
 8000938:	4622      	mov	r2, r4
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	6859      	ldr	r1, [r3, #4]
 800093e:	3308      	adds	r3, #8
 8000940:	c203      	stmia	r2!, {r0, r1}
 8000942:	42ab      	cmp	r3, r5
 8000944:	4614      	mov	r4, r2
 8000946:	d1f7      	bne.n	8000938 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000948:	2301      	movs	r3, #1
 800094a:	f88d 3004 	strb.w	r3, [sp, #4]
 800094e:	2302      	movs	r3, #2
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000950:	4c18      	ldr	r4, [pc, #96]	; (80009b4 <HAL_RCC_GetSysClockFreq+0x88>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000952:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000956:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000958:	f001 030c 	and.w	r3, r1, #12
 800095c:	2b08      	cmp	r3, #8
 800095e:	d124      	bne.n	80009aa <HAL_RCC_GetSysClockFreq+0x7e>
 8000960:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000964:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000968:	fab3 f283 	clz	r2, r3
 800096c:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8000970:	40d3      	lsrs	r3, r2
 8000972:	aa06      	add	r2, sp, #24
 8000974:	4413      	add	r3, r2
 8000976:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800097a:	03cb      	lsls	r3, r1, #15
 800097c:	d513      	bpl.n	80009a6 <HAL_RCC_GetSysClockFreq+0x7a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 800097e:	6863      	ldr	r3, [r4, #4]
 8000980:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000984:	fa92 f2a2 	rbit	r2, r2
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000990:	40d3      	lsrs	r3, r2
 8000992:	aa06      	add	r2, sp, #24
 8000994:	4413      	add	r3, r2
 8000996:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <HAL_RCC_GetSysClockFreq+0x8c>)
 800099c:	fbb3 f3f2 	udiv	r3, r3, r2
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009a0:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009a2:	b007      	add	sp, #28
 80009a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_RCC_GetSysClockFreq+0x90>)
 80009a8:	e7fa      	b.n	80009a0 <HAL_RCC_GetSysClockFreq+0x74>
      sysclockfreq = HSE_VALUE;
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <HAL_RCC_GetSysClockFreq+0x8c>)
  return sysclockfreq;
 80009ac:	e7f9      	b.n	80009a2 <HAL_RCC_GetSysClockFreq+0x76>
 80009ae:	bf00      	nop
 80009b0:	08001290 	.word	0x08001290
 80009b4:	40021000 	.word	0x40021000
 80009b8:	007a1200 	.word	0x007a1200
 80009bc:	003d0900 	.word	0x003d0900

080009c0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009c0:	4a55      	ldr	r2, [pc, #340]	; (8000b18 <HAL_RCC_ClockConfig+0x158>)
{
 80009c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009c6:	6813      	ldr	r3, [r2, #0]
{
 80009c8:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	428b      	cmp	r3, r1
{
 80009d0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009d2:	d330      	bcc.n	8000a36 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009d4:	6832      	ldr	r2, [r6, #0]
 80009d6:	0794      	lsls	r4, r2, #30
 80009d8:	d43a      	bmi.n	8000a50 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009da:	07d0      	lsls	r0, r2, #31
 80009dc:	d440      	bmi.n	8000a60 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009de:	4a4e      	ldr	r2, [pc, #312]	; (8000b18 <HAL_RCC_ClockConfig+0x158>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	429d      	cmp	r5, r3
 80009e8:	f0c0 8084 	bcc.w	8000af4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009ec:	6832      	ldr	r2, [r6, #0]
 80009ee:	4c4b      	ldr	r4, [pc, #300]	; (8000b1c <HAL_RCC_ClockConfig+0x15c>)
 80009f0:	f012 0f04 	tst.w	r2, #4
 80009f4:	f040 8089 	bne.w	8000b0a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009f8:	0713      	lsls	r3, r2, #28
 80009fa:	d506      	bpl.n	8000a0a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80009fc:	6863      	ldr	r3, [r4, #4]
 80009fe:	6932      	ldr	r2, [r6, #16]
 8000a00:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a08:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a0a:	f7ff ff8f 	bl	800092c <HAL_RCC_GetSysClockFreq>
 8000a0e:	6863      	ldr	r3, [r4, #4]
 8000a10:	22f0      	movs	r2, #240	; 0xf0
 8000a12:	fa92 f2a2 	rbit	r2, r2
 8000a16:	fab2 f282 	clz	r2, r2
 8000a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a1e:	40d3      	lsrs	r3, r2
 8000a20:	4a3f      	ldr	r2, [pc, #252]	; (8000b20 <HAL_RCC_ClockConfig+0x160>)
 8000a22:	5cd3      	ldrb	r3, [r2, r3]
 8000a24:	40d8      	lsrs	r0, r3
 8000a26:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <HAL_RCC_ClockConfig+0x164>)
 8000a28:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fb8e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000a30:	2000      	movs	r0, #0
}
 8000a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f023 0307 	bic.w	r3, r3, #7
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a40:	6813      	ldr	r3, [r2, #0]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d0c4      	beq.n	80009d4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a50:	4932      	ldr	r1, [pc, #200]	; (8000b1c <HAL_RCC_ClockConfig+0x15c>)
 8000a52:	68b0      	ldr	r0, [r6, #8]
 8000a54:	684b      	ldr	r3, [r1, #4]
 8000a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	604b      	str	r3, [r1, #4]
 8000a5e:	e7bc      	b.n	80009da <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a60:	6872      	ldr	r2, [r6, #4]
 8000a62:	4c2e      	ldr	r4, [pc, #184]	; (8000b1c <HAL_RCC_ClockConfig+0x15c>)
 8000a64:	2a01      	cmp	r2, #1
 8000a66:	d128      	bne.n	8000aba <HAL_RCC_ClockConfig+0xfa>
 8000a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a6c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a70:	6821      	ldr	r1, [r4, #0]
 8000a72:	fa93 f3a3 	rbit	r3, r3
 8000a76:	fab3 f383 	clz	r3, r3
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8000a82:	07d9      	lsls	r1, r3, #31
 8000a84:	d5e1      	bpl.n	8000a4a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a86:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a88:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a8c:	f023 0303 	bic.w	r3, r3, #3
 8000a90:	431a      	orrs	r2, r3
 8000a92:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000a94:	f7ff fb86 	bl	80001a4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a98:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a9a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d112      	bne.n	8000ac6 <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aa0:	6863      	ldr	r3, [r4, #4]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d099      	beq.n	80009de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aaa:	f7ff fb7b 	bl	80001a4 <HAL_GetTick>
 8000aae:	1bc0      	subs	r0, r0, r7
 8000ab0:	4540      	cmp	r0, r8
 8000ab2:	d9f5      	bls.n	8000aa0 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aba:	2a02      	cmp	r2, #2
 8000abc:	bf0c      	ite	eq
 8000abe:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ac2:	2302      	movne	r3, #2
 8000ac4:	e7d2      	b.n	8000a6c <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10f      	bne.n	8000aea <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aca:	6863      	ldr	r3, [r4, #4]
 8000acc:	f003 030c 	and.w	r3, r3, #12
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d084      	beq.n	80009de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ad4:	f7ff fb66 	bl	80001a4 <HAL_GetTick>
 8000ad8:	1bc0      	subs	r0, r0, r7
 8000ada:	4540      	cmp	r0, r8
 8000adc:	d9f5      	bls.n	8000aca <HAL_RCC_ClockConfig+0x10a>
 8000ade:	e7e9      	b.n	8000ab4 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ae0:	f7ff fb60 	bl	80001a4 <HAL_GetTick>
 8000ae4:	1bc0      	subs	r0, r0, r7
 8000ae6:	4540      	cmp	r0, r8
 8000ae8:	d8e4      	bhi.n	8000ab4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aea:	6863      	ldr	r3, [r4, #4]
 8000aec:	f013 0f0c 	tst.w	r3, #12
 8000af0:	d1f6      	bne.n	8000ae0 <HAL_RCC_ClockConfig+0x120>
 8000af2:	e774      	b.n	80009de <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000af4:	6813      	ldr	r3, [r2, #0]
 8000af6:	f023 0307 	bic.w	r3, r3, #7
 8000afa:	432b      	orrs	r3, r5
 8000afc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	f003 0307 	and.w	r3, r3, #7
 8000b04:	429d      	cmp	r5, r3
 8000b06:	d1a0      	bne.n	8000a4a <HAL_RCC_ClockConfig+0x8a>
 8000b08:	e770      	b.n	80009ec <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	68f1      	ldr	r1, [r6, #12]
 8000b0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b12:	430b      	orrs	r3, r1
 8000b14:	6063      	str	r3, [r4, #4]
 8000b16:	e76f      	b.n	80009f8 <HAL_RCC_ClockConfig+0x38>
 8000b18:	40022000 	.word	0x40022000
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	080012a0 	.word	0x080012a0
 8000b24:	20000000 	.word	0x20000000

08000b28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b28:	4b01      	ldr	r3, [pc, #4]	; (8000b30 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000000 	.word	0x20000000

08000b34 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b34:	6a03      	ldr	r3, [r0, #32]
{
 8000b36:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b38:	f023 0301 	bic.w	r3, r3, #1
 8000b3c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b3e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b42:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000b46:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000b4a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000b4c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000b4e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000b52:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000b54:	4d0a      	ldr	r5, [pc, #40]	; (8000b80 <TIM_OC1_SetConfig+0x4c>)
 8000b56:	42a8      	cmp	r0, r5
 8000b58:	d10b      	bne.n	8000b72 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000b5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000b5c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000b60:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b62:	698e      	ldr	r6, [r1, #24]
 8000b64:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000b66:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b6a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000b6c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b70:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b74:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000b76:	684a      	ldr	r2, [r1, #4]
 8000b78:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b7a:	6203      	str	r3, [r0, #32]
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	bf00      	nop
 8000b80:	40012c00 	.word	0x40012c00

08000b84 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000b84:	6a03      	ldr	r3, [r0, #32]
{
 8000b86:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b92:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000b96:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000b9a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000b9c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000b9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000ba2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000ba6:	4d0b      	ldr	r5, [pc, #44]	; (8000bd4 <TIM_OC3_SetConfig+0x50>)
 8000ba8:	42a8      	cmp	r0, r5
 8000baa:	d10d      	bne.n	8000bc8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000bac:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000bb2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000bb6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8000bb8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000bba:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000bbe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000bc4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bc8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000bca:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000bcc:	684a      	ldr	r2, [r1, #4]
 8000bce:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bd0:	6203      	str	r3, [r0, #32]
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	40012c00 	.word	0x40012c00

08000bd8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000bd8:	6a03      	ldr	r3, [r0, #32]
{
 8000bda:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000be0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000be2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000be4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000be6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000be8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000bea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000bee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000bf2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000bf8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000bfc:	4d06      	ldr	r5, [pc, #24]	; (8000c18 <TIM_OC4_SetConfig+0x40>)
 8000bfe:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000c00:	bf02      	ittt	eq
 8000c02:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000c04:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000c08:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000c0e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000c10:	684a      	ldr	r2, [r1, #4]
 8000c12:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c14:	6203      	str	r3, [r0, #32]
 8000c16:	bd30      	pop	{r4, r5, pc}
 8000c18:	40012c00 	.word	0x40012c00

08000c1c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c1c:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <TIM_Base_SetConfig+0x64>)
  tmpcr1 = TIMx->CR1;
 8000c1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d00a      	beq.n	8000c3a <TIM_Base_SetConfig+0x1e>
 8000c24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c28:	d007      	beq.n	8000c3a <TIM_Base_SetConfig+0x1e>
 8000c2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d003      	beq.n	8000c3a <TIM_Base_SetConfig+0x1e>
 8000c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c36:	4290      	cmp	r0, r2
 8000c38:	d115      	bne.n	8000c66 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000c3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c40:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <TIM_Base_SetConfig+0x64>)
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d00a      	beq.n	8000c5e <TIM_Base_SetConfig+0x42>
 8000c48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c4c:	d007      	beq.n	8000c5e <TIM_Base_SetConfig+0x42>
 8000c4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c52:	4290      	cmp	r0, r2
 8000c54:	d003      	beq.n	8000c5e <TIM_Base_SetConfig+0x42>
 8000c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	d103      	bne.n	8000c66 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c5e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c64:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000c66:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c68:	688b      	ldr	r3, [r1, #8]
 8000c6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c6c:	680b      	ldr	r3, [r1, #0]
 8000c6e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <TIM_Base_SetConfig+0x64>)
 8000c72:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000c74:	bf04      	itt	eq
 8000c76:	690b      	ldreq	r3, [r1, #16]
 8000c78:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	6143      	str	r3, [r0, #20]
 8000c7e:	4770      	bx	lr
 8000c80:	40012c00 	.word	0x40012c00

08000c84 <HAL_TIM_PWM_Init>:
{
 8000c84:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c86:	4604      	mov	r4, r0
 8000c88:	b1a0      	cbz	r0, 8000cb4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c92:	b91b      	cbnz	r3, 8000c9c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c94:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000c98:	f000 fa28 	bl	80010ec <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c9c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c9e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000ca0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ca4:	1d21      	adds	r1, r4, #4
 8000ca6:	f7ff ffb9 	bl	8000c1c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000caa:	2301      	movs	r3, #1
  return HAL_OK;
 8000cac:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000cae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000cb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cb4:	2001      	movs	r0, #1
}
 8000cb6:	bd10      	pop	{r4, pc}

08000cb8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cb8:	6a03      	ldr	r3, [r0, #32]
{
 8000cba:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cbc:	f023 0310 	bic.w	r3, r3, #16
 8000cc0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000cc2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000cc4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000cc6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000cc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000cca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000cce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8000cd2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000cd4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 8000cd8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000cdc:	4d0b      	ldr	r5, [pc, #44]	; (8000d0c <TIM_OC2_SetConfig+0x54>)
 8000cde:	42a8      	cmp	r0, r5
 8000ce0:	d10d      	bne.n	8000cfe <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8000ce2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8000ce8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cec:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000cee:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000cf0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cf4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cfa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000cfe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000d00:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000d02:	684a      	ldr	r2, [r1, #4]
 8000d04:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000d06:	6203      	str	r3, [r0, #32]
 8000d08:	bd70      	pop	{r4, r5, r6, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40012c00 	.word	0x40012c00

08000d10 <HAL_TIM_PWM_ConfigChannel>:
{
 8000d10:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000d12:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000d16:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	f04f 0002 	mov.w	r0, #2
 8000d1e:	d025      	beq.n	8000d6c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000d20:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000d22:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_LOCK(htim);
 8000d26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  switch (Channel)
 8000d2a:	2a0c      	cmp	r2, #12
 8000d2c:	d818      	bhi.n	8000d60 <HAL_TIM_PWM_ConfigChannel+0x50>
 8000d2e:	e8df f002 	tbb	[pc, r2]
 8000d32:	1707      	.short	0x1707
 8000d34:	171e1717 	.word	0x171e1717
 8000d38:	172f1717 	.word	0x172f1717
 8000d3c:	1717      	.short	0x1717
 8000d3e:	40          	.byte	0x40
 8000d3f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000d40:	6820      	ldr	r0, [r4, #0]
 8000d42:	f7ff fef7 	bl	8000b34 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d46:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d48:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d4a:	699a      	ldr	r2, [r3, #24]
 8000d4c:	f042 0208 	orr.w	r2, r2, #8
 8000d50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d52:	699a      	ldr	r2, [r3, #24]
 8000d54:	f022 0204 	bic.w	r2, r2, #4
 8000d58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d5a:	699a      	ldr	r2, [r3, #24]
 8000d5c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d5e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000d60:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000d62:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000d68:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8000d6c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d6e:	6820      	ldr	r0, [r4, #0]
 8000d70:	f7ff ffa2 	bl	8000cb8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d74:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d76:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d78:	699a      	ldr	r2, [r3, #24]
 8000d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d88:	699a      	ldr	r2, [r3, #24]
 8000d8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d8e:	e7e6      	b.n	8000d5e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000d90:	6820      	ldr	r0, [r4, #0]
 8000d92:	f7ff fef7 	bl	8000b84 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d96:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d98:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d9a:	69da      	ldr	r2, [r3, #28]
 8000d9c:	f042 0208 	orr.w	r2, r2, #8
 8000da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000da2:	69da      	ldr	r2, [r3, #28]
 8000da4:	f022 0204 	bic.w	r2, r2, #4
 8000da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000daa:	69da      	ldr	r2, [r3, #28]
 8000dac:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000dae:	61da      	str	r2, [r3, #28]
    break;
 8000db0:	e7d6      	b.n	8000d60 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000db2:	6820      	ldr	r0, [r4, #0]
 8000db4:	f7ff ff10 	bl	8000bd8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000db8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000dba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000dbc:	69da      	ldr	r2, [r3, #28]
 8000dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dc2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000dc4:	69da      	ldr	r2, [r3, #28]
 8000dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000dcc:	69da      	ldr	r2, [r3, #28]
 8000dce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dd2:	e7ec      	b.n	8000dae <HAL_TIM_PWM_ConfigChannel+0x9e>

08000dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000dd4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000dd6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000dd8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000dda:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000ddc:	ea23 0304 	bic.w	r3, r3, r4
 8000de0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000de2:	6a03      	ldr	r3, [r0, #32]
 8000de4:	408a      	lsls	r2, r1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	6202      	str	r2, [r0, #32]
 8000dea:	bd10      	pop	{r4, pc}

08000dec <HAL_TIM_PWM_Start>:
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000df0:	2201      	movs	r2, #1
 8000df2:	6800      	ldr	r0, [r0, #0]
 8000df4:	f7ff ffee 	bl	8000dd4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_TIM_PWM_Start+0x28>)
}
 8000dfc:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000dfe:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8000e00:	bf02      	ittt	eq
 8000e02:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000e04:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8000e08:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f042 0201 	orr.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
}
 8000e12:	bd10      	pop	{r4, pc}
 8000e14:	40012c00 	.word	0x40012c00

08000e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000e18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000e1c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f04f 0302 	mov.w	r3, #2
 8000e24:	d016      	beq.n	8000e54 <HAL_TIMEx_ConfigBreakDeadTime+0x3c>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e26:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8000e2a:	e891 0018 	ldmia.w	r1, {r3, r4}
 8000e2e:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8000e30:	688c      	ldr	r4, [r1, #8]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8000e32:	6802      	ldr	r2, [r0, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8000e34:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->LockLevel        |
 8000e36:	68cc      	ldr	r4, [r1, #12]
 8000e38:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->DeadTime         |
 8000e3a:	690c      	ldr	r4, [r1, #16]
 8000e3c:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakState       |
 8000e3e:	694c      	ldr	r4, [r1, #20]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8000e40:	6989      	ldr	r1, [r1, #24]
                                   sBreakDeadTimeConfig->BreakState       |
 8000e42:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8000e44:	430b      	orrs	r3, r1
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8000e46:	6453      	str	r3, [r2, #68]	; 0x44
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000e54:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000e56:	bd10      	pop	{r4, pc}

08000e58 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000e58:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000e5c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	f04f 0302 	mov.w	r3, #2
 8000e64:	d018      	beq.n	8000e98 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e66:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e6a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e6c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e6e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e70:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e76:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e84:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000e92:	2300      	movs	r3, #0
 8000e94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000e98:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000e9a:	bd10      	pop	{r4, pc}

08000e9c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_GPIO_Init+0x94>)
{
 8000e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea0:	699a      	ldr	r2, [r3, #24]
{
 8000ea2:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	f042 0210 	orr.w	r2, r2, #16
 8000ea8:	619a      	str	r2, [r3, #24]
 8000eaa:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000eac:	4f21      	ldr	r7, [pc, #132]	; (8000f34 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	f002 0210 	and.w	r2, r2, #16
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000eb8:	4c1f      	ldr	r4, [pc, #124]	; (8000f38 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	f042 0220 	orr.w	r2, r2, #32
 8000ebe:	619a      	str	r2, [r3, #24]
 8000ec0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec2:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	f002 0220 	and.w	r2, r2, #32
 8000ec8:	9201      	str	r2, [sp, #4]
 8000eca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	f042 0204 	orr.w	r2, r2, #4
 8000ed6:	619a      	str	r2, [r3, #24]
 8000ed8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	f002 0204 	and.w	r2, r2, #4
 8000ee0:	9202      	str	r2, [sp, #8]
 8000ee2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	f042 0208 	orr.w	r2, r2, #8
 8000eec:	619a      	str	r2, [r3, #24]
 8000eee:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	9303      	str	r3, [sp, #12]
 8000ef8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000efa:	f7ff fab5 	bl	8000468 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	4620      	mov	r0, r4
 8000f02:	2120      	movs	r1, #32
 8000f04:	f7ff fab0 	bl	8000468 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	a904      	add	r1, sp, #16
 8000f0e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f10:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f7ff f9c7 	bl	80002a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f1a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	a904      	add	r1, sp, #16
 8000f1e:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f20:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f7ff f9bf 	bl	80002a8 <HAL_GPIO_Init>

}
 8000f2a:	b009      	add	sp, #36	; 0x24
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
{
 8000f3e:	b510      	push	{r4, lr}
 8000f40:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f42:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f4c:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f50:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f7ff fa93 	bl	800047c <HAL_RCC_OscConfig>
 8000f56:	4601      	mov	r1, r0
 8000f58:	b100      	cbz	r0, 8000f5c <SystemClock_Config+0x20>
 8000f5a:	e7fe      	b.n	8000f5a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f5e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f62:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f66:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6a:	f7ff fd29 	bl	80009c0 <HAL_RCC_ClockConfig>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	b100      	cbz	r0, 8000f74 <SystemClock_Config+0x38>
 8000f72:	e7fe      	b.n	8000f72 <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f74:	f7ff fdd8 	bl	8000b28 <HAL_RCC_GetHCLKFreq>
 8000f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f80:	f7ff f96a 	bl	8000258 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f7ff f97d 	bl	8000284 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f8a:	4622      	mov	r2, r4
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f92:	f7ff f92d 	bl	80001f0 <HAL_NVIC_SetPriority>
}
 8000f96:	b010      	add	sp, #64	; 0x40
 8000f98:	bd10      	pop	{r4, pc}
	...

08000f9c <main>:
{
 8000f9c:	b508      	push	{r3, lr}
  HAL_Init();
 8000f9e:	f7ff f8e7 	bl	8000170 <HAL_Init>
  SystemClock_Config();
 8000fa2:	f7ff ffcb 	bl	8000f3c <SystemClock_Config>
  MX_GPIO_Init();
 8000fa6:	f7ff ff79 	bl	8000e9c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000faa:	f000 f8c9 	bl	8001140 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <main+0x4c>)
 8000fb2:	f7ff ff1b 	bl	8000dec <HAL_TIM_PWM_Start>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,500);
 8000fb6:	4c0c      	ldr	r4, [pc, #48]	; (8000fe8 <main+0x4c>)
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000fb8:	4d0c      	ldr	r5, [pc, #48]	; (8000fec <main+0x50>)
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,500);
 8000fba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fbe:	6823      	ldr	r3, [r4, #0]
	  HAL_Delay(5000);
 8000fc0:	f241 3088 	movw	r0, #5000	; 0x1388
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,500);
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5000);
 8000fc6:	f7ff f8f3 	bl	80001b0 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,1500);
 8000fca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fce:	6823      	ldr	r3, [r4, #0]
	  HAL_Delay(5000);
 8000fd0:	f241 3088 	movw	r0, #5000	; 0x1388
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,1500);
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5000);
 8000fd6:	f7ff f8eb 	bl	80001b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f7ff fa47 	bl	8000472 <HAL_GPIO_TogglePin>
 8000fe4:	e7e9      	b.n	8000fba <main+0x1e>
 8000fe6:	bf00      	nop
 8000fe8:	20000024 	.word	0x20000024
 8000fec:	40011000 	.word	0x40011000

08000ff0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000ff0:	e7fe      	b.n	8000ff0 <_Error_Handler>
	...

08000ff4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HAL_MspInit+0x84>)
{
 8000ff6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff8:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	619a      	str	r2, [r3, #24]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	f7ff f8de 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	f06f 000b 	mvn.w	r0, #11
 8001016:	4611      	mov	r1, r2
 8001018:	f7ff f8ea 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	f06f 000a 	mvn.w	r0, #10
 8001022:	4611      	mov	r1, r2
 8001024:	f7ff f8e4 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	f06f 0009 	mvn.w	r0, #9
 800102e:	4611      	mov	r1, r2
 8001030:	f7ff f8de 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	f06f 0004 	mvn.w	r0, #4
 800103a:	4611      	mov	r1, r2
 800103c:	f7ff f8d8 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	f06f 0003 	mvn.w	r0, #3
 8001046:	4611      	mov	r1, r2
 8001048:	f7ff f8d2 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	f06f 0001 	mvn.w	r0, #1
 8001052:	4611      	mov	r1, r2
 8001054:	f7ff f8cc 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f04f 30ff 	mov.w	r0, #4294967295
 800105e:	4611      	mov	r1, r2
 8001060:	f7ff f8c6 	bl	80001f0 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_MspInit+0x88>)
 8001066:	6853      	ldr	r3, [r2, #4]
 8001068:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001070:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	b003      	add	sp, #12
 8001074:	f85d fb04 	ldr.w	pc, [sp], #4
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000

08001080 <NMI_Handler>:
 8001080:	4770      	bx	lr

08001082 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler>

08001084 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler>

08001086 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler>

08001088 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler>

0800108a <SVC_Handler>:
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001090:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f7ff f87f 	bl	8000194 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800109a:	f7ff b900 	b.w	800029e <HAL_SYSTICK_IRQHandler>
	...

080010a0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <SystemInit+0x40>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80010aa:	6859      	ldr	r1, [r3, #4]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <SystemInit+0x44>)
 80010ae:	400a      	ands	r2, r1
 80010b0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010bc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010c4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80010cc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80010ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <SystemInit+0x48>)
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	f8ff0000 	.word	0xf8ff0000
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80010ec:	6802      	ldr	r2, [r0, #0]
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_TIM_PWM_MspInit+0x24>)
{
 80010f0:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d10a      	bne.n	800110c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010f6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001100:	619a      	str	r2, [r3, #24]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800110c:	b002      	add	sp, #8
 800110e:	4770      	bx	lr
 8001110:	40012c00 	.word	0x40012c00

08001114 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001114:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8001116:	6802      	ldr	r2, [r0, #0]
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_TIM_MspPostInit+0x24>)
 800111a:	429a      	cmp	r2, r3
 800111c:	d109      	bne.n	8001132 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001122:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	4669      	mov	r1, sp
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <HAL_TIM_MspPostInit+0x28>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f7ff f8bb 	bl	80002a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001132:	b005      	add	sp, #20
 8001134:	f85d fb04 	ldr.w	pc, [sp], #4
 8001138:	40012c00 	.word	0x40012c00
 800113c:	40010800 	.word	0x40010800

08001140 <MX_TIM1_Init>:
  htim1.Init.Prescaler = 16;
 8001140:	f04f 0c10 	mov.w	ip, #16
  htim1.Instance = TIM1;
 8001144:	4824      	ldr	r0, [pc, #144]	; (80011d8 <MX_TIM1_Init+0x98>)
  htim1.Init.Prescaler = 16;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_TIM1_Init+0x9c>)
{
 8001148:	b510      	push	{r4, lr}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	2400      	movs	r4, #0
  htim1.Init.Prescaler = 16;
 800114c:	e880 1008 	stmia.w	r0, {r3, ip}
  htim1.Init.Period = 1999;
 8001150:	f240 73cf 	movw	r3, #1999	; 0x7cf
{
 8001154:	b090      	sub	sp, #64	; 0x40
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1999;
 8001158:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800115c:	6144      	str	r4, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800115e:	f7ff fd91 	bl	8000c84 <HAL_TIM_PWM_Init>
 8001162:	b118      	cbz	r0, 800116c <MX_TIM1_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001168:	f7ff ff42 	bl	8000ff0 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116c:	4669      	mov	r1, sp
 800116e:	481a      	ldr	r0, [pc, #104]	; (80011d8 <MX_TIM1_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001174:	f7ff fe70 	bl	8000e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	b118      	cbz	r0, 8001182 <MX_TIM1_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 800117a:	2147      	movs	r1, #71	; 0x47
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800117e:	f7ff ff37 	bl	8000ff0 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8001182:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001184:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001186:	4622      	mov	r2, r4
 8001188:	a902      	add	r1, sp, #8
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_TIM1_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 800118e:	9403      	str	r4, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001190:	9404      	str	r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001192:	9405      	str	r4, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001194:	9406      	str	r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001196:	9407      	str	r4, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001198:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119a:	f7ff fdb9 	bl	8000d10 <HAL_TIM_PWM_ConfigChannel>
 800119e:	b118      	cbz	r0, 80011a8 <MX_TIM1_Init+0x68>
    _Error_Handler(__FILE__, __LINE__);
 80011a0:	2153      	movs	r1, #83	; 0x53
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <MX_TIM1_Init+0xa0>)
 80011a4:	f7ff ff24 	bl	8000ff0 <_Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ac:	a909      	add	r1, sp, #36	; 0x24
 80011ae:	480a      	ldr	r0, [pc, #40]	; (80011d8 <MX_TIM1_Init+0x98>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b0:	9409      	str	r4, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b2:	940a      	str	r4, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b4:	940b      	str	r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b6:	940c      	str	r4, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b8:	940d      	str	r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ba:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011bc:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011be:	f7ff fe2b 	bl	8000e18 <HAL_TIMEx_ConfigBreakDeadTime>
 80011c2:	b118      	cbz	r0, 80011cc <MX_TIM1_Init+0x8c>
    _Error_Handler(__FILE__, __LINE__);
 80011c4:	215f      	movs	r1, #95	; 0x5f
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_TIM1_Init+0xa0>)
 80011c8:	f7ff ff12 	bl	8000ff0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <MX_TIM1_Init+0x98>)
 80011ce:	f7ff ffa1 	bl	8001114 <HAL_TIM_MspPostInit>
}
 80011d2:	b010      	add	sp, #64	; 0x40
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	bf00      	nop
 80011d8:	20000024 	.word	0x20000024
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	080012b0 	.word	0x080012b0

080011e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011e6:	e003      	b.n	80011f0 <LoopCopyDataInit>

080011e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011ee:	3104      	adds	r1, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011f8:	d3f6      	bcc.n	80011e8 <CopyDataInit>
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011fc:	e002      	b.n	8001204 <LoopFillZerobss>

080011fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001200:	f842 3b04 	str.w	r3, [r2], #4

08001204 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001206:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001208:	d3f9      	bcc.n	80011fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800120a:	f7ff ff49 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f000 f80f 	bl	8001230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001212:	f7ff fec3 	bl	8000f9c <main>
  bx lr
 8001216:	4770      	bx	lr
  ldr r3, =_sidata
 8001218:	080012c8 	.word	0x080012c8
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001220:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001224:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001228:	20000060 	.word	0x20000060

0800122c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_2_IRQHandler>
	...

08001230 <__libc_init_array>:
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	2500      	movs	r5, #0
 8001234:	4e0c      	ldr	r6, [pc, #48]	; (8001268 <__libc_init_array+0x38>)
 8001236:	4c0d      	ldr	r4, [pc, #52]	; (800126c <__libc_init_array+0x3c>)
 8001238:	1ba4      	subs	r4, r4, r6
 800123a:	10a4      	asrs	r4, r4, #2
 800123c:	42a5      	cmp	r5, r4
 800123e:	d109      	bne.n	8001254 <__libc_init_array+0x24>
 8001240:	f000 f81a 	bl	8001278 <_init>
 8001244:	2500      	movs	r5, #0
 8001246:	4e0a      	ldr	r6, [pc, #40]	; (8001270 <__libc_init_array+0x40>)
 8001248:	4c0a      	ldr	r4, [pc, #40]	; (8001274 <__libc_init_array+0x44>)
 800124a:	1ba4      	subs	r4, r4, r6
 800124c:	10a4      	asrs	r4, r4, #2
 800124e:	42a5      	cmp	r5, r4
 8001250:	d105      	bne.n	800125e <__libc_init_array+0x2e>
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001258:	4798      	blx	r3
 800125a:	3501      	adds	r5, #1
 800125c:	e7ee      	b.n	800123c <__libc_init_array+0xc>
 800125e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001262:	4798      	blx	r3
 8001264:	3501      	adds	r5, #1
 8001266:	e7f2      	b.n	800124e <__libc_init_array+0x1e>
 8001268:	080012c0 	.word	0x080012c0
 800126c:	080012c0 	.word	0x080012c0
 8001270:	080012c0 	.word	0x080012c0
 8001274:	080012c4 	.word	0x080012c4

08001278 <_init>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr

08001284 <_fini>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	bf00      	nop
 8001288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128a:	bc08      	pop	{r3}
 800128c:	469e      	mov	lr, r3
 800128e:	4770      	bx	lr
