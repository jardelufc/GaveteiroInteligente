
C:\Users\lh04-m05\Desktop\cascaBalde\Debug\cascaBalde.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000053a8  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080087a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f4  20000004  080087a4  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003f8  080087a4  000203f8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000889e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e77  00000000  00000000  000288cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008d0  00000000  00000000  0002a748  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000760  00000000  00000000  0002b018  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004612  00000000  00000000  0002b778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022ba  00000000  00000000  0002fd8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00032044  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001f58  00000000  00000000  000320c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080033d8 	.word	0x080033d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080033d8 	.word	0x080033d8

0800014c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fca3 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f83a 	bl	80031e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000180:	f001 ffba 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8000184:	4602      	mov	r2, r0
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <HAL_InitTick+0x34>)
 8000188:	fba3 2302 	umull	r2, r3, r3, r2
 800018c:	099b      	lsrs	r3, r3, #6
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fcb2 	bl	8000af8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000194:	2200      	movs	r2, #0
 8000196:	6879      	ldr	r1, [r7, #4]
 8000198:	f04f 30ff 	mov.w	r0, #4294967295
 800019c:	f000 fc90 	bl	8000ac0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80001a0:	2300      	movs	r3, #0
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	10624dd3 	.word	0x10624dd3

080001b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  uwTick++;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x18>)
 80001bc:	6013      	str	r3, [r2, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return uwTick;
 80001d0:	4b02      	ldr	r3, [pc, #8]	; (80001dc <HAL_GetTick+0x10>)
 80001d2:	681b      	ldr	r3, [r3, #0]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000020 	.word	0x20000020

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80001ec:	f7ff ffee 	bl	80001cc <HAL_GetTick>
 80001f0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80001f2:	bf00      	nop
 80001f4:	f7ff ffea 	bl	80001cc <HAL_GetTick>
 80001f8:	4602      	mov	r2, r0
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	1ad2      	subs	r2, r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f7      	bcc.n	80001f4 <HAL_Delay+0x14>
  {
  }
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b08c      	sub	sp, #48	; 0x30
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t tmp_cr1 = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t tmp_cr2 = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	623b      	str	r3, [r7, #32]
  uint32_t tmp_sqr1 = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d101      	bne.n	8000230 <HAL_ADC_Init+0x24>
  {
    return HAL_ERROR;
 800022c:	2301      	movs	r3, #1
 800022e:	e0e3      	b.n	80003f8 <HAL_ADC_Init+0x1ec>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023a:	2b00      	cmp	r3, #0
 800023c:	d109      	bne.n	8000252 <HAL_ADC_Init+0x46>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f002 fe0d 	bl	8002e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 fb40 	bl	80008d8 <ADC_ConversionStop_Disable>
 8000258:	4603      	mov	r3, r0
 800025a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 80bb 	bne.w	80003e2 <HAL_ADC_Init+0x1d6>
 800026c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000270:	2b00      	cmp	r3, #0
 8000272:	f040 80b6 	bne.w	80003e2 <HAL_ADC_Init+0x1d6>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800027a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027e:	f023 0302 	bic.w	r3, r3, #2
 8000282:	f043 0202 	orr.w	r2, r3, #2
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	69db      	ldr	r3, [r3, #28]
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000292:	431a      	orrs	r2, r3
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	68d9      	ldr	r1, [r3, #12]
 8000298:	2302      	movs	r3, #2
 800029a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	fa93 f3a3 	rbit	r3, r3
 80002a2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	fab3 f383 	clz	r3, r3
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002ae:	4313      	orrs	r3, r2
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002b0:	6a3a      	ldr	r2, [r7, #32]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	623b      	str	r3, [r7, #32]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002be:	d003      	beq.n	80002c8 <HAL_ADC_Init+0xbc>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d102      	bne.n	80002ce <HAL_ADC_Init+0xc2>
 80002c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002cc:	e000      	b.n	80002d0 <HAL_ADC_Init+0xc4>
 80002ce:	2300      	movs	r3, #0
 80002d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002d2:	4313      	orrs	r3, r2
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d124      	bne.n	8000328 <HAL_ADC_Init+0x11c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d114      	bne.n	8000310 <HAL_ADC_Init+0x104>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	1e5a      	subs	r2, r3, #1
 80002ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002f0:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	fa93 f3a3 	rbit	r3, r3
 80002f8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	fab3 f383 	clz	r3, r3
 8000300:	fa02 f303 	lsl.w	r3, r2, r3
 8000304:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800030a:	4313      	orrs	r3, r2
 800030c:	62bb      	str	r3, [r7, #40]	; 0x28
 800030e:	e00b      	b.n	8000328 <HAL_ADC_Init+0x11c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000314:	f043 0220 	orr.w	r2, r3, #32
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000320:	f043 0201 	orr.w	r2, r3, #1
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	6812      	ldr	r2, [r2, #0]
 8000330:	6852      	ldr	r2, [r2, #4]
 8000332:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000338:	430a      	orrs	r2, r1
 800033a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6899      	ldr	r1, [r3, #8]
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <HAL_ADC_Init+0x1f4>)
 8000348:	400b      	ands	r3, r1
 800034a:	6a39      	ldr	r1, [r7, #32]
 800034c:	430b      	orrs	r3, r1
 800034e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000358:	d003      	beq.n	8000362 <HAL_ADC_Init+0x156>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d10f      	bne.n	8000382 <HAL_ADC_Init+0x176>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800036c:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	fa93 f3a3 	rbit	r3, r3
 8000374:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	fab3 f383 	clz	r3, r3
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	6812      	ldr	r2, [r2, #0]
 800038a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800038c:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000392:	430a      	orrs	r2, r1
 8000394:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	689a      	ldr	r2, [r3, #8]
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <HAL_ADC_Init+0x1f8>)
 800039e:	4013      	ands	r3, r2
 80003a0:	6a3a      	ldr	r2, [r7, #32]
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d10b      	bne.n	80003be <HAL_ADC_Init+0x1b2>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b0:	f023 0303 	bic.w	r3, r3, #3
 80003b4:	f043 0201 	orr.w	r2, r3, #1
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003bc:	e01a      	b.n	80003f4 <HAL_ADC_Init+0x1e8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c2:	f023 0312 	bic.w	r3, r3, #18
 80003c6:	f043 0210 	orr.w	r2, r3, #16
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d2:	f043 0201 	orr.w	r2, r3, #1
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003da:	2301      	movs	r3, #1
 80003dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e008      	b.n	80003f4 <HAL_ADC_Init+0x1e8>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3730      	adds	r7, #48	; 0x30
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	ffe1f7fd 	.word	0xffe1f7fd
 8000404:	ff1f0efe 	.word	0xff1f0efe

08000408 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800041a:	2b01      	cmp	r3, #1
 800041c:	d101      	bne.n	8000422 <HAL_ADC_Start+0x1a>
 800041e:	2302      	movs	r3, #2
 8000420:	e098      	b.n	8000554 <HAL_ADC_Start+0x14c>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 fa02 	bl	8000834 <ADC_Enable>
 8000430:	4603      	mov	r3, r0
 8000432:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8087 	bne.w	800054a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000444:	f023 0301 	bic.w	r3, r3, #1
 8000448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a41      	ldr	r2, [pc, #260]	; (800055c <HAL_ADC_Start+0x154>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d105      	bne.n	8000466 <HAL_ADC_Start+0x5e>
 800045a:	4b41      	ldr	r3, [pc, #260]	; (8000560 <HAL_ADC_Start+0x158>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000462:	2b00      	cmp	r3, #0
 8000464:	d115      	bne.n	8000492 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800047c:	2b00      	cmp	r3, #0
 800047e:	d026      	beq.n	80004ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000488:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000490:	e01d      	b.n	80004ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <HAL_ADC_Start+0x158>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d004      	beq.n	80004b2 <HAL_ADC_Start+0xaa>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a2b      	ldr	r2, [pc, #172]	; (800055c <HAL_ADC_Start+0x154>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d10d      	bne.n	80004ce <HAL_ADC_Start+0xc6>
 80004b2:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <HAL_ADC_Start+0x158>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d007      	beq.n	80004ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	f023 0206 	bic.w	r2, r3, #6
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e6:	e002      	b.n	80004ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f06f 0202 	mvn.w	r2, #2
 80004fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800050a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800050e:	d113      	bne.n	8000538 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <HAL_ADC_Start+0x154>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d105      	bne.n	8000526 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <HAL_ADC_Start+0x158>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000522:	2b00      	cmp	r3, #0
 8000524:	d108      	bne.n	8000538 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	6892      	ldr	r2, [r2, #8]
 8000530:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	e00c      	b.n	8000552 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	6892      	ldr	r2, [r2, #8]
 8000542:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	e003      	b.n	8000552 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40012800 	.word	0x40012800
 8000560:	40012400 	.word	0x40012400

08000564 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800057c:	b490      	push	{r4, r7}
 800057e:	b098      	sub	sp, #96	; 0x60
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __IO uint32_t wait_loop_index = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000596:	2b01      	cmp	r3, #1
 8000598:	d101      	bne.n	800059e <HAL_ADC_ConfigChannel+0x22>
 800059a:	2302      	movs	r3, #2
 800059c:	e13e      	b.n	800081c <HAL_ADC_ConfigChannel+0x2a0>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d830      	bhi.n	8000610 <HAL_ADC_ConfigChannel+0x94>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80005b8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80005bc:	657a      	str	r2, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80005c0:	fa92 f2a2 	rbit	r2, r2
 80005c4:	62fa      	str	r2, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80005c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005c8:	fab2 f282 	clz	r2, r2
 80005cc:	4610      	mov	r0, r2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	6852      	ldr	r2, [r2, #4]
 80005d2:	3a01      	subs	r2, #1
 80005d4:	fb02 f200 	mul.w	r2, r2, r0
 80005d8:	201f      	movs	r0, #31
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	43d2      	mvns	r2, r2
 80005e0:	4011      	ands	r1, r2
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	6810      	ldr	r0, [r2, #0]
 80005e6:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80005ea:	637a      	str	r2, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005ee:	fa92 f2a2 	rbit	r2, r2
 80005f2:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80005f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005f6:	fab2 f282 	clz	r2, r2
 80005fa:	4614      	mov	r4, r2
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	6852      	ldr	r2, [r2, #4]
 8000600:	3a01      	subs	r2, #1
 8000602:	fb02 f204 	mul.w	r2, r2, r4
 8000606:	fa00 f202 	lsl.w	r2, r0, r2
 800060a:	430a      	orrs	r2, r1
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
 800060e:	e064      	b.n	80006da <HAL_ADC_ConfigChannel+0x15e>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	2b0c      	cmp	r3, #12
 8000616:	d830      	bhi.n	800067a <HAL_ADC_ConfigChannel+0xfe>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	6812      	ldr	r2, [r2, #0]
 8000620:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000622:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000626:	64fa      	str	r2, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800062a:	fa92 f2a2 	rbit	r2, r2
 800062e:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000632:	fab2 f282 	clz	r2, r2
 8000636:	4610      	mov	r0, r2
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	6852      	ldr	r2, [r2, #4]
 800063c:	3a07      	subs	r2, #7
 800063e:	fb02 f200 	mul.w	r2, r2, r0
 8000642:	201f      	movs	r0, #31
 8000644:	fa00 f202 	lsl.w	r2, r0, r2
 8000648:	43d2      	mvns	r2, r2
 800064a:	4011      	ands	r1, r2
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	6810      	ldr	r0, [r2, #0]
 8000650:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000654:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000658:	fa92 f2a2 	rbit	r2, r2
 800065c:	62ba      	str	r2, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800065e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000660:	fab2 f282 	clz	r2, r2
 8000664:	4614      	mov	r4, r2
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	6852      	ldr	r2, [r2, #4]
 800066a:	3a07      	subs	r2, #7
 800066c:	fb02 f204 	mul.w	r2, r2, r4
 8000670:	fa00 f202 	lsl.w	r2, r0, r2
 8000674:	430a      	orrs	r2, r1
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
 8000678:	e02f      	b.n	80006da <HAL_ADC_ConfigChannel+0x15e>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000684:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000688:	647a      	str	r2, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800068c:	fa92 f2a2 	rbit	r2, r2
 8000690:	61fa      	str	r2, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	4610      	mov	r0, r2
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	6852      	ldr	r2, [r2, #4]
 800069e:	3a0d      	subs	r2, #13
 80006a0:	fb02 f200 	mul.w	r2, r2, r0
 80006a4:	201f      	movs	r0, #31
 80006a6:	fa00 f202 	lsl.w	r2, r0, r2
 80006aa:	43d2      	mvns	r2, r2
 80006ac:	4011      	ands	r1, r2
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	6810      	ldr	r0, [r2, #0]
 80006b2:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80006b6:	653a      	str	r2, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006ba:	fa92 f2a2 	rbit	r2, r2
 80006be:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80006c0:	6a3a      	ldr	r2, [r7, #32]
 80006c2:	fab2 f282 	clz	r2, r2
 80006c6:	4614      	mov	r4, r2
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	6852      	ldr	r2, [r2, #4]
 80006cc:	3a0d      	subs	r2, #13
 80006ce:	fb02 f204 	mul.w	r2, r2, r4
 80006d2:	fa00 f202 	lsl.w	r2, r0, r2
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b09      	cmp	r3, #9
 80006e0:	d92e      	bls.n	8000740 <HAL_ADC_ConfigChannel+0x1c4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	68d1      	ldr	r1, [r2, #12]
 80006ec:	2238      	movs	r2, #56	; 0x38
 80006ee:	63fa      	str	r2, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006f2:	fa92 f2a2 	rbit	r2, r2
 80006f6:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	fab2 f282 	clz	r2, r2
 80006fe:	4610      	mov	r0, r2
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	3a0a      	subs	r2, #10
 8000706:	fb02 f200 	mul.w	r2, r2, r0
 800070a:	2007      	movs	r0, #7
 800070c:	fa00 f202 	lsl.w	r2, r0, r2
 8000710:	43d2      	mvns	r2, r2
 8000712:	4011      	ands	r1, r2
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	6890      	ldr	r0, [r2, #8]
 8000718:	2238      	movs	r2, #56	; 0x38
 800071a:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800071c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800071e:	fa92 f2a2 	rbit	r2, r2
 8000722:	61ba      	str	r2, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	fab2 f282 	clz	r2, r2
 800072a:	4614      	mov	r4, r2
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	3a0a      	subs	r2, #10
 8000732:	fb02 f204 	mul.w	r2, r2, r4
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	430a      	orrs	r2, r1
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	e02b      	b.n	8000798 <HAL_ADC_ConfigChannel+0x21c>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	6911      	ldr	r1, [r2, #16]
 800074a:	2238      	movs	r2, #56	; 0x38
 800074c:	63ba      	str	r2, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000750:	fa92 f2a2 	rbit	r2, r2
 8000754:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	fab2 f282 	clz	r2, r2
 800075c:	4610      	mov	r0, r2
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	6812      	ldr	r2, [r2, #0]
 8000762:	fb02 f200 	mul.w	r2, r2, r0
 8000766:	2007      	movs	r0, #7
 8000768:	fa00 f202 	lsl.w	r2, r0, r2
 800076c:	43d2      	mvns	r2, r2
 800076e:	4011      	ands	r1, r2
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	6890      	ldr	r0, [r2, #8]
 8000774:	2238      	movs	r2, #56	; 0x38
 8000776:	643a      	str	r2, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800077a:	fa92 f2a2 	rbit	r2, r2
 800077e:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	4614      	mov	r4, r2
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	fb02 f204 	mul.w	r2, r2, r4
 8000790:	fa00 f202 	lsl.w	r2, r0, r2
 8000794:	430a      	orrs	r2, r1
 8000796:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b10      	cmp	r3, #16
 800079e:	d003      	beq.n	80007a8 <HAL_ADC_ConfigChannel+0x22c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	681b      	ldr	r3, [r3, #0]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80007a4:	2b11      	cmp	r3, #17
 80007a6:	d133      	bne.n	8000810 <HAL_ADC_ConfigChannel+0x294>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <HAL_ADC_ConfigChannel+0x2ac>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d125      	bne.n	80007fe <HAL_ADC_ConfigChannel+0x282>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d127      	bne.n	8000810 <HAL_ADC_ConfigChannel+0x294>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	6892      	ldr	r2, [r2, #8]
 80007ca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007ce:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b10      	cmp	r3, #16
 80007d6:	d11b      	bne.n	8000810 <HAL_ADC_ConfigChannel+0x294>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_ADC_ConfigChannel+0x2b0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_ADC_ConfigChannel+0x2b4>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9a      	lsrs	r2, r3, #18
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80007ee:	e002      	b.n	80007f6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f9      	bne.n	80007f0 <HAL_ADC_ConfigChannel+0x274>
 80007fc:	e008      	b.n	8000810 <HAL_ADC_ConfigChannel+0x294>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000802:	f043 0220 	orr.w	r2, r3, #32
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000818:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800081c:	4618      	mov	r0, r3
 800081e:	3760      	adds	r7, #96	; 0x60
 8000820:	46bd      	mov	sp, r7
 8000822:	bc90      	pop	{r4, r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40012400 	.word	0x40012400
 800082c:	20000000 	.word	0x20000000
 8000830:	431bde83 	.word	0x431bde83

08000834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	2b00      	cmp	r3, #0
 8000850:	d139      	bne.n	80008c6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	6892      	ldr	r2, [r2, #8]
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <ADC_Enable+0x9c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <ADC_Enable+0xa0>)
 8000868:	fba2 2303 	umull	r2, r3, r2, r3
 800086c:	0c9b      	lsrs	r3, r3, #18
 800086e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8000870:	e002      	b.n	8000878 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3b01      	subs	r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f9      	bne.n	8000872 <ADC_Enable+0x3e>
    {
      wait_loop_index--;
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800087e:	f7ff fca5 	bl	80001cc <HAL_GetTick>
 8000882:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000884:	e018      	b.n	80008b8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000886:	f7ff fca1 	bl	80001cc <HAL_GetTick>
 800088a:	4602      	mov	r2, r0
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	2b02      	cmp	r3, #2
 8000892:	d911      	bls.n	80008b8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	f043 0210 	orr.w	r2, r3, #16
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a4:	f043 0201 	orr.w	r2, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e007      	b.n	80008c8 <ADC_Enable+0x94>
    
    /* Get tick count */
    tickstart = HAL_GetTick();

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0df      	beq.n	8000886 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	431bde83 	.word	0x431bde83

080008d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d027      	beq.n	8000942 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6812      	ldr	r2, [r2, #0]
 80008fa:	6892      	ldr	r2, [r2, #8]
 80008fc:	f022 0201 	bic.w	r2, r2, #1
 8000900:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000902:	f7ff fc63 	bl	80001cc <HAL_GetTick>
 8000906:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000908:	e014      	b.n	8000934 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800090a:	f7ff fc5f 	bl	80001cc <HAL_GetTick>
 800090e:	4602      	mov	r2, r0
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	2b02      	cmp	r3, #2
 8000916:	d90d      	bls.n	8000934 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f043 0210 	orr.w	r2, r3, #16
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	e007      	b.n	8000944 <ADC_ConversionStop_Disable+0x6c>
     
    /* Get tick count */
    tickstart = HAL_GetTick();
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1e3      	bne.n	800090a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009a0:	0a1b      	lsrs	r3, r3, #8
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da0b      	bge.n	80009dc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	490d      	ldr	r1, [pc, #52]	; (80009fc <NVIC_SetPriority+0x4c>)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 030f 	and.w	r3, r3, #15
 80009cc:	3b04      	subs	r3, #4
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009da:	e009      	b.n	80009f0 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	4908      	ldr	r1, [pc, #32]	; (8000a00 <NVIC_SetPriority+0x50>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	2201      	movs	r2, #1
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	1e5a      	subs	r2, r3, #1
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	401a      	ands	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	1e59      	subs	r1, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000a58:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a74:	d301      	bcc.n	8000a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SysTick_Config+0x40>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a82:	210f      	movs	r1, #15
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f7ff ff92 	bl	80009b0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x40>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff4b 	bl	800094c <NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop

08000ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad2:	f7ff ff5f 	bl	8000994 <NVIC_GetPriorityGrouping>
 8000ad6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	6978      	ldr	r0, [r7, #20]
 8000ade:	f7ff ff91 	bl	8000a04 <NVIC_EncodePriority>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff60 	bl	80009b0 <NVIC_SetPriority>
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ffaf 	bl	8000a64 <SysTick_Config>
 8000b06:	4603      	mov	r3, r0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d106      	bne.n	8000b2c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b2a:	e005      	b.n	8000b38 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f023 0304 	bic.w	r3, r3, #4
 8000b36:	6013      	str	r3, [r2, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b4c:	f000 f802 	bl	8000b54 <HAL_SYSTICK_Callback>
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b08b      	sub	sp, #44	; 0x2c
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
 8000b82:	e127      	b.n	8000dd4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b84:	2201      	movs	r2, #1
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f040 8116 	bne.w	8000dce <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b12      	cmp	r3, #18
 8000ba8:	d034      	beq.n	8000c14 <HAL_GPIO_Init+0xb4>
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d80d      	bhi.n	8000bca <HAL_GPIO_Init+0x6a>
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d02b      	beq.n	8000c0a <HAL_GPIO_Init+0xaa>
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d804      	bhi.n	8000bc0 <HAL_GPIO_Init+0x60>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d031      	beq.n	8000c1e <HAL_GPIO_Init+0xbe>
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d01c      	beq.n	8000bf8 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000bbe:	e048      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d043      	beq.n	8000c4c <HAL_GPIO_Init+0xec>
 8000bc4:	2b11      	cmp	r3, #17
 8000bc6:	d01b      	beq.n	8000c00 <HAL_GPIO_Init+0xa0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000bc8:	e043      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bca:	4a87      	ldr	r2, [pc, #540]	; (8000de8 <HAL_GPIO_Init+0x288>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d026      	beq.n	8000c1e <HAL_GPIO_Init+0xbe>
 8000bd0:	4a85      	ldr	r2, [pc, #532]	; (8000de8 <HAL_GPIO_Init+0x288>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d806      	bhi.n	8000be4 <HAL_GPIO_Init+0x84>
 8000bd6:	4a85      	ldr	r2, [pc, #532]	; (8000dec <HAL_GPIO_Init+0x28c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d020      	beq.n	8000c1e <HAL_GPIO_Init+0xbe>
 8000bdc:	4a84      	ldr	r2, [pc, #528]	; (8000df0 <HAL_GPIO_Init+0x290>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d01d      	beq.n	8000c1e <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000be2:	e036      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000be4:	4a83      	ldr	r2, [pc, #524]	; (8000df4 <HAL_GPIO_Init+0x294>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d019      	beq.n	8000c1e <HAL_GPIO_Init+0xbe>
 8000bea:	4a83      	ldr	r2, [pc, #524]	; (8000df8 <HAL_GPIO_Init+0x298>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d016      	beq.n	8000c1e <HAL_GPIO_Init+0xbe>
 8000bf0:	4a82      	ldr	r2, [pc, #520]	; (8000dfc <HAL_GPIO_Init+0x29c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf6:	e02c      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e028      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	3304      	adds	r3, #4
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e023      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	3308      	adds	r3, #8
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e01e      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	330c      	adds	r3, #12
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e019      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <HAL_GPIO_Init+0xcc>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c26:	2304      	movs	r3, #4
 8000c28:	623b      	str	r3, [r7, #32]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 8000c2a:	e012      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d105      	bne.n	8000c40 <HAL_GPIO_Init+0xe0>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	611a      	str	r2, [r3, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 8000c3e:	e008      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c40:	2308      	movs	r3, #8
 8000c42:	623b      	str	r3, [r7, #32]
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	615a      	str	r2, [r3, #20]
          }
          break; 
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	bf00      	nop
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2bff      	cmp	r3, #255	; 0xff
 8000c56:	d801      	bhi.n	8000c5c <HAL_GPIO_Init+0xfc>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	e001      	b.n	8000c60 <HAL_GPIO_Init+0x100>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3304      	adds	r3, #4
 8000c60:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	2bff      	cmp	r3, #255	; 0xff
 8000c66:	d802      	bhi.n	8000c6e <HAL_GPIO_Init+0x10e>
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	e002      	b.n	8000c74 <HAL_GPIO_Init+0x114>
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	3b08      	subs	r3, #8
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	401a      	ands	r2, r3
 8000c86:	6a39      	ldr	r1, [r7, #32]
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 8096 	beq.w	8000dce <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4a57      	ldr	r2, [pc, #348]	; (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000ca4:	4b56      	ldr	r3, [pc, #344]	; (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b54      	ldr	r3, [pc, #336]	; (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8000cba:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a49      	ldr	r2, [pc, #292]	; (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d013      	beq.n	8000d0e <HAL_GPIO_Init+0x1ae>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a48      	ldr	r2, [pc, #288]	; (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d00d      	beq.n	8000d0a <HAL_GPIO_Init+0x1aa>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a47      	ldr	r2, [pc, #284]	; (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d007      	beq.n	8000d06 <HAL_GPIO_Init+0x1a6>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a46      	ldr	r2, [pc, #280]	; (8000e14 <HAL_GPIO_Init+0x2b4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <HAL_GPIO_Init+0x1a2>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x1b0>
 8000d02:	2304      	movs	r3, #4
 8000d04:	e004      	b.n	8000d10 <HAL_GPIO_Init+0x1b0>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e002      	b.n	8000d10 <HAL_GPIO_Init+0x1b0>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <HAL_GPIO_Init+0x1b0>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d12:	f002 0203 	and.w	r2, r2, #3
 8000d16:	0092      	lsls	r2, r2, #2
 8000d18:	4093      	lsls	r3, r2
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000d20:	4938      	ldr	r1, [pc, #224]	; (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000d3a:	4937      	ldr	r1, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d3c:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000d48:	4933      	ldr	r1, [pc, #204]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d4a:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4013      	ands	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000d62:	492d      	ldr	r1, [pc, #180]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	604b      	str	r3, [r1, #4]
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000d70:	4929      	ldr	r1, [pc, #164]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000d8a:	4923      	ldr	r1, [pc, #140]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	608b      	str	r3, [r1, #8]
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000d98:	491f      	ldr	r1, [pc, #124]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4013      	ands	r3, r2
 8000da4:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000db2:	4919      	ldr	r1, [pc, #100]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60cb      	str	r3, [r1, #12]
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000dc0:	4915      	ldr	r1, [pc, #84]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60cb      	str	r3, [r1, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	f67f aed4 	bls.w	8000b84 <HAL_GPIO_Init+0x24>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8000ddc:	bf00      	nop
 8000dde:	372c      	adds	r7, #44	; 0x2c
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	10210000 	.word	0x10210000
 8000dec:	10110000 	.word	0x10110000
 8000df0:	10120000 	.word	0x10120000
 8000df4:	10310000 	.word	0x10310000
 8000df8:	10320000 	.word	0x10320000
 8000dfc:	10220000 	.word	0x10220000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40011400 	.word	0x40011400
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b0e5      	sub	sp, #404	; 0x194
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8175 	beq.w	8001156 <HAL_RCC_OscConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e6c:	4bb8      	ldr	r3, [pc, #736]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d00b      	beq.n	8000e90 <HAL_RCC_OscConfig+0x44>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e78:	4bb5      	ldr	r3, [pc, #724]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d15f      	bne.n	8000f44 <HAL_RCC_OscConfig+0xf8>
 8000e84:	4bb2      	ldr	r3, [pc, #712]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d059      	beq.n	8000f44 <HAL_RCC_OscConfig+0xf8>
 8000e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e9c:	fa93 f3a3 	rbit	r3, r3
 8000ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	fab3 f383 	clz	r3, r3
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	f043 0320 	orr.w	r3, r3, #32
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d102      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x78>
 8000ebe:	4ba4      	ldr	r3, [pc, #656]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	e01b      	b.n	8000efc <HAL_RCC_OscConfig+0xb0>
 8000ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000edc:	fab3 f383 	clz	r3, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	f043 0320 	orr.w	r3, r3, #32
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0xac>
 8000ef2:	4b97      	ldr	r3, [pc, #604]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	e001      	b.n	8000efc <HAL_RCC_OscConfig+0xb0>
 8000ef8:	4b95      	ldr	r3, [pc, #596]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f00:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000f08:	fa92 f2a2 	rbit	r2, r2
 8000f0c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000f14:	fab2 f282 	clz	r2, r2
 8000f18:	b252      	sxtb	r2, r2
 8000f1a:	f042 0220 	orr.w	r2, r2, #32
 8000f1e:	b252      	sxtb	r2, r2
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f002 021f 	and.w	r2, r2, #31
 8000f26:	40d3      	lsrs	r3, r2
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 8111 	beq.w	8001154 <HAL_RCC_OscConfig+0x308>
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f040 810b 	bne.w	8001154 <HAL_RCC_OscConfig+0x308>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f000 be9d 	b.w	8001c7e <HAL_RCC_OscConfig+0xe32>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4e:	d106      	bne.n	8000f5e <HAL_RCC_OscConfig+0x112>
 8000f50:	4a7f      	ldr	r2, [pc, #508]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f52:	4b7f      	ldr	r3, [pc, #508]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e030      	b.n	8000fc0 <HAL_RCC_OscConfig+0x174>
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x136>
 8000f68:	4a79      	ldr	r2, [pc, #484]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f6a:	4b79      	ldr	r3, [pc, #484]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4a76      	ldr	r2, [pc, #472]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f76:	4b76      	ldr	r3, [pc, #472]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e01e      	b.n	8000fc0 <HAL_RCC_OscConfig+0x174>
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x15c>
 8000f8e:	4a70      	ldr	r2, [pc, #448]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f90:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4a6d      	ldr	r2, [pc, #436]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f9c:	4b6c      	ldr	r3, [pc, #432]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0x174>
 8000fa8:	4a69      	ldr	r2, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000faa:	4b69      	ldr	r3, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4a66      	ldr	r2, [pc, #408]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000fb6:	4b66      	ldr	r3, [pc, #408]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d060      	beq.n	800108c <HAL_RCC_OscConfig+0x240>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff f8ff 	bl	80001cc <HAL_GetTick>
 8000fce:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	e00a      	b.n	8000fea <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff f8fa 	bl	80001cc <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b64      	cmp	r3, #100	; 0x64
 8000fe2:	d902      	bls.n	8000fea <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	f000 be4a 	b.w	8001c7e <HAL_RCC_OscConfig+0xe32>
 8000fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ffe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	b25b      	sxtb	r3, r3
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	095b      	lsrs	r3, r3, #5
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d102      	bne.n	800101e <HAL_RCC_OscConfig+0x1d2>
 8001018:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	e01b      	b.n	8001056 <HAL_RCC_OscConfig+0x20a>
 800101e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001022:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	b25b      	sxtb	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d102      	bne.n	8001052 <HAL_RCC_OscConfig+0x206>
 800104c:	4b40      	ldr	r3, [pc, #256]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	e001      	b.n	8001056 <HAL_RCC_OscConfig+0x20a>
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105a:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800106a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b252      	sxtb	r2, r2
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	b252      	sxtb	r2, r2
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f002 021f 	and.w	r2, r2, #31
 8001080:	40d3      	lsrs	r3, r2
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0a4      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x188>
 800108a:	e064      	b.n	8001156 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff f89e 	bl	80001cc <HAL_GetTick>
 8001090:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x260>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001096:	f7ff f899 	bl	80001cc <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d902      	bls.n	80010ac <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	f000 bde9 	b.w	8001c7e <HAL_RCC_OscConfig+0xe32>
 80010ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c4:	fab3 f383 	clz	r3, r3
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	f043 0320 	orr.w	r3, r3, #32
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_RCC_OscConfig+0x294>
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	e01b      	b.n	8001118 <HAL_RCC_OscConfig+0x2cc>
 80010e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	b25b      	sxtb	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d102      	bne.n	8001114 <HAL_RCC_OscConfig+0x2c8>
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	e001      	b.n	8001118 <HAL_RCC_OscConfig+0x2cc>
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_RCC_OscConfig+0x304>)
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001124:	fa92 f2a2 	rbit	r2, r2
 8001128:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800112c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	b252      	sxtb	r2, r2
 8001136:	f042 0220 	orr.w	r2, r2, #32
 800113a:	b252      	sxtb	r2, r2
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f002 021f 	and.w	r2, r2, #31
 8001142:	40d3      	lsrs	r3, r2
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1a4      	bne.n	8001096 <HAL_RCC_OscConfig+0x24a>
 800114c:	e003      	b.n	8001156 <HAL_RCC_OscConfig+0x30a>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8198 	beq.w	8001496 <HAL_RCC_OscConfig+0x64a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001166:	4bbc      	ldr	r3, [pc, #752]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_RCC_OscConfig+0x33e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001172:	4bb9      	ldr	r3, [pc, #740]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b08      	cmp	r3, #8
 800117c:	d174      	bne.n	8001268 <HAL_RCC_OscConfig+0x41c>
 800117e:	4bb6      	ldr	r3, [pc, #728]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d16e      	bne.n	8001268 <HAL_RCC_OscConfig+0x41c>
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800119c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a0:	fab3 f383 	clz	r3, r3
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <HAL_RCC_OscConfig+0x370>
 80011b6:	4ba8      	ldr	r3, [pc, #672]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	e01a      	b.n	80011f2 <HAL_RCC_OscConfig+0x3a6>
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d102      	bne.n	80011ee <HAL_RCC_OscConfig+0x3a2>
 80011e8:	4b9b      	ldr	r3, [pc, #620]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	e001      	b.n	80011f2 <HAL_RCC_OscConfig+0x3a6>
 80011ee:	4b9a      	ldr	r3, [pc, #616]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2202      	movs	r2, #2
 80011f4:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80011fc:	fa92 f2a2 	rbit	r2, r2
 8001200:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001204:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001208:	fab2 f282 	clz	r2, r2
 800120c:	b252      	sxtb	r2, r2
 800120e:	f042 0220 	orr.w	r2, r2, #32
 8001212:	b252      	sxtb	r2, r2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f002 021f 	and.w	r2, r2, #31
 800121a:	40d3      	lsrs	r3, r2
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <HAL_RCC_OscConfig+0x3e8>
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d002      	beq.n	8001234 <HAL_RCC_OscConfig+0x3e8>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f000 bd25 	b.w	8001c7e <HAL_RCC_OscConfig+0xe32>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4888      	ldr	r0, [pc, #544]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001236:	4b88      	ldr	r3, [pc, #544]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6959      	ldr	r1, [r3, #20]
 8001244:	23f8      	movs	r3, #248	; 0xf8
 8001246:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e116      	b.n	8001496 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8094 	beq.w	800139c <HAL_RCC_OscConfig+0x550>
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001286:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001294:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001298:	461a      	mov	r2, r3
 800129a:	2301      	movs	r3, #1
 800129c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7fe ff95 	bl	80001cc <HAL_GetTick>
 80012a2:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	e00a      	b.n	80012be <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7fe ff90 	bl	80001cc <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d902      	bls.n	80012be <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f000 bce0 	b.w	8001c7e <HAL_RCC_OscConfig+0xe32>
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012c8:	fa93 f2a3 	rbit	r2, r3
 80012cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012d0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012d6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	f043 0320 	orr.w	r3, r3, #32
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <HAL_RCC_OscConfig+0x4a8>
 80012ee:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	e01c      	b.n	800132e <HAL_RCC_OscConfig+0x4e2>
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001306:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001308:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	b25b      	sxtb	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	095b      	lsrs	r3, r3, #5
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d102      	bne.n	800132a <HAL_RCC_OscConfig+0x4de>
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	e001      	b.n	800132e <HAL_RCC_OscConfig+0x4e2>
 800132a:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	2202      	movs	r2, #2
 8001330:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001338:	fa92 f1a2 	rbit	r1, r2
 800133c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001340:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001342:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	fab2 f282 	clz	r2, r2
 800134c:	b252      	sxtb	r2, r2
 800134e:	f042 0220 	orr.w	r2, r2, #32
 8001352:	b252      	sxtb	r2, r2
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	40d3      	lsrs	r3, r2
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0a1      	beq.n	80012a8 <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4c3c      	ldr	r4, [pc, #240]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6959      	ldr	r1, [r3, #20]
 8001374:	23f8      	movs	r3, #248	; 0xf8
 8001376:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800137e:	fa93 f0a3 	rbit	r0, r3
 8001382:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001386:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001388:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	e07c      	b.n	8001496 <HAL_RCC_OscConfig+0x64a>
 800139c:	2301      	movs	r3, #1
 800139e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013a6:	fa93 f2a3 	rbit	r2, r3
 80013aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013ae:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013b4:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80013c0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80013c4:	461a      	mov	r2, r3
 80013c6:	2300      	movs	r3, #0
 80013c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7fe feff 	bl	80001cc <HAL_GetTick>
 80013ce:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7fe fefa 	bl	80001cc <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d902      	bls.n	80013ea <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f000 bc4a 	b.w	8001c7e <HAL_RCC_OscConfig+0xe32>
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013f4:	fa93 f2a3 	rbit	r2, r3
 80013f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001402:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b25b      	sxtb	r3, r3
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	b25b      	sxtb	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d102      	bne.n	8001420 <HAL_RCC_OscConfig+0x5d4>
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	e01f      	b.n	8001460 <HAL_RCC_OscConfig+0x614>
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800142a:	fa93 f2a3 	rbit	r2, r3
 800142e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001432:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001434:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	b25b      	sxtb	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d105      	bne.n	800145c <HAL_RCC_OscConfig+0x610>
 8001450:	4b01      	ldr	r3, [pc, #4]	; (8001458 <HAL_RCC_OscConfig+0x60c>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	e004      	b.n	8001460 <HAL_RCC_OscConfig+0x614>
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	4bb7      	ldr	r3, [pc, #732]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	2202      	movs	r2, #2
 8001462:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800146a:	fa92 f1a2 	rbit	r1, r2
 800146e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001472:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001474:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	b252      	sxtb	r2, r2
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	b252      	sxtb	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f002 021f 	and.w	r2, r2, #31
 800148c:	40d3      	lsrs	r3, r2
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d19e      	bne.n	80013d4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80f9 	beq.w	8001698 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d07b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x75c>
 80014b0:	2301      	movs	r3, #1
 80014b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014c2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014c8:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b9b      	ldr	r3, [pc, #620]	; (8001740 <HAL_RCC_OscConfig+0x8f4>)
 80014d4:	4413      	add	r3, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	2301      	movs	r3, #1
 80014da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7fe fe76 	bl	80001cc <HAL_GetTick>
 80014e0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e4:	e009      	b.n	80014fa <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7fe fe71 	bl	80001cc <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e3c1      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800150c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800150e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001512:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800151e:	b25b      	sxtb	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <HAL_RCC_OscConfig+0x6e4>
 800152a:	4b84      	ldr	r3, [pc, #528]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	e01c      	b.n	800156a <HAL_RCC_OscConfig+0x71e>
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001542:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001544:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b25b      	sxtb	r3, r3
 8001550:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001554:	b25b      	sxtb	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d102      	bne.n	8001566 <HAL_RCC_OscConfig+0x71a>
 8001560:	4b76      	ldr	r3, [pc, #472]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	e001      	b.n	800156a <HAL_RCC_OscConfig+0x71e>
 8001566:	4b75      	ldr	r3, [pc, #468]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	2202      	movs	r2, #2
 800156c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001574:	fa92 f1a2 	rbit	r1, r2
 8001578:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800157c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800157e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	fab2 f282 	clz	r2, r2
 8001588:	b252      	sxtb	r2, r2
 800158a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800158e:	b252      	sxtb	r2, r2
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f002 021f 	and.w	r2, r2, #31
 8001596:	40d3      	lsrs	r3, r2
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0a2      	beq.n	80014e6 <HAL_RCC_OscConfig+0x69a>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7fe fe1d 	bl	80001e0 <HAL_Delay>
 80015a6:	e077      	b.n	8001698 <HAL_RCC_OscConfig+0x84c>
 80015a8:	2301      	movs	r3, #1
 80015aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015b2:	fa93 f2a3 	rbit	r2, r3
 80015b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80015bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015c0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_RCC_OscConfig+0x8f4>)
 80015cc:	4413      	add	r3, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	2300      	movs	r3, #0
 80015d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7fe fdfa 	bl	80001cc <HAL_GetTick>
 80015d8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	e009      	b.n	80015f2 <HAL_RCC_OscConfig+0x7a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015de:	f7fe fdf5 	bl	80001cc <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x7a6>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e345      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001604:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001606:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800160a:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b25b      	sxtb	r3, r3
 8001612:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001616:	b25b      	sxtb	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b01      	cmp	r3, #1
 8001620:	d102      	bne.n	8001628 <HAL_RCC_OscConfig+0x7dc>
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	e01c      	b.n	8001662 <HAL_RCC_OscConfig+0x816>
 8001628:	2302      	movs	r3, #2
 800162a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800163a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800163c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x812>
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	e001      	b.n	8001662 <HAL_RCC_OscConfig+0x816>
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	2202      	movs	r2, #2
 8001664:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800166c:	fa92 f1a2 	rbit	r1, r2
 8001670:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001674:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001676:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	fab2 f282 	clz	r2, r2
 8001680:	b252      	sxtb	r2, r2
 8001682:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001686:	b252      	sxtb	r2, r2
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	f002 021f 	and.w	r2, r2, #31
 800168e:	40d3      	lsrs	r3, r2
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1a2      	bne.n	80015de <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 813c 	beq.w	8001920 <HAL_RCC_OscConfig+0xad4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4a24      	ldr	r2, [pc, #144]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	61d3      	str	r3, [r2, #28]
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	681b      	ldr	r3, [r3, #0]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c8:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_RCC_OscConfig+0x8f8>)
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_RCC_OscConfig+0x8f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d4:	f7fe fd7a 	bl	80001cc <HAL_GetTick>
 80016d8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80016dc:	e009      	b.n	80016f2 <HAL_RCC_OscConfig+0x8a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7fe fd75 	bl	80001cc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x8a6>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e2c5      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_RCC_OscConfig+0x8f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ef      	beq.n	80016de <HAL_RCC_OscConfig+0x892>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x8ca>
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e036      	b.n	8001784 <HAL_RCC_OscConfig+0x938>
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d113      	bne.n	8001748 <HAL_RCC_OscConfig+0x8fc>
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 800172e:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_OscConfig+0x8f0>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e024      	b.n	8001784 <HAL_RCC_OscConfig+0x938>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	42420480 	.word	0x42420480
 8001744:	40007000 	.word	0x40007000
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x920>
 8001752:	4aac      	ldr	r2, [pc, #688]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 8001754:	4bab      	ldr	r3, [pc, #684]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4aa9      	ldr	r2, [pc, #676]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 8001760:	4ba8      	ldr	r3, [pc, #672]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0x938>
 800176c:	4aa5      	ldr	r2, [pc, #660]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 800176e:	4ba5      	ldr	r3, [pc, #660]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	4aa2      	ldr	r2, [pc, #648]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 800177a:	4ba2      	ldr	r3, [pc, #648]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d064      	beq.n	8001858 <HAL_RCC_OscConfig+0xa0c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7fe fd1d 	bl	80001cc <HAL_GetTick>
 8001792:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0x964>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7fe fd18 	bl	80001cc <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x964>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e266      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017c2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017c8:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x99a>
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x9d4>
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800180a:	b25b      	sxtb	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d102      	bne.n	800181c <HAL_RCC_OscConfig+0x9d0>
 8001816:	4b7b      	ldr	r3, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	e001      	b.n	8001820 <HAL_RCC_OscConfig+0x9d4>
 800181c:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2202      	movs	r2, #2
 8001822:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800182a:	fa92 f1a2 	rbit	r1, r2
 800182e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001832:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001834:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	fab2 f282 	clz	r2, r2
 800183e:	b252      	sxtb	r2, r2
 8001840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001844:	b252      	sxtb	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f002 021f 	and.w	r2, r2, #31
 800184c:	40d3      	lsrs	r3, r2
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0a0      	beq.n	8001798 <HAL_RCC_OscConfig+0x94c>
 8001856:	e063      	b.n	8001920 <HAL_RCC_OscConfig+0xad4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7fe fcb8 	bl	80001cc <HAL_GetTick>
 800185c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001860:	e00b      	b.n	800187a <HAL_RCC_OscConfig+0xa2e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7fe fcb3 	bl	80001cc <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xa2e>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e201      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800188c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800188e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001892:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b25b      	sxtb	r3, r3
 800189a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0xa64>
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e01c      	b.n	80018ea <HAL_RCC_OscConfig+0xa9e>
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d102      	bne.n	80018e6 <HAL_RCC_OscConfig+0xa9a>
 80018e0:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	e001      	b.n	80018ea <HAL_RCC_OscConfig+0xa9e>
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	2202      	movs	r2, #2
 80018ec:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80018f4:	fa92 f1a2 	rbit	r1, r2
 80018f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018fc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b252      	sxtb	r2, r2
 800190a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190e:	b252      	sxtb	r2, r2
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f002 021f 	and.w	r2, r2, #31
 8001916:	40d3      	lsrs	r3, r2
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1a0      	bne.n	8001862 <HAL_RCC_OscConfig+0xa16>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 81a8 	beq.w	8001c7c <HAL_RCC_OscConfig+0xe30>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	f000 819f 	beq.w	8001c78 <HAL_RCC_OscConfig+0xe2c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b02      	cmp	r3, #2
 8001942:	f040 811b 	bne.w	8001b7c <HAL_RCC_OscConfig+0xd30>
 8001946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800195a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800195c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001960:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800196c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001970:	461a      	mov	r2, r3
 8001972:	2300      	movs	r3, #0
 8001974:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7fe fc29 	bl	80001cc <HAL_GetTick>
 800197a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197e:	e009      	b.n	8001994 <HAL_RCC_OscConfig+0xb48>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7fe fc24 	bl	80001cc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0xb48>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e174      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
 8001994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80019a0:	fa93 f2a3 	rbit	r2, r3
 80019a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ae:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	f043 0320 	orr.w	r3, r3, #32
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_OscConfig+0xb80>
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	e01f      	b.n	8001a0c <HAL_RCC_OscConfig+0xbc0>
 80019cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d104      	bne.n	8001a08 <HAL_RCC_OscConfig+0xbbc>
 80019fe:	4b01      	ldr	r3, [pc, #4]	; (8001a04 <HAL_RCC_OscConfig+0xbb8>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	e003      	b.n	8001a0c <HAL_RCC_OscConfig+0xbc0>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	4b9f      	ldr	r3, [pc, #636]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a10:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001a18:	fa92 f1a2 	rbit	r1, r2
 8001a1c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a20:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a22:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b252      	sxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b252      	sxtb	r2, r2
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	40d3      	lsrs	r3, r2
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d19d      	bne.n	8001980 <HAL_RCC_OscConfig+0xb34>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d109      	bne.n	8001a64 <HAL_RCC_OscConfig+0xc18>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a50:	498d      	ldr	r1, [pc, #564]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001a52:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4888      	ldr	r0, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a19      	ldr	r1, [r3, #32]
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	6043      	str	r3, [r0, #4]
 8001a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a94:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001aa6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2301      	movs	r3, #1
 8001aae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fb8c 	bl	80001cc <HAL_GetTick>
 8001ab4:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_OscConfig+0xc82>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aba:	f7fe fb87 	bl	80001cc <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xc82>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0d7      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
 8001ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	f043 0320 	orr.w	r3, r3, #32
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	095b      	lsrs	r3, r3, #5
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <HAL_RCC_OscConfig+0xcba>
 8001b00:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e01d      	b.n	8001b42 <HAL_RCC_OscConfig+0xcf6>
 8001b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b1c:	f107 0320 	add.w	r3, r7, #32
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d102      	bne.n	8001b3e <HAL_RCC_OscConfig+0xcf2>
 8001b38:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	e001      	b.n	8001b42 <HAL_RCC_OscConfig+0xcf6>
 8001b3e:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b46:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001b4e:	fa92 f1a2 	rbit	r1, r2
 8001b52:	f107 021c 	add.w	r2, r7, #28
 8001b56:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b58:	f107 021c 	add.w	r2, r7, #28
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b252      	sxtb	r2, r2
 8001b64:	f042 0220 	orr.w	r2, r2, #32
 8001b68:	b252      	sxtb	r2, r2
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f002 021f 	and.w	r2, r2, #31
 8001b70:	40d3      	lsrs	r3, r2
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d09f      	beq.n	8001aba <HAL_RCC_OscConfig+0xc6e>
 8001b7a:	e07f      	b.n	8001c7c <HAL_RCC_OscConfig+0xe30>
 8001b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f107 0318 	add.w	r3, r7, #24
 8001b90:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b92:	f107 0318 	add.w	r3, r7, #24
 8001b96:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ba2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fb0e 	bl	80001cc <HAL_GetTick>
 8001bb0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_OscConfig+0xd7e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7fe fb09 	bl	80001cc <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xd7e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e059      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
 8001bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_OscConfig+0xdb6>
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	e01d      	b.n	8001c3e <HAL_RCC_OscConfig+0xdf2>
 8001c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	f043 0320 	orr.w	r3, r3, #32
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0xdee>
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	e001      	b.n	8001c3e <HAL_RCC_OscConfig+0xdf2>
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_RCC_OscConfig+0xe3c>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001c4a:	fa92 f1a2 	rbit	r1, r2
 8001c4e:	f107 020c 	add.w	r2, r7, #12
 8001c52:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	fab2 f282 	clz	r2, r2
 8001c5e:	b252      	sxtb	r2, r2
 8001c60:	f042 0220 	orr.w	r2, r2, #32
 8001c64:	b252      	sxtb	r2, r2
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	40d3      	lsrs	r3, r2
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d19f      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xd6a>
 8001c76:	e001      	b.n	8001c7c <HAL_RCC_OscConfig+0xe30>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0xe32>
    }
  }
  
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	40021000 	.word	0x40021000

08001c8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b098      	sub	sp, #96	; 0x60
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	65fb      	str	r3, [r7, #92]	; 0x5c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c9a:	4ba5      	ldr	r3, [pc, #660]	; (8001f30 <HAL_RCC_ClockConfig+0x2a4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0207 	and.w	r2, r3, #7
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d210      	bcs.n	8001cca <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca8:	49a1      	ldr	r1, [pc, #644]	; (8001f30 <HAL_RCC_ClockConfig+0x2a4>)
 8001caa:	4ba1      	ldr	r3, [pc, #644]	; (8001f30 <HAL_RCC_ClockConfig+0x2a4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cb8:	4b9d      	ldr	r3, [pc, #628]	; (8001f30 <HAL_RCC_ClockConfig+0x2a4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0207 	and.w	r2, r3, #7
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e18f      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd6:	4997      	ldr	r1, [pc, #604]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001cd8:	4b96      	ldr	r3, [pc, #600]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8127 	beq.w	8001f44 <HAL_RCC_ClockConfig+0x2b8>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d146      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x100>
 8001cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x9e>
 8001d24:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e017      	b.n	8001d5a <HAL_RCC_ClockConfig+0xce>
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	65bb      	str	r3, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	f043 0320 	orr.w	r3, r3, #32
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xca>
 8001d50:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	e001      	b.n	8001d5a <HAL_RCC_ClockConfig+0xce>
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5e:	657a      	str	r2, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	62ba      	str	r2, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b252      	sxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b252      	sxtb	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f002 021f 	and.w	r2, r2, #31
 8001d7c:	40d3      	lsrs	r3, r2
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 808f 	bne.w	8001ea6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e12e      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d145      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x194>
 8001d94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d98:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	f043 0320 	orr.w	r3, r3, #32
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x134>
 8001dba:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	e017      	b.n	8001df0 <HAL_RCC_ClockConfig+0x164>
 8001dc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	f043 0320 	orr.w	r3, r3, #32
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_ClockConfig+0x160>
 8001de6:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	e001      	b.n	8001df0 <HAL_RCC_ClockConfig+0x164>
 8001dec:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df4:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001df8:	fa92 f2a2 	rbit	r2, r2
 8001dfc:	61fa      	str	r2, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b252      	sxtb	r2, r2
 8001e06:	f042 0220 	orr.w	r2, r2, #32
 8001e0a:	b252      	sxtb	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	40d3      	lsrs	r3, r2
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d144      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0e4      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
 8001e20:	2302      	movs	r3, #2
 8001e22:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x1be>
 8001e44:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e016      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1ec>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	f043 0320 	orr.w	r3, r3, #32
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x1e8>
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	e001      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1ec>
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	2202      	movs	r2, #2
 8001e7a:	63fa      	str	r2, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e7e:	fa92 f2a2 	rbit	r2, r2
 8001e82:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b252      	sxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b252      	sxtb	r2, r2
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	f002 021f 	and.w	r2, r2, #31
 8001e98:	40d3      	lsrs	r3, r2
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0a1      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4923      	ldr	r1, [pc, #140]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 0203 	bic.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe f988 	bl	80001cc <HAL_GetTick>
 8001ebc:	65f8      	str	r0, [r7, #92]	; 0x5c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d112      	bne.n	8001eec <HAL_RCC_ClockConfig+0x260>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x252>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7fe f980 	bl	80001cc <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x252>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e085      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x23c>
 8001eea:	e02b      	b.n	8001f44 <HAL_RCC_ClockConfig+0x2b8>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d121      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x2ac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_ClockConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef6:	f7fe f969 	bl	80001cc <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e06e      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x2a8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d1ee      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x26a>
 8001f18:	e014      	b.n	8001f44 <HAL_RCC_ClockConfig+0x2b8>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1a:	f7fe f957 	bl	80001cc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d905      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e05c      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40021000 	.word	0x40021000
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_RCC_ClockConfig+0x368>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ea      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x28e>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f44:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_RCC_ClockConfig+0x36c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0207 	and.w	r2, r3, #7
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x2e8>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4929      	ldr	r1, [pc, #164]	; (8001ff8 <HAL_RCC_ClockConfig+0x36c>)
 8001f54:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_RCC_ClockConfig+0x36c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 0207 	bic.w	r2, r3, #7
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f62:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <HAL_RCC_ClockConfig+0x36c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0207 	and.w	r2, r3, #7
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x2e8>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_ClockConfig+0x35e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	491c      	ldr	r1, [pc, #112]	; (8001ff4 <HAL_RCC_ClockConfig+0x368>)
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_RCC_ClockConfig+0x368>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f9e:	4915      	ldr	r1, [pc, #84]	; (8001ff4 <HAL_RCC_ClockConfig+0x368>)
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_RCC_ClockConfig+0x368>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fb2:	f000 f827 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_RCC_ClockConfig+0x368>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc0:	23f0      	movs	r3, #240	; 0xf0
 8001fc2:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x370>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	fa21 f303 	lsr.w	r3, r1, r3
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_RCC_ClockConfig+0x374>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7fe f8c8 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3760      	adds	r7, #96	; 0x60
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	08008788 	.word	0x08008788
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b490      	push	{r4, r7}
 8002006:	b08e      	sub	sp, #56	; 0x38
 8002008:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800200c:	1d3c      	adds	r4, r7, #4
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8002018:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xe4>)
 800201a:	463b      	mov	r3, r7
 800201c:	8812      	ldrh	r2, [r2, #0]
 800201e:	801a      	strh	r2, [r3, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
 8002028:	2300      	movs	r3, #0
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_GetSysClockFreq+0xe8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b04      	cmp	r3, #4
 8002042:	d002      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x46>
 8002044:	2b08      	cmp	r3, #8
 8002046:	d003      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x4c>
 8002048:	e043      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xec>)
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800204e:	e043      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002056:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800205a:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002072:	4413      	add	r3, r2
 8002074:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01e      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0xbe>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_GetSysClockFreq+0xe8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800208c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002090:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020a8:	4413      	add	r3, r2
 80020aa:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80020b0:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xec>)
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
 80020c0:	e004      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xc8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80020cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d0:	e002      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xec>)
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3738      	adds	r7, #56	; 0x38
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc90      	pop	{r4, r7}
 80020e2:	4770      	bx	lr
 80020e4:	080033f0 	.word	0x080033f0
 80020e8:	08003400 	.word	0x08003400
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_RCC_GetHCLKFreq+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b090      	sub	sp, #64	; 0x40
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0, temp_reg = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002118:	2300      	movs	r3, #0
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80bd 	beq.w	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4a70      	ldr	r2, [pc, #448]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4a6b      	ldr	r2, [pc, #428]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002144:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800214e:	f7fe f83d 	bl	80001cc <HAL_GetTick>
 8002152:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7fe f839 	bl	80001cc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      {
        return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0bc      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    SET_BIT(PWR->CR, PWR_CR_DBP);
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002168:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002174:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8086 	beq.w	8002292 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002190:	429a      	cmp	r2, r3
 8002192:	d07e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002194:	4b55      	ldr	r3, [pc, #340]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	63bb      	str	r3, [r7, #56]	; 0x38
 800219e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021ac:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021b8:	4413      	add	r3, r2
 80021ba:	461a      	mov	r2, r3
 80021bc:	2301      	movs	r3, #1
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80021ce:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021da:	4413      	add	r3, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	2300      	movs	r3, #0
 80021e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021e2:	4a42      	ldr	r2, [pc, #264]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d04f      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f2:	f7fd ffeb 	bl	80001cc <HAL_GetTick>
 80021f6:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x104>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fd ffe7 	bl	80001cc <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x104>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e068      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8002210:	2302      	movs	r3, #2
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800221c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b25b      	sxtb	r3, r3
 8002224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002228:	b25b      	sxtb	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	e016      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800223a:	2302      	movs	r3, #2
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b25b      	sxtb	r3, r3
 800224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002252:	b25b      	sxtb	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d102      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	e001      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2202      	movs	r2, #2
 800226a:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800226e:	fa92 f2a2 	rbit	r2, r2
 8002272:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	fab2 f282 	clz	r2, r2
 800227a:	b252      	sxtb	r2, r2
 800227c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002280:	b252      	sxtb	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 021f 	and.w	r2, r2, #31
 8002288:	40d3      	lsrs	r3, r2
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0b3      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xee>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002292:	4916      	ldr	r1, [pc, #88]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	620b      	str	r3, [r1, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ce:	4907      	ldr	r1, [pc, #28]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3740      	adds	r7, #64	; 0x40
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	42420400 	.word	0x42420400

080022f8 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	80fb      	strh	r3, [r7, #6]

  if(hspi->State == HAL_SPI_STATE_READY)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 812b 	bne.w	800256c <HAL_SPI_Transmit+0x274>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_SPI_Transmit+0x2a>
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_SPI_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e123      	b.n	800256e <HAL_SPI_Transmit+0x276>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_SPI_Transmit+0x3c>
 8002330:	2302      	movs	r3, #2
 8002332:	e11c      	b.n	800256e <HAL_SPI_Transmit+0x276>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2212      	movs	r2, #18
 8002340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pTxBuffPtr  = pData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->TxISR = 0;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->RxISR = 0;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = 0;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = 0;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	d10f      	bne.n	80023a4 <HAL_SPI_Transmit+0xac>
    {
      SPI_RESET_CRC(hspi);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a2:	601a      	str	r2, [r3, #0]
    }

    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ac:	d107      	bne.n	80023be <HAL_SPI_Transmit+0xc6>
    {
      /* Configure communication direction : 1Line */
      SPI_1LINE_TX(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023bc:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d107      	bne.n	80023dc <HAL_SPI_Transmit+0xe4>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023da:	601a      	str	r2, [r3, #0]
    }

    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d143      	bne.n	800246c <HAL_SPI_Transmit+0x174>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_SPI_Transmit+0xfc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d129      	bne.n	8002448 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	1c58      	adds	r0, r3, #1
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	6308      	str	r0, [r1, #48]	; 0x30
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0)
 8002412:	e019      	b.n	8002448 <HAL_SPI_Transmit+0x150>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	2102      	movs	r1, #2
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8ac 	bl	8002578 <SPI_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_SPI_Transmit+0x132>
        { 
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0a1      	b.n	800256e <HAL_SPI_Transmit+0x276>
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	1c58      	adds	r0, r3, #1
 8002434:	68f9      	ldr	r1, [r7, #12]
 8002436:	6308      	str	r0, [r1, #48]	; 0x30
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
        hspi->TxXferCount--;
      }

      while(hspi->TxXferCount > 0)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e1      	bne.n	8002414 <HAL_SPI_Transmit+0x11c>
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
        hspi->TxXferCount--;
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002458:	d14f      	bne.n	80024fa <HAL_SPI_Transmit+0x202>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e046      	b.n	80024fa <HAL_SPI_Transmit+0x202>
      }
    }
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_SPI_Transmit+0x184>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002478:	2b01      	cmp	r3, #1
 800247a:	d12d      	bne.n	80024d8 <HAL_SPI_Transmit+0x1e0>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	1c9a      	adds	r2, r3, #2
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0)
 800249e:	e01b      	b.n	80024d8 <HAL_SPI_Transmit+0x1e0>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	2102      	movs	r1, #2
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f866 	bl	8002578 <SPI_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_SPI_Transmit+0x1be>
        { 
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e05b      	b.n	800256e <HAL_SPI_Transmit+0x276>
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024be:	8812      	ldrh	r2, [r2, #0]
 80024c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	86da      	strh	r2, [r3, #54]	; 0x36
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
      }

      while(hspi->TxXferCount > 0)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1df      	bne.n	80024a0 <HAL_SPI_Transmit+0x1a8>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e8:	d107      	bne.n	80024fa <HAL_SPI_Transmit+0x202>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024f8:	601a      	str	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2102      	movs	r1, #2
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f839 	bl	8002578 <SPI_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_SPI_Transmit+0x224>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f043 0210 	orr.w	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e028      	b.n	800256e <HAL_SPI_Transmit+0x276>
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f828 	bl	8002578 <SPI_WaitOnFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_SPI_Transmit+0x246>
    { 
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e017      	b.n	800256e <HAL_SPI_Transmit+0x276>
    }
 
    /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_SPI_Transmit+0x260>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]
    }

    hspi->State = HAL_SPI_STATE_READY; 
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e000      	b.n	800256e <HAL_SPI_Transmit+0x276>
  }
  else
  {
    return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop

08002578 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800258c:	f7fd fe1e 	bl	80001cc <HAL_GetTick>
 8002590:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8086 	bne.w	80026a6 <SPI_WaitOnFlagUntilTimeout+0x12e>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800259a:	e03d      	b.n	8002618 <SPI_WaitOnFlagUntilTimeout+0xa0>
    {
      if(Timeout != HAL_MAX_DELAY)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d039      	beq.n	8002618 <SPI_WaitOnFlagUntilTimeout+0xa0>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <SPI_WaitOnFlagUntilTimeout+0x42>
 80025aa:	f7fd fe0f 	bl	80001cc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d92e      	bls.n	8002618 <SPI_WaitOnFlagUntilTimeout+0xa0>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	6852      	ldr	r2, [r2, #4]
 80025c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025c8:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d8:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e2:	d10f      	bne.n	8002604 <SPI_WaitOnFlagUntilTimeout+0x8c>
          {
            SPI_RESET_CRC(hspi);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002602:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e04f      	b.n	80026b8 <SPI_WaitOnFlagUntilTimeout+0x140>
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	401a      	ands	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	d1b9      	bne.n	800259c <SPI_WaitOnFlagUntilTimeout+0x24>
 8002628:	e045      	b.n	80026b6 <SPI_WaitOnFlagUntilTimeout+0x13e>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d039      	beq.n	80026a6 <SPI_WaitOnFlagUntilTimeout+0x12e>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <SPI_WaitOnFlagUntilTimeout+0xd0>
 8002638:	f7fd fdc8 	bl	80001cc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	1ad2      	subs	r2, r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d92e      	bls.n	80026a6 <SPI_WaitOnFlagUntilTimeout+0x12e>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	6852      	ldr	r2, [r2, #4]
 8002652:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002656:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002670:	d10f      	bne.n	8002692 <SPI_WaitOnFlagUntilTimeout+0x11a>
          {
            SPI_RESET_CRC(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002690:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e008      	b.n	80026b8 <SPI_WaitOnFlagUntilTimeout+0x140>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d0b9      	beq.n	800262a <SPI_WaitOnFlagUntilTimeout+0xb2>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e056      	b.n	8002780 <HAL_SPI_Init+0xc0>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_SPI_Init+0x24>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fd52 	bl	8003188 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6851      	ldr	r1, [r2, #4]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6892      	ldr	r2, [r2, #8]
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6912      	ldr	r2, [r2, #16]
 8002714:	4311      	orrs	r1, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6952      	ldr	r2, [r2, #20]
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6992      	ldr	r2, [r2, #24]
 8002720:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	69d2      	ldr	r2, [r2, #28]
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6a12      	ldr	r2, [r2, #32]
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6992      	ldr	r2, [r2, #24]
 8002742:	0c12      	lsrs	r2, r2, #16
 8002744:	f002 0104 	and.w	r1, r2, #4
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002758:	611a      	str	r2, [r3, #16]

#if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	69d2      	ldr	r2, [r2, #28]
 8002764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002768:	61da      	str	r2, [r3, #28]
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_SPI_Init+0xc8>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000024 	.word	0x20000024

0800278c <OledSetCursor>:
**		is clamped to be on the display.
*/

void
OledSetCursor(int xch, int ych)
	{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]

	/* Clamp the specified location to the display surface
	*/
	if (xch >= xchOledMax) {
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <OledSetCursor+0x5c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	db03      	blt.n	80027a8 <OledSetCursor+0x1c>
		xch = xchOledMax-1;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <OledSetCursor+0x5c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
	}

	if (ych >= ychOledMax) {
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <OledSetCursor+0x60>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	db03      	blt.n	80027ba <OledSetCursor+0x2e>
		ych = ychOledMax-1;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <OledSetCursor+0x60>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	603b      	str	r3, [r7, #0]
	}

	/* Save the given character location.
	*/
	xchOledCur = xch;
 80027ba:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <OledSetCursor+0x64>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6013      	str	r3, [r2, #0]
	ychOledCur = ych;
 80027c0:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <OledSetCursor+0x68>)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6013      	str	r3, [r2, #0]

	/* Convert the character location to a frame buffer address.
	*/
	OledMoveTo(xch*dxcoOledFontCur, ych*dycoOledFontCur);
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <OledSetCursor+0x6c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	fb02 f003 	mul.w	r0, r2, r3
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <OledSetCursor+0x70>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	f000 fa0e 	bl	8002bfc <OledMoveTo>

}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000028 	.word	0x20000028
 80027ec:	20000138 	.word	0x20000138
 80027f0:	2000002c 	.word	0x2000002c
 80027f4:	20000030 	.word	0x20000030
 80027f8:	20000354 	.word	0x20000354
 80027fc:	20000350 	.word	0x20000350

08002800 <OledPutString>:
**		display and advance the cursor.
*/

void
OledPutString(char * sz)
	{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

	while (*sz != '\0') {
 8002808:	e009      	b.n	800281e <OledPutString+0x1e>
		OledDrawGlyph(*sz);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f816 	bl	8002840 <OledDrawGlyph>
		OledAdvanceCursor();
 8002814:	f000 f856 	bl	80028c4 <OledAdvanceCursor>
		sz += 1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3301      	adds	r3, #1
 800281c:	607b      	str	r3, [r7, #4]

void
OledPutString(char * sz)
	{

	while (*sz != '\0') {
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f1      	bne.n	800280a <OledPutString+0xa>
		OledDrawGlyph(*sz);
		OledAdvanceCursor();
		sz += 1;
	}

	if (fOledCharUpdate) {
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <OledPutString+0x3c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <OledPutString+0x32>
		OledUpdate();
 800282e:	f000 f967 	bl	8002b00 <OledUpdate>
	}

}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000358 	.word	0x20000358

08002840 <OledDrawGlyph>:
**		current drawing position in the display buffer.
*/

void
OledDrawGlyph(char ch)
	{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
	uint8_t *	pbFont;
	uint8_t *	pbBmp;
	int		ib;

	if ((ch & 0x80) != 0) {
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db2b      	blt.n	80028aa <OledDrawGlyph+0x6a>
		return;
	}

	if (ch < chOledUserMax) {
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2b1f      	cmp	r3, #31
 8002856:	d806      	bhi.n	8002866 <OledDrawGlyph+0x26>
		pbFont = pbOledFontUser + ch*cbOledChar;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <OledDrawGlyph+0x74>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	79fa      	ldrb	r2, [r7, #7]
 800285e:	00d2      	lsls	r2, r2, #3
 8002860:	4413      	add	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e00a      	b.n	800287c <OledDrawGlyph+0x3c>
	}
	else if ((ch & 0x80) == 0) {
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db06      	blt.n	800287c <OledDrawGlyph+0x3c>
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <OledDrawGlyph+0x78>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	79fa      	ldrb	r2, [r7, #7]
 8002874:	3a20      	subs	r2, #32
 8002876:	00d2      	lsls	r2, r2, #3
 8002878:	4413      	add	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
	}

	pbBmp = pbOledCur;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <OledDrawGlyph+0x7c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	613b      	str	r3, [r7, #16]

	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e00a      	b.n	800289e <OledDrawGlyph+0x5e>
		*pbBmp++ = *pbFont++;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	613a      	str	r2, [r7, #16]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	1c51      	adds	r1, r2, #1
 8002892:	6179      	str	r1, [r7, #20]
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	701a      	strb	r2, [r3, #0]
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
	}

	pbBmp = pbOledCur;

	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <OledDrawGlyph+0x80>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbef      	blt.n	8002888 <OledDrawGlyph+0x48>
 80028a8:	e000      	b.n	80028ac <OledDrawGlyph+0x6c>
	uint8_t *	pbFont;
	uint8_t *	pbBmp;
	int		ib;

	if ((ch & 0x80) != 0) {
		return;
 80028aa:	bf00      	nop

	for (ib = 0; ib < dxcoOledFontCur; ib++) {
		*pbBmp++ = *pbFont++;
	}

}
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	20000360 	.word	0x20000360
 80028b8:	2000034c 	.word	0x2000034c
 80028bc:	20000344 	.word	0x20000344
 80028c0:	20000354 	.word	0x20000354

080028c4 <OledAdvanceCursor>:
**		end of the display.
*/

void
OledAdvanceCursor()
	{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0

	xchOledCur += 1;
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <OledAdvanceCursor+0x50>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	4a11      	ldr	r2, [pc, #68]	; (8002914 <OledAdvanceCursor+0x50>)
 80028d0:	6013      	str	r3, [r2, #0]
	if (xchOledCur >= xchOledMax) {
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <OledAdvanceCursor+0x50>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <OledAdvanceCursor+0x54>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	db07      	blt.n	80028ee <OledAdvanceCursor+0x2a>
		xchOledCur = 0;
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <OledAdvanceCursor+0x50>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
		ychOledCur += 1;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <OledAdvanceCursor+0x58>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	4a0c      	ldr	r2, [pc, #48]	; (800291c <OledAdvanceCursor+0x58>)
 80028ec:	6013      	str	r3, [r2, #0]
	}
	if (ychOledCur >= ychOledMax) {
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <OledAdvanceCursor+0x58>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <OledAdvanceCursor+0x5c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	db02      	blt.n	8002900 <OledAdvanceCursor+0x3c>
		ychOledCur = 0;
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <OledAdvanceCursor+0x58>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
	}

	OledSetCursor(xchOledCur, ychOledCur);
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <OledAdvanceCursor+0x50>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <OledAdvanceCursor+0x58>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f7ff ff3e 	bl	800278c <OledSetCursor>

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	2000002c 	.word	0x2000002c
 8002918:	20000028 	.word	0x20000028
 800291c:	20000030 	.word	0x20000030
 8002920:	20000138 	.word	0x20000138

08002924 <OledInit>:
**		Initialize the OLED display subsystem.
*/

void
OledInit()
	{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0

	/* Init the PIC32 peripherals used to talk to the display.
	*/
	OledHostInit();
 8002928:	f000 f808 	bl	800293c <OledHostInit>

	/* Init the memory variables used to control access to the
	** display.
	*/
	OledDvrInit();
 800292c:	f000 f828 	bl	8002980 <OledDvrInit>

	/* Init the OLED display hardware.
	*/
	OledDevInit();
 8002930:	f000 f87e 	bl	8002a30 <OledDevInit>

	/* Clear the display.
	*/
	OledClear();
 8002934:	f000 f8c0 	bl	8002ab8 <OledClear>

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <OledHostInit>:
**		SPI2. This needs to be generalized.
*/

void
OledHostInit()
	{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

	//pinMode(DataCmd, OUTPUT);
	//pinMode(VbatCtrl, OUTPUT);
	//pinMode(VddCtrl, OUTPUT);

	digitalWrite(DataCmd, HIGH);
 8002940:	2302      	movs	r3, #2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f944 	bl	8002bd4 <digitalWrite>
	digitalWrite(VbatCtrl, HIGH);
 800294c:	2308      	movs	r3, #8
 800294e:	b29b      	uxth	r3, r3
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f93e 	bl	8002bd4 <digitalWrite>
	digitalWrite(VddCtrl, HIGH);
 8002958:	2310      	movs	r3, #16
 800295a:	b29b      	uxth	r3, r3
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f938 	bl	8002bd4 <digitalWrite>

	// pinMode(Reset, OUTPUT);
	digitalWrite(Reset, HIGH);
 8002964:	2304      	movs	r3, #4
 8002966:	b29b      	uxth	r3, r3
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f932 	bl	8002bd4 <digitalWrite>


	digitalWrite(ChipSelect, LOW); //spiCon.setSelect(LOW);
 8002970:	2301      	movs	r3, #1
 8002972:	b29b      	uxth	r3, r3
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f92c 	bl	8002bd4 <digitalWrite>

}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <OledDvrInit>:
**		Initialize the OLED software system
*/

void
OledDvrInit()
	{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	int		ib;

	/* Init the parameters for the default font
	*/
	dxcoOledFontCur = cbOledChar;
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <OledDvrInit+0x80>)
 8002988:	2208      	movs	r2, #8
 800298a:	601a      	str	r2, [r3, #0]
	dycoOledFontCur = 8;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <OledDvrInit+0x84>)
 800298e:	2208      	movs	r2, #8
 8002990:	601a      	str	r2, [r3, #0]
	pbOledFontCur = (uint8_t*)rgbOledFont0;
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <OledDvrInit+0x88>)
 8002994:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <OledDvrInit+0x8c>)
 8002996:	601a      	str	r2, [r3, #0]
	pbOledFontUser = rgbOledFontUser;
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <OledDvrInit+0x90>)
 800299a:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <OledDvrInit+0x94>)
 800299c:	601a      	str	r2, [r3, #0]

	for (ib = 0; ib < cbOledFontUser; ib++) {
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	e007      	b.n	80029b4 <OledDvrInit+0x34>
		rgbOledFontUser[ib] = 0;
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <OledDvrInit+0x94>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
	dxcoOledFontCur = cbOledChar;
	dycoOledFontCur = 8;
	pbOledFontCur = (uint8_t*)rgbOledFont0;
	pbOledFontUser = rgbOledFontUser;

	for (ib = 0; ib < cbOledFontUser; ib++) {
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3301      	adds	r3, #1
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	ddf4      	ble.n	80029a4 <OledDvrInit+0x24>
		rgbOledFontUser[ib] = 0;
	}

	xchOledMax = ccolOledMax / dxcoOledFontCur;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <OledDvrInit+0x80>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <OledDvrInit+0x98>)
 80029c6:	6013      	str	r3, [r2, #0]
	ychOledMax = crowOledMax / dycoOledFontCur;
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <OledDvrInit+0x84>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2220      	movs	r2, #32
 80029ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <OledDvrInit+0x9c>)
 80029d4:	6013      	str	r3, [r2, #0]

	/* Set the default character cursor position.
	*/
	OledSetCursor(0, 0);
 80029d6:	2100      	movs	r1, #0
 80029d8:	2000      	movs	r0, #0
 80029da:	f7ff fed7 	bl	800278c <OledSetCursor>

	/* Set the default foreground draw color and fill pattern
	*/
	clrOledCur = 0x01;
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <OledDvrInit+0xa0>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
	pbOledPatCur = (uint8_t*)rgbFillPat;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <OledDvrInit+0xa4>)
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <OledDvrInit+0xa8>)
 80029e8:	601a      	str	r2, [r3, #0]
	OledSetDrawMode(modOledSet);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 f938 	bl	8002c60 <OledSetDrawMode>

	/* Default the character routines to automaticall
	** update the display.
	*/
	fOledCharUpdate = 1;
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <OledDvrInit+0xac>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000354 	.word	0x20000354
 8002a04:	20000350 	.word	0x20000350
 8002a08:	2000034c 	.word	0x2000034c
 8002a0c:	08003448 	.word	0x08003448
 8002a10:	20000360 	.word	0x20000360
 8002a14:	20000034 	.word	0x20000034
 8002a18:	20000028 	.word	0x20000028
 8002a1c:	20000138 	.word	0x20000138
 8002a20:	2000035c 	.word	0x2000035c
 8002a24:	20000348 	.word	0x20000348
 8002a28:	08003748 	.word	0x08003748
 8002a2c:	20000358 	.word	0x20000358

08002a30 <OledDevInit>:
**		Initialize the OLED display controller and turn the display on.
*/

void
OledDevInit()
	{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0

	/* We're going to be sending commands, so clear the Data/Cmd bit
	*/
	digitalWrite(DataCmd, LOW);
 8002a34:	2302      	movs	r3, #2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f8ca 	bl	8002bd4 <digitalWrite>

	/* Start by turning VDD on and wait a while for the power to come up.
	*/
	digitalWrite(VddCtrl, LOW);
 8002a40:	2310      	movs	r3, #16
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f8c4 	bl	8002bd4 <digitalWrite>
	HAL_Delay(1);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7fd fbc7 	bl	80001e0 <HAL_Delay>
	//delay(1);

	/* Display off command
	*/
	Spi2PutByte(cmdOledDisplayOff);
 8002a52:	20ae      	movs	r0, #174	; 0xae
 8002a54:	f000 f8aa 	bl	8002bac <Spi2PutByte>

	/* Bring Reset low and then high
	*/
	digitalWrite(Reset, LOW);
 8002a58:	2304      	movs	r3, #4
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f8b8 	bl	8002bd4 <digitalWrite>
	//delay(1);
	digitalWrite(Reset, HIGH);
 8002a64:	2304      	movs	r3, #4
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f8b2 	bl	8002bd4 <digitalWrite>

	/* Send the Set Charge Pump and Set Pre-Charge Period commands
	*/
	Spi2PutByte(0x8D);		//From Univision data sheet, not in SSD1306 data sheet
 8002a70:	208d      	movs	r0, #141	; 0x8d
 8002a72:	f000 f89b 	bl	8002bac <Spi2PutByte>
	Spi2PutByte(0x14);
 8002a76:	2014      	movs	r0, #20
 8002a78:	f000 f898 	bl	8002bac <Spi2PutByte>

	Spi2PutByte(0xD9);		//From Univision data sheet, not in SSD1306 data sheet
 8002a7c:	20d9      	movs	r0, #217	; 0xd9
 8002a7e:	f000 f895 	bl	8002bac <Spi2PutByte>
	Spi2PutByte(0xF1);
 8002a82:	20f1      	movs	r0, #241	; 0xf1
 8002a84:	f000 f892 	bl	8002bac <Spi2PutByte>

	/* Turn on VCC and wait 100ms
	*/
	digitalWrite(VbatCtrl, LOW);
 8002a88:	2308      	movs	r3, #8
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f8a0 	bl	8002bd4 <digitalWrite>
	// delay(100);

	/* Send the commands to invert the display.
	*/
	Spi2PutByte(cmdOledSegRemap);		//remap columns
 8002a94:	20a1      	movs	r0, #161	; 0xa1
 8002a96:	f000 f889 	bl	8002bac <Spi2PutByte>
	Spi2PutByte(cmdOledComDir);			//remap the rows
 8002a9a:	20c8      	movs	r0, #200	; 0xc8
 8002a9c:	f000 f886 	bl	8002bac <Spi2PutByte>

	/* Send the commands to select sequential COM configuration
	*/
	Spi2PutByte(cmdOledComConfig);		//set COM configuration command
 8002aa0:	20da      	movs	r0, #218	; 0xda
 8002aa2:	f000 f883 	bl	8002bac <Spi2PutByte>
	Spi2PutByte(0x20);					//sequential COM, left/right remap enabled
 8002aa6:	2020      	movs	r0, #32
 8002aa8:	f000 f880 	bl	8002bac <Spi2PutByte>

	/* Send Display On command
	*/
	Spi2PutByte(cmdOledDisplayOn);
 8002aac:	20af      	movs	r0, #175	; 0xaf
 8002aae:	f000 f87d 	bl	8002bac <Spi2PutByte>

}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop

08002ab8 <OledClear>:
**		updates the display.
*/

void
OledClear()
	{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0

	OledClearBuffer();
 8002abc:	f000 f804 	bl	8002ac8 <OledClearBuffer>
	OledUpdate();
 8002ac0:	f000 f81e 	bl	8002b00 <OledUpdate>

}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <OledClearBuffer>:
**		Clear the display memory buffer.
*/

void
OledClearBuffer()
	{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
	int			ib;
	uint8_t *		pb;

	pb = rgbOledBmp;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <OledClearBuffer+0x34>)
 8002ad0:	603b      	str	r3, [r7, #0]

	/* Fill the memory buffer with 0.
	*/
	for (ib = 0; ib < cbOledDispMax; ib++) {
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	e007      	b.n	8002ae8 <OledClearBuffer+0x20>
		*pb++ = 0x00;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	603a      	str	r2, [r7, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]

	pb = rgbOledBmp;

	/* Fill the memory buffer with 0.
	*/
	for (ib = 0; ib < cbOledDispMax; ib++) {
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aee:	dbf3      	blt.n	8002ad8 <OledClearBuffer+0x10>
		*pb++ = 0x00;
	}

}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000140 	.word	0x20000140

08002b00 <OledUpdate>:
**		Update the OLED display with the contents of the memory buffer
*/

void
OledUpdate()
	{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
	int		ipag;
	int		icol;
	uint8_t *	pb;

	pb = rgbOledBmp;
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <OledUpdate+0x68>)
 8002b08:	603b      	str	r3, [r7, #0]

	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	e023      	b.n	8002b58 <OledUpdate+0x58>

		digitalWrite(DataCmd, LOW);
 8002b10:	2302      	movs	r3, #2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f85c 	bl	8002bd4 <digitalWrite>

		/* Set the page address
		*/
		Spi2PutByte(0x22);		//Set page command
 8002b1c:	2022      	movs	r0, #34	; 0x22
 8002b1e:	f000 f845 	bl	8002bac <Spi2PutByte>
		Spi2PutByte(ipag);		//page number
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f840 	bl	8002bac <Spi2PutByte>

		/* Start at the left column
		*/
		Spi2PutByte(0x00);		//set low nybble of column
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f000 f83d 	bl	8002bac <Spi2PutByte>
		Spi2PutByte(0x10);		//set high nybble of column
 8002b32:	2010      	movs	r0, #16
 8002b34:	f000 f83a 	bl	8002bac <Spi2PutByte>

		digitalWrite(DataCmd, HIGH);
 8002b38:	2302      	movs	r3, #2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f848 	bl	8002bd4 <digitalWrite>

		/* Copy this memory page of display data.
		*/
		OledPutBuffer(ccolOledMax, pb);
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	2080      	movs	r0, #128	; 0x80
 8002b48:	f000 f810 	bl	8002b6c <OledPutBuffer>
		pb += ccolOledMax;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	3380      	adds	r3, #128	; 0x80
 8002b50:	603b      	str	r3, [r7, #0]
	int		icol;
	uint8_t *	pb;

	pb = rgbOledBmp;

	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3301      	adds	r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	ddd8      	ble.n	8002b10 <OledUpdate+0x10>
		OledPutBuffer(ccolOledMax, pb);
		pb += ccolOledMax;

	}

}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000140 	.word	0x20000140

08002b6c <OledPutBuffer>:
**		Send the bytes specified in rgbTx to the slave and return
**		the bytes read from the slave in rgbRx
*/
void
OledPutBuffer(int cb, uint8_t * rgbTx)
	{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
	int		ib;
	uint8_t	bTmp;

	/* Write/Read the data
	*/
	for (ib = 0; ib < cb; ib++) {
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e00c      	b.n	8002b96 <OledPutBuffer+0x2a>

	    HAL_SPI_Transmit(&hspi1, rgbTx, 1, HAL_MAX_DELAY);
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	2201      	movs	r2, #1
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <OledPutBuffer+0x3c>)
 8002b86:	f7ff fbb7 	bl	80022f8 <HAL_SPI_Transmit>
	    rgbTx++;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	603b      	str	r3, [r7, #0]
	int		ib;
	uint8_t	bTmp;

	/* Write/Read the data
	*/
	for (ib = 0; ib < cb; ib++) {
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3301      	adds	r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	dbee      	blt.n	8002b7c <OledPutBuffer+0x10>
	    rgbTx++;
		//bTmp = spiCon.transfer(*rgbTx++);

	}

}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200003a0 	.word	0x200003a0

08002bac <Spi2PutByte>:
**	Description:
**		Write/Read a byte on SPI port 2
*/
uint8_t
Spi2PutByte(uint8_t bVal)
	{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t	bRx;

    HAL_SPI_Transmit(&hspi1, &bVal, 1, HAL_MAX_DELAY);
 8002bb6:	1df9      	adds	r1, r7, #7
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <Spi2PutByte+0x24>)
 8002bc0:	f7ff fb9a 	bl	80022f8 <HAL_SPI_Transmit>

	// bRx = spiCon.transfer(bVal);
	
	//return bRx;
}
 8002bc4:	bf00      	nop
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200003a0 	.word	0x200003a0

08002bd4 <digitalWrite>:

void digitalWrite(uint16_t mypin, unsigned char cLevel){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460a      	mov	r2, r1
 8002bde:	80fb      	strh	r3, [r7, #6]
 8002be0:	4613      	mov	r3, r2
 8002be2:	717b      	strb	r3, [r7, #5]
	
	
	HAL_GPIO_WritePin(GPIOA, mypin, cLevel);
 8002be4:	797a      	ldrb	r2, [r7, #5]
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <digitalWrite+0x24>)
 8002bec:	f7fe f916 	bl	8000e1c <HAL_GPIO_WritePin>

	
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40010800 	.word	0x40010800

08002bfc <OledMoveTo>:
**		Set the current graphics drawing position.
*/

void
OledMoveTo(int xco, int yco)
	{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]

	/* Clamp the specified coordinates to the display surface
	*/
	xco = OledClampXco(xco);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8c8 	bl	8002d9c <OledClampXco>
 8002c0c:	6078      	str	r0, [r7, #4]
	yco = OledClampYco(yco);
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	f000 f8d8 	bl	8002dc4 <OledClampYco>
 8002c14:	6038      	str	r0, [r7, #0]

	/* Save the current position.
	*/
	xcoOledCur = xco;
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <OledMoveTo+0x50>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6013      	str	r3, [r2, #0]
	ycoOledCur = yco;
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <OledMoveTo+0x54>)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6013      	str	r3, [r2, #0]

	/* Compute the display access parameters corresponding to
	** the specified position.
	*/
	pbOledCur = &rgbOledBmp[((yco/8) * ccolOledMax) + xco];
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da00      	bge.n	8002c2a <OledMoveTo+0x2e>
 8002c28:	3307      	adds	r3, #7
 8002c2a:	10db      	asrs	r3, r3, #3
 8002c2c:	01da      	lsls	r2, r3, #7
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <OledMoveTo+0x58>)
 8002c34:	4413      	add	r3, r2
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <OledMoveTo+0x5c>)
 8002c38:	6013      	str	r3, [r2, #0]
	bnOledCur = yco & 7;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <OledMoveTo+0x60>)
 8002c42:	6013      	str	r3, [r2, #0]

}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000340 	.word	0x20000340
 8002c50:	2000013c 	.word	0x2000013c
 8002c54:	20000140 	.word	0x20000140
 8002c58:	20000344 	.word	0x20000344
 8002c5c:	20000364 	.word	0x20000364

08002c60 <OledSetDrawMode>:
**		Set the specified mode as the current drawing mode.
*/

void
OledSetDrawMode(int mod)
	{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

	modOledCur = mod;
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <OledSetDrawMode+0x64>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6013      	str	r3, [r2, #0]

	switch(mod) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d81b      	bhi.n	8002cac <OledSetDrawMode+0x4c>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <OledSetDrawMode+0x1c>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002c8d 	.word	0x08002c8d
 8002c80:	08002c95 	.word	0x08002c95
 8002c84:	08002c9d 	.word	0x08002c9d
 8002c88:	08002ca5 	.word	0x08002ca5
		case	modOledSet:
			pfnDoRop = OledRopSet;
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <OledSetDrawMode+0x68>)
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <OledSetDrawMode+0x6c>)
 8002c90:	601a      	str	r2, [r3, #0]
			break;
 8002c92:	e011      	b.n	8002cb8 <OledSetDrawMode+0x58>

		case	modOledOr:
			pfnDoRop = OledRopOr;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <OledSetDrawMode+0x68>)
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <OledSetDrawMode+0x70>)
 8002c98:	601a      	str	r2, [r3, #0]
			break;
 8002c9a:	e00d      	b.n	8002cb8 <OledSetDrawMode+0x58>

		case	modOledAnd:
			pfnDoRop = OledRopAnd;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <OledSetDrawMode+0x68>)
 8002c9e:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <OledSetDrawMode+0x74>)
 8002ca0:	601a      	str	r2, [r3, #0]
			break;
 8002ca2:	e009      	b.n	8002cb8 <OledSetDrawMode+0x58>

		case	modOledXor:
			pfnDoRop = OledRopXor;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <OledSetDrawMode+0x68>)
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <OledSetDrawMode+0x78>)
 8002ca8:	601a      	str	r2, [r3, #0]
			break;
 8002caa:	e005      	b.n	8002cb8 <OledSetDrawMode+0x58>

		default:
			modOledCur = modOledSet;
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <OledSetDrawMode+0x64>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
			pfnDoRop = OledRopSet;
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <OledSetDrawMode+0x68>)
 8002cb4:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <OledSetDrawMode+0x6c>)
 8002cb6:	601a      	str	r2, [r3, #0]
	}

}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000368 	.word	0x20000368
 8002cc8:	2000036c 	.word	0x2000036c
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002d19 	.word	0x08002d19
 8002cd4:	08002d45 	.word	0x08002d45
 8002cd8:	08002d71 	.word	0x08002d71

08002cdc <OledRopSet>:
**
*/

uint8_t
OledRopSet(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	71bb      	strb	r3, [r7, #6]
 8002cea:	4613      	mov	r3, r2
 8002cec:	717b      	strb	r3, [r7, #5]

	return (bDsp & ~mskPix) | (bPix & mskPix);
 8002cee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	b25a      	sxtb	r2, r3
 8002cf6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	b25a      	sxtb	r2, r3
 8002cfe:	79f9      	ldrb	r1, [r7, #7]
 8002d00:	797b      	ldrb	r3, [r7, #5]
 8002d02:	400b      	ands	r3, r1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3

}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <OledRopOr>:
**
*/

uint8_t
OledRopOr(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
 8002d22:	460b      	mov	r3, r1
 8002d24:	71bb      	strb	r3, [r7, #6]
 8002d26:	4613      	mov	r3, r2
 8002d28:	717b      	strb	r3, [r7, #5]

	return bDsp | (bPix & mskPix);
 8002d2a:	79fa      	ldrb	r2, [r7, #7]
 8002d2c:	797b      	ldrb	r3, [r7, #5]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	79bb      	ldrb	r3, [r7, #6]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b2db      	uxtb	r3, r3

}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <OledRopAnd>:
**
*/

uint8_t
OledRopAnd(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	71bb      	strb	r3, [r7, #6]
 8002d52:	4613      	mov	r3, r2
 8002d54:	717b      	strb	r3, [r7, #5]

	return bDsp & (bPix & mskPix);
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	797b      	ldrb	r3, [r7, #5]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	79bb      	ldrb	r3, [r7, #6]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b2db      	uxtb	r3, r3

}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop

08002d70 <OledRopXor>:
**
*/

uint8_t
OledRopXor(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	71bb      	strb	r3, [r7, #6]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	717b      	strb	r3, [r7, #5]

	return bDsp ^ (bPix & mskPix);
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	797b      	ldrb	r3, [r7, #5]
 8002d86:	4013      	ands	r3, r2
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	79bb      	ldrb	r3, [r7, #6]
 8002d8c:	4053      	eors	r3, r2
 8002d8e:	b2db      	uxtb	r3, r3

}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop

08002d9c <OledClampXco>:
**		This routine forces the x value to be on the display.
*/

int
OledClampXco(int xco)
	{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	if (xco < 0) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da01      	bge.n	8002dae <OledClampXco+0x12>
		xco = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
	}
	if (xco >= ccolOledMax) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b7f      	cmp	r3, #127	; 0x7f
 8002db2:	dd01      	ble.n	8002db8 <OledClampXco+0x1c>
		xco = ccolOledMax-1;
 8002db4:	237f      	movs	r3, #127	; 0x7f
 8002db6:	607b      	str	r3, [r7, #4]
	}

	return xco;
 8002db8:	687b      	ldr	r3, [r7, #4]

}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <OledClampYco>:
**		This routine forces the y value to be on the display.
*/

int
OledClampYco(int yco)
	{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	if (yco < 0) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da01      	bge.n	8002dd6 <OledClampYco+0x12>
		yco = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
	}
	if (yco >= crowOledMax) {
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b1f      	cmp	r3, #31
 8002dda:	dd01      	ble.n	8002de0 <OledClampYco+0x1c>
		yco = crowOledMax-1;
 8002ddc:	231f      	movs	r3, #31
 8002dde:	607b      	str	r3, [r7, #4]
	}

	return yco;
 8002de0:	687b      	ldr	r3, [r7, #4]

}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <MX_ADC1_Init+0x78>)
 8002df6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002e0c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e1e:	4810      	ldr	r0, [pc, #64]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002e20:	f7fd f9f4 	bl	800020c <HAL_ADC_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <MX_ADC1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e2a:	2143      	movs	r1, #67	; 0x43
 8002e2c:	480e      	ldr	r0, [pc, #56]	; (8002e68 <MX_ADC1_Init+0x7c>)
 8002e2e:	f000 f96b 	bl	8003108 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8002e32:	2303      	movs	r3, #3
 8002e34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	4807      	ldr	r0, [pc, #28]	; (8002e60 <MX_ADC1_Init+0x74>)
 8002e44:	f7fd fb9a 	bl	800057c <HAL_ADC_ConfigChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <MX_ADC1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e4e:	214d      	movs	r1, #77	; 0x4d
 8002e50:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_ADC1_Init+0x7c>)
 8002e52:	f000 f959 	bl	8003108 <_Error_Handler>
  }

}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000370 	.word	0x20000370
 8002e64:	40012400 	.word	0x40012400
 8002e68:	08003404 	.word	0x08003404

08002e6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_ADC_MspInit+0x48>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d115      	bne.n	8002eaa <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <HAL_ADC_MspInit+0x4c>)
 8002e80:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_ADC_MspInit+0x4c>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e88:	6193      	str	r3, [r2, #24]
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_ADC_MspInit+0x4c>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
  
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e96:	2308      	movs	r3, #8
 8002e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0310 	add.w	r3, r7, #16
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4805      	ldr	r0, [pc, #20]	; (8002ebc <HAL_ADC_MspInit+0x50>)
 8002ea6:	f7fd fe5b 	bl	8000b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40012400 	.word	0x40012400
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40010800 	.word	0x40010800

08002ec0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec6:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f043 0310 	orr.w	r3, r3, #16
 8002ed0:	6193      	str	r3, [r2, #24]
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ede:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f043 0320 	orr.w	r3, r3, #32
 8002ee8:	6193      	str	r3, [r2, #24]
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6193      	str	r3, [r2, #24]
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <MX_GPIO_Init+0xa0>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f14:	4813      	ldr	r0, [pc, #76]	; (8002f64 <MX_GPIO_Init+0xa4>)
 8002f16:	f7fd ff81 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2107      	movs	r1, #7
 8002f1e:	4812      	ldr	r0, [pc, #72]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f20:	f7fd ff7c 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4619      	mov	r1, r3
 8002f38:	480a      	ldr	r0, [pc, #40]	; (8002f64 <MX_GPIO_Init+0xa4>)
 8002f3a:	f7fd fe11 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002f3e:	2307      	movs	r3, #7
 8002f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2302      	movs	r3, #2
 8002f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4805      	ldr	r0, [pc, #20]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f52:	f7fd fe05 	bl	8000b60 <HAL_GPIO_Init>

}
 8002f56:	bf00      	nop
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40011000 	.word	0x40011000
 8002f68:	40010800 	.word	0x40010800

08002f6c <main>:
/* USER CODE BEGIN 0 */
extern const char tabelaad[4096][5];
/* USER CODE END 0 */

int main(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f72:	f7fd f8eb 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f76:	f000 f86f 	bl	8003058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f7a:	f7ff ffa1 	bl	8002ec0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002f7e:	f7ff ff35 	bl	8002dec <MX_ADC1_Init>
  MX_SPI1_Init();
 8002f82:	f000 f8c7 	bl	8003114 <MX_SPI1_Init>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  OledInit();
 8002f86:	f7ff fccd 	bl	8002924 <OledInit>

	  int volts = HAL_ADC_GetValue(&hadc1);
 8002f8a:	482e      	ldr	r0, [pc, #184]	; (8003044 <main+0xd8>)
 8002f8c:	f7fd faea 	bl	8000564 <HAL_ADC_GetValue>
 8002f90:	4603      	mov	r3, r0
 8002f92:	607b      	str	r3, [r7, #4]

	  HAL_ADC_Start(&hadc1);
 8002f94:	482b      	ldr	r0, [pc, #172]	; (8003044 <main+0xd8>)
 8002f96:	f7fd fa37 	bl	8000408 <HAL_ADC_Start>
	  OledSetCursor(0,0);
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7ff fbf5 	bl	800278c <OledSetCursor>
	  OledPutString("Voltagem:");
 8002fa2:	4829      	ldr	r0, [pc, #164]	; (8003048 <main+0xdc>)
 8002fa4:	f7ff fc2c 	bl	8002800 <OledPutString>
	  OledSetCursor(0,1);
 8002fa8:	2101      	movs	r1, #1
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7ff fbee 	bl	800278c <OledSetCursor>
	  OledPutString(tabelaad[volts][3]);
 8002fb0:	4926      	ldr	r1, [pc, #152]	; (800304c <main+0xe0>)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3303      	adds	r3, #3
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fc1d 	bl	8002800 <OledPutString>
	  OledSetCursor(1,1);
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f7ff fbdf 	bl	800278c <OledSetCursor>
	  OledPutString(",");
 8002fce:	4820      	ldr	r0, [pc, #128]	; (8003050 <main+0xe4>)
 8002fd0:	f7ff fc16 	bl	8002800 <OledPutString>
	  OledSetCursor(2,1);
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	f7ff fbd8 	bl	800278c <OledSetCursor>
	  OledPutString(tabelaad[volts][2]);
 8002fdc:	491b      	ldr	r1, [pc, #108]	; (800304c <main+0xe0>)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3302      	adds	r3, #2
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fc07 	bl	8002800 <OledPutString>
	  OledSetCursor(3,1);
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f7ff fbc9 	bl	800278c <OledSetCursor>
	  OledPutString(tabelaad[volts][1]);
 8002ffa:	4914      	ldr	r1, [pc, #80]	; (800304c <main+0xe0>)
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	440b      	add	r3, r1
 8003006:	3301      	adds	r3, #1
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fbf8 	bl	8002800 <OledPutString>
	  OledSetCursor(4,1);
 8003010:	2101      	movs	r1, #1
 8003012:	2004      	movs	r0, #4
 8003014:	f7ff fbba 	bl	800278c <OledSetCursor>
	  OledPutString(tabelaad[volts][0]);
 8003018:	490c      	ldr	r1, [pc, #48]	; (800304c <main+0xe0>)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	440b      	add	r3, r1
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fbea 	bl	8002800 <OledPutString>

	  OledSetCursor(5,1);
 800302c:	2101      	movs	r1, #1
 800302e:	2005      	movs	r0, #5
 8003030:	f7ff fbac 	bl	800278c <OledSetCursor>
	  OledPutString("V");
 8003034:	4807      	ldr	r0, [pc, #28]	; (8003054 <main+0xe8>)
 8003036:	f7ff fbe3 	bl	8002800 <OledPutString>
//	  OledSetCursor(3,2);
//	  OledPutString("CascaBalde");
//	  OledSetCursor(3,3);
//	  OledPutString("Equipamentos");
	  HAL_Delay(500);
 800303a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800303e:	f7fd f8cf 	bl	80001e0 <HAL_Delay>





  }
 8003042:	e7a0      	b.n	8002f86 <main+0x1a>
 8003044:	20000370 	.word	0x20000370
 8003048:	08003414 	.word	0x08003414
 800304c:	08003788 	.word	0x08003788
 8003050:	08003420 	.word	0x08003420
 8003054:	08003424 	.word	0x08003424

08003058 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b094      	sub	sp, #80	; 0x50
 800305c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800305e:	2302      	movs	r3, #2
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003062:	2301      	movs	r3, #1
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003066:	2310      	movs	r3, #16
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800306a:	2300      	movs	r3, #0
 800306c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800306e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd feea 	bl	8000e4c <HAL_RCC_OscConfig>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <SystemClock_Config+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800307e:	21a0      	movs	r1, #160	; 0xa0
 8003080:	481f      	ldr	r0, [pc, #124]	; (8003100 <SystemClock_Config+0xa8>)
 8003082:	f000 f841 	bl	8003108 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003086:	230f      	movs	r3, #15
 8003088:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800309a:	f107 0314 	add.w	r3, r7, #20
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fdf3 	bl	8001c8c <HAL_RCC_ClockConfig>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030ac:	21ae      	movs	r1, #174	; 0xae
 80030ae:	4814      	ldr	r0, [pc, #80]	; (8003100 <SystemClock_Config+0xa8>)
 80030b0:	f000 f82a 	bl	8003108 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030b4:	2302      	movs	r3, #2
 80030b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f824 	bl	800210c <HAL_RCCEx_PeriphCLKConfig>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030ca:	21b5      	movs	r1, #181	; 0xb5
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <SystemClock_Config+0xa8>)
 80030ce:	f000 f81b 	bl	8003108 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80030d2:	f7ff f811 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <SystemClock_Config+0xac>)
 80030da:	fba3 2302 	umull	r2, r3, r3, r2
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fd09 	bl	8000af8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80030e6:	2004      	movs	r0, #4
 80030e8:	f7fd fd12 	bl	8000b10 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2100      	movs	r1, #0
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f7fd fce4 	bl	8000ac0 <HAL_NVIC_SetPriority>
}
 80030f8:	bf00      	nop
 80030fa:	3750      	adds	r7, #80	; 0x50
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	08003428 	.word	0x08003428
 8003104:	10624dd3 	.word	0x10624dd3

08003108 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8003112:	e7fe      	b.n	8003112 <_Error_Handler+0xa>

08003114 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <MX_SPI1_Init+0x68>)
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <MX_SPI1_Init+0x6c>)
 800311c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <MX_SPI1_Init+0x68>)
 8003120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <MX_SPI1_Init+0x68>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <MX_SPI1_Init+0x68>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <MX_SPI1_Init+0x68>)
 8003134:	2202      	movs	r2, #2
 8003136:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <MX_SPI1_Init+0x68>)
 800313a:	2201      	movs	r2, #1
 800313c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <MX_SPI1_Init+0x68>)
 8003140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003144:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <MX_SPI1_Init+0x68>)
 8003148:	2200      	movs	r2, #0
 800314a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <MX_SPI1_Init+0x68>)
 800314e:	2200      	movs	r2, #0
 8003150:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <MX_SPI1_Init+0x68>)
 8003154:	2200      	movs	r2, #0
 8003156:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <MX_SPI1_Init+0x68>)
 800315a:	2200      	movs	r2, #0
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <MX_SPI1_Init+0x68>)
 8003160:	220a      	movs	r2, #10
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_SPI1_Init+0x68>)
 8003166:	f7ff faab 	bl	80026c0 <HAL_SPI_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003170:	2145      	movs	r1, #69	; 0x45
 8003172:	4804      	ldr	r0, [pc, #16]	; (8003184 <MX_SPI1_Init+0x70>)
 8003174:	f7ff ffc8 	bl	8003108 <_Error_Handler>
  }

}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200003a0 	.word	0x200003a0
 8003180:	40013000 	.word	0x40013000
 8003184:	08003438 	.word	0x08003438

08003188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_SPI_MspInit+0x4c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d117      	bne.n	80031ca <HAL_SPI_MspInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800319a:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <HAL_SPI_MspInit+0x50>)
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_SPI_MspInit+0x50>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a4:	6193      	str	r3, [r2, #24]
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_SPI_MspInit+0x50>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
  
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80031b2:	23a0      	movs	r3, #160	; 0xa0
 80031b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ba:	2303      	movs	r3, #3
 80031bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	4619      	mov	r1, r3
 80031c4:	4805      	ldr	r0, [pc, #20]	; (80031dc <HAL_SPI_MspInit+0x54>)
 80031c6:	f7fd fccb 	bl	8000b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80031ca:	bf00      	nop
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40013000 	.word	0x40013000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40010800 	.word	0x40010800

080031e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031e6:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_MspInit+0x90>)
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_MspInit+0x90>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6193      	str	r3, [r2, #24]
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_MspInit+0x90>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031fe:	2003      	movs	r0, #3
 8003200:	f7fd fc52 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	f06f 000b 	mvn.w	r0, #11
 800320c:	f7fd fc58 	bl	8000ac0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	f06f 000a 	mvn.w	r0, #10
 8003218:	f7fd fc52 	bl	8000ac0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	f06f 0009 	mvn.w	r0, #9
 8003224:	f7fd fc4c 	bl	8000ac0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003228:	2200      	movs	r2, #0
 800322a:	2100      	movs	r1, #0
 800322c:	f06f 0004 	mvn.w	r0, #4
 8003230:	f7fd fc46 	bl	8000ac0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2100      	movs	r1, #0
 8003238:	f06f 0003 	mvn.w	r0, #3
 800323c:	f7fd fc40 	bl	8000ac0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003240:	2200      	movs	r2, #0
 8003242:	2100      	movs	r1, #0
 8003244:	f06f 0001 	mvn.w	r0, #1
 8003248:	f7fd fc3a 	bl	8000ac0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2100      	movs	r1, #0
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f7fd fc34 	bl	8000ac0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003258:	4a06      	ldr	r2, [pc, #24]	; (8003274 <HAL_MspInit+0x94>)
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_MspInit+0x94>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003266:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	40010000 	.word	0x40010000

08003278 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8003288:	e7fe      	b.n	8003288 <HardFault_Handler+0x4>
 800328a:	bf00      	nop

0800328c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8003290:	e7fe      	b.n	8003290 <MemManage_Handler+0x4>
 8003292:	bf00      	nop

08003294 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8003298:	e7fe      	b.n	8003298 <BusFault_Handler+0x4>
 800329a:	bf00      	nop

0800329c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 80032a0:	e7fe      	b.n	80032a0 <UsageFault_Handler+0x4>
 80032a2:	bf00      	nop

080032a4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032cc:	f7fc ff70 	bl	80001b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80032d0:	f7fd fc3a 	bl	8000b48 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <SystemInit+0x5c>)
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <SystemInit+0x5c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80032e8:	4912      	ldr	r1, [pc, #72]	; (8003334 <SystemInit+0x5c>)
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <SystemInit+0x5c>)
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <SystemInit+0x60>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <SystemInit+0x5c>)
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <SystemInit+0x5c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <SystemInit+0x5c>)
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <SystemInit+0x5c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003310:	4a08      	ldr	r2, [pc, #32]	; (8003334 <SystemInit+0x5c>)
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <SystemInit+0x5c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800331a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SystemInit+0x5c>)
 800331e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003322:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SystemInit+0x64>)
 8003326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800332a:	609a      	str	r2, [r3, #8]
#endif 
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40021000 	.word	0x40021000
 8003338:	f8ff0000 	.word	0xf8ff0000
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003340:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003342:	e003      	b.n	800334c <LoopCopyDataInit>

08003344 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003346:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003348:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800334a:	3104      	adds	r1, #4

0800334c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800334c:	480a      	ldr	r0, [pc, #40]	; (8003378 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003350:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003352:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003354:	d3f6      	bcc.n	8003344 <CopyDataInit>
  ldr r2, =_sbss
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003358:	e002      	b.n	8003360 <LoopFillZerobss>

0800335a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800335c:	f842 3b04 	str.w	r3, [r2], #4

08003360 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003362:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003364:	d3f9      	bcc.n	800335a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003366:	f7ff ffb7 	bl	80032d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336a:	f000 f80f 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800336e:	f7ff fdfd 	bl	8002f6c <main>
  bx lr
 8003372:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8003374:	080087a0 	.word	0x080087a0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8003378:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800337c:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003380:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8003384:	200003f8 	.word	0x200003f8

08003388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003388:	e7fe      	b.n	8003388 <ADC1_2_IRQHandler>
	...

0800338c <__libc_init_array>:
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <__libc_init_array+0x3c>)
 800338e:	b570      	push	{r4, r5, r6, lr}
 8003390:	461e      	mov	r6, r3
 8003392:	4c0e      	ldr	r4, [pc, #56]	; (80033cc <__libc_init_array+0x40>)
 8003394:	2500      	movs	r5, #0
 8003396:	1ae4      	subs	r4, r4, r3
 8003398:	10a4      	asrs	r4, r4, #2
 800339a:	42a5      	cmp	r5, r4
 800339c:	d004      	beq.n	80033a8 <__libc_init_array+0x1c>
 800339e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033a2:	4798      	blx	r3
 80033a4:	3501      	adds	r5, #1
 80033a6:	e7f8      	b.n	800339a <__libc_init_array+0xe>
 80033a8:	f000 f816 	bl	80033d8 <_init>
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <__libc_init_array+0x44>)
 80033ae:	4c09      	ldr	r4, [pc, #36]	; (80033d4 <__libc_init_array+0x48>)
 80033b0:	461e      	mov	r6, r3
 80033b2:	1ae4      	subs	r4, r4, r3
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2500      	movs	r5, #0
 80033b8:	42a5      	cmp	r5, r4
 80033ba:	d004      	beq.n	80033c6 <__libc_init_array+0x3a>
 80033bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033c0:	4798      	blx	r3
 80033c2:	3501      	adds	r5, #1
 80033c4:	e7f8      	b.n	80033b8 <__libc_init_array+0x2c>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	08008798 	.word	0x08008798
 80033cc:	08008798 	.word	0x08008798
 80033d0:	08008798 	.word	0x08008798
 80033d4:	0800879c 	.word	0x0800879c

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
